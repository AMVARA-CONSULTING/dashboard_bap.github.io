{"version":3,"file":"93.289aac6708a09374.js","mappings":"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","names":["swipeAnimation","trigger","transition","query","style","overflow","optional","group","transform","animate","left","i0","ctx_r4","oxw","GraphicComponent","constructor","_data","router","activatedRoute","this","paramMap","subscribe","params","plantID","get","getIndex","index","goMonth","date","year","momentum","format","navigate","monthsSetter","values","maxs","map","item","program","maxNumber","Math","max","months","width","length","shouldRotate","setTimeout","ready","selectors","opacity","stagger","ctx_r7","AllocationMainComponent","data","title","api","config","window","a1","moment","language","setTitle","appTitle","plant","allocationData","getSavedReportData","ReportTypes","res","plandate","getPlanDateWithMoment","rollupData","changePlant","localStorage","setItem","replaceUrl","relativeTo","getDate","month","plants","reduce","r","a","Object","keys","plantCache","getItem","filter","reports","trucks","columns","allocation","plantName","dateNow","startOf","dateNextEightMonths","add","endOf","filteredRowsByPlant","aloc","years","toString","substring","forEach","alocDate","isBetween","info","monthCorrected","sumByIndex","push","percent","ctx","$event","state","height","WrapperComponent","lastTap2","getLevel","currentLevel","outlet","activatedRouteData","level","AllocationBarComponent","allocationSetter","value","zero","isNaN","programSetter","ctx_r9","ctx_r10","ctx_r14","ctx_r18","ctx_r11","ctx_r12","ctx_r16","ctx_r19","routes","path","component","children","goRegion","key","goProduct","maxProgram","mon","yearMonth","replace","totalProgram","totalAllocation","partNumber","percentAllocation","percentProgram","programNumber","regions","classifyByIndex","regionName","monthMomentum","products","productName","returnToMain","AllocationLvl2Component","type","region_id","decodeURI","concat","filteredRowsByPlant_copy2","subtotalProgram","subtotalAllocation","rows","exchangeType","returnToParent","AllocationLvl3Component","AllocationModule","CommonModule","RouterModule","SharedModule","sign","comma","ToNumberFn","ultimate","round","t","parseInt","abs","toFixed","toLocaleString","g","NumberPipe","pure","__decorate","SelectSnapshot","ConfigState"],"sourceRoot":"webpack:///","sources":["./src/app/app.transitions.ts","./src/app/modules/allocation/components/graphic/graphic.component.html","./src/app/modules/allocation/components/graphic/graphic.component.ts","./src/app/modules/allocation/components/allocation-main/allocation-main.component.html","./src/app/modules/allocation/components/allocation-main/allocation-main.component.ts","./src/app/modules/allocation/components/wrapper/wrapper.component.ts","./src/app/modules/allocation/components/wrapper/wrapper.component.html","./src/app/modules/allocation/components/allocation-bar/allocation-bar.component.ts","./src/app/modules/allocation/components/allocation-bar/allocation-bar.component.html","./src/app/modules/allocation/components/allocation-lvl2/allocation-lvl2.component.html","./src/app/modules/allocation/components/allocation-lvl3/allocation-lvl3.component.html","./src/app/modules/allocation/allocation.module.ts","./src/app/modules/allocation/components/allocation-lvl2/allocation-lvl2.component.ts","./src/app/modules/allocation/components/allocation-lvl3/allocation-lvl3.component.ts","./src/app/pipes/number.pipe.ts"],"sourcesContent":["import { trigger, transition, query, style, group, animate } from '@angular/animations';\n\nexport const swipeAnimation =  trigger('routerTransition', [\n    transition(':increment', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n    transition(':decrement', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ left: 0, transform: 'translateX(100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n  ])","<div (click)=\"goMonth(month.month)\" *ngFor=\"let month of months; trackBy: getIndex;\"\n  [style.width.%]=\"width\" class=\"month\">\n  <div class=\"program\" [ngClass]=\"{zero: !ready}\" [style.height.%]=\"(month.program * 100 / maxNumber) || 1\">\n    <div style=\"position:relative;width:100%;height:100%;\">\n      <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ month.program | toNumber }}</div>\n      <div matTooltipPosition=\"above\" matTooltipClass=\"allocation\" [matTooltip]=\"month.allocation | toNumber\" class=\"allocation\"\n        [ngClass]=\"{zero: !ready}\" [style.height.%]=\"month.allocation * 100 / month.program\"></div>\n    </div>\n  </div>\n  <div [ngClass]=\"{'rotate': shouldRotate}\" class=\"date\" [innerText]=\"month.month\"></div>\n</div>","import { DataService } from './../../../../services/data.service';\nimport { Component, Input } from '@angular/core';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'allocation-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('100ms', animate('400ms ease-in-out', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ],\n  host: {\n    '[@list]': 'months.length'\n  }\n})\nexport class GraphicComponent {\n\n  constructor(\n    public _data: DataService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.activatedRoute.paramMap.subscribe(params => this.plantID = params.get('plant'));\n  }\n\n  plantID: string;\n\n  getIndex(index) {\n    return index\n  }\n\n  goMonth(date): void {\n    const momentum = moment(date, 'MM / YYYY');\n    const year = momentum.format('YYYYMM');\n    this.router.navigate(['covid', this.plantID, 'date', year]);\n  }\n\n  width: number = 0\n\n  ready: boolean = false\n\n  maxNumber: number = 0\n\n  months = []\n\n  shouldRotate: boolean = false\n\n  @Input('months') set monthsSetter(values) {\n    const maxs = values.map(item => item.program)\n    this.maxNumber = Math.max(...maxs)\n    this.months = values\n    const count = values.length\n    this.width = 100 / count\n    this.shouldRotate = this.width < 20\n    setTimeout(() => this.ready = true, 300)\n  }\n\n}\n","<div class=\"report-header\">\n  <div class=\"plandate\">\n    <div class=\"empty\"></div> {{ 'plandate' | translate }}: {{ plandate }}\n  </div>\n  <div class=\"overview\">\n    <div class=\"graphic\">\n      <allocation-graphic [months]=\"months\"></allocation-graphic>\n    </div>\n  </div>\n</div>\n<header>\n  <div class=\"month\">\n    <mat-form-field matTooltipClass=\"after\" class=\"allocation-selector\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\"\n      style=\"margin-left: 10px;\">\n      <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n        <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n          {{ plant.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"allocation\">{{ 'allocation.allocation' | translate }}</div>\n  <div class=\"program\">{{ 'allocation.program' | translate }}</div>\n  <div class=\"percent\">&Delta;</div>\n</header>\n<div class=\"content-wrapper\" [@list]=\"months.length\">\n  <div class=\"row-group\" *ngFor=\"let year of years\">\n    <div class=\"group-header\">{{ year }}</div>\n    <ng-container *ngFor=\"let month of months\">\n      <div class=\"row\" *ngIf=\"month.year == year\" (click)=\"goMonth(month.month)\">\n        <div class=\"month\">{{ getDate(month.month) }}</div>\n        <div class=\"allocation\">{{ month.allocation | toNumber }}</div>\n        <div class=\"program\">{{ month.program | toNumber }}</div>\n        <div class=\"percent\">{{ month.percent }}</div>\n      </div>\n    </ng-container>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport * as moment from 'moment';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate, state } from '@angular/animations';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment, percent } from '@other/functions';\n\n@Component({\n  selector: 'allocation-main',\n  templateUrl: './allocation-main.component.html',\n  styleUrls: ['./allocation-main.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('100ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ]),\n    trigger('fade', [\n      state('false', style({ opacity: 0, height: 0, overflow: 'hidden' })),\n      state('true', style({ opacity: 1, height: '35px', overflow: 'initial' })),\n      transition('false => true', animate('250ms', style({ opacity: 1, height: '35px', overflow: 'initial' })))\n    ])\n  ],\n  host: {\n    '(swiperight)': 'data.goFrom(\"allocation\", $event)',\n    '(swipeleft)': 'data.goFrom(\"allocation\", $event)'\n  }\n})\nexport class AllocationMainComponent {\n  ready: boolean = false\n  plandate: string = ''\n  plants\n  years: string[] = []\n  months = []\n  plant: string\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).a1 = this;\n    moment.locale(this.config.config.language)\n    this.title.setTitle(this.config.config.appTitle + ' - Covid 19')\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      // If no Allocation rows were found, get them\n      if (this.data.allocationData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.Allocation).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][18], moment)\n          this.data.allocationData = res;\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.allocationData[0][18], moment)\n        this.rollupData()\n      }\n    })\n  }\n\n  changePlant(plant: string): void {\n    localStorage.setItem('allocation-plant', plant)\n    this.router.navigate(['covid', plant], { replaceUrl: true })\n  }\n\n  goMonth(date): void {\n    const momentum = moment(date, 'MM / YYYY')\n    const year = momentum.format('YYYYMM')\n    this.router.navigate(['date', year], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  getDate(month): string {\n    return moment(month, 'MM / YYYY').format('MMMM YYYY')\n  }\n\n  rollupData() {\n    this.plants = this.data.allocationData.reduce((r, a) => {\n      r[a[0]] = r[a[0]] || ''\n      r[a[0]] = a[this.config.config.language == 'en' ? 4 : 3]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['covid', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    \n    const plantCache = localStorage.getItem('allocation-plant')\n    if (plantCache && this.plant != plantCache) this.router.navigate(['/covid', plantCache], { replaceUrl: true })\n    this.title.setTitle(this.config.config.appTitle + ' - Covid 19 - ' + (this.data.allocationData.filter(item => item[0] == this.plant)[0][this.config.config.reports.trucks.columns.allocation.plantName[this.config.config.language]]))\n    const dateNow: moment.Moment = moment().startOf('month')\n    const dateNextEightMonths: moment.Moment = moment().add(12, 'months').endOf('month')\n    let months = {}\n    const filteredRowsByPlant = this.data.allocationData.filter(aloc => aloc[0] == this.plant)\n    this.years = Object.keys(filteredRowsByPlant.reduce((r, a) => {\n      r[a[17].toString().substring(0, 4)] = r[a[17].toString().substring(0, 4)] || []\n        return r\n      }, {})\n    )\n    filteredRowsByPlant.forEach(aloc => {\n      const alocDate = moment(aloc[17], 'YYYYMM')\n      if (alocDate.isBetween(dateNow, dateNextEightMonths, null, '[]')) {\n        months[aloc[17]] = []\n      }\n    })\n    let info = []\n    Object.keys(months).forEach(month => {\n      const monthCorrected = moment(month, 'YYYYMM').format('MM / YYYY')\n      const program = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.program)\n      const allocation = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.allocation)\n      info.push({\n        year: moment(monthCorrected, 'MM / YYYY').format('YYYY'),\n        month: monthCorrected,\n        program: program,\n        allocation: allocation,\n        percent: percent(allocation, program, true, true, true)\n      })\n    })\n    this.months = info\n    setTimeout(() => {\n      this.ready = true\n    })\n  }\n\n\n\n}","import { Component, ViewChild } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { RouterOutlet } from '@angular/router';\nimport { swipeAnimation } from 'app/app.transitions';\n\n@Component({\n  selector: 'allocation-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n  animations: [swipeAnimation],\n  host: {\n    '[@routerTransition]': 'getLevel()'\n  }\n})\nexport class WrapperComponent {\n\n  constructor(private data: DataService) {\n    data.lastTap, data.lastTap2 = null;\n  }\n\n  @ViewChild('o', { static: true }) outlet: RouterOutlet;\n\n  getLevel() {\n    this.data.currentLevel = +this.outlet.activatedRouteData['level'];\n    return this.outlet.activatedRouteData['level'];\n  }\n\n}\n","<router-outlet #o=\"outlet\"></router-outlet>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'allocation-bar',\n  templateUrl: './allocation-bar.component.html',\n  styleUrls: ['./allocation-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AllocationBarComponent {\n\n  allocation = 0;\n  program = 0;\n  zero = false;\n\n  @Input() partNumber: number;\n  @Input() programNumber: number;\n\n  @Input() ready: boolean;\n\n  @Input('allocation') set allocationSetter(value: number) {\n    this.allocation = value;\n    this.zero = (isNaN(this.allocation) || this.allocation === 0) && this.program === 0;\n  }\n\n  @Input('program') set programSetter(value: number) {\n    this.program = value;\n    this.zero = (isNaN(this.allocation) || this.allocation === 0) && this.program === 0;\n  }\n\n}\n","<div style=\"position:relative;width:100%;height:100%;\">\n  <div class=\"blackout\"></div>\n  <div class=\"bar\" [ngClass]=\"{'grey': zero}\" matTooltipClass=\"above\" [matTooltip]=\"programNumber | toNumber:false:false\"\n    matTooltipPosition=\"above\">\n    <div style=\"position:relative;width:100%;height:100%;\">\n      <div matTooltipClass=\"above\" [matTooltip]=\"partNumber | toNumber:false:false\" matTooltipPosition=\"above\" class=\"allocation\"\n        [style.width.%]=\"ready ? (allocation >= 100 ? 100 : allocation) : 0\">\n        <span class=\"percent2\">{{ allocation + ' %' }}</span>\n      </div>\n    </div>\n  </div>\n</div>","<div class=\"plandate\">\n  <div class=\"empty\"></div>{{ 'plandate' | translate }}: {{ plandate }}\n</div>\n<div class=\"overview\" *ngIf=\"ready\">\n  <div class=\"graphic\">\n    <allocation-graphic [months]=\"months\"></allocation-graphic>\n  </div>\n</div>\n<header *ngIf=\"ready\">\n  <div class=\"month\">\n    <mat-form-field matTooltipClass=\"after\" class=\"allocation-selector\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\"\n      style=\"margin-left: 10px;\">\n      <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n        <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n          {{ plant.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"allocation\">{{ 'allocation.allocation' | translate }}</div>\n  <div class=\"program\">{{ 'allocation.program' | translate }}</div>\n  <div class=\"percent\">&Delta;</div>\n</header>\n<header class=\"return\" *ngIf=\"ready\">\n  <div class=\"month\" (click)=\"returnToMain()\">\n    <div class=\"first-row\" matTooltipClass=\"after\" matTooltip=\"Return to main view\" matTooltipPosition=\"after\" style=\"display: inline-block\">{{\n      monthMomentum }}</div>\n  </div>\n  <div class=\"total-allocation\">{{ totalAllocation | toNumber }}</div>\n  <div class=\"total-program\">{{ totalProgram | toNumber }}</div>\n  <div class=\"total-empty\"></div>\n</header>\n<allocation-bar [programNumber]=\"programNumber\" [allocation]=\"percentAllocation\" [program]=\"percentProgram\" [ready]=\"ready\"\n  [partNumber]=\"partNumber || 0\"></allocation-bar>\n<div class=\"content-wrapper\" [@list]=\"months.length\">\n  <div class=\"row-group\" *ngIf=\"regions\">\n    <div class=\"group-header\">REGIONS</div>\n    <div class=\"row\" (click)=\"goRegion(region.key)\" *ngFor=\"let region of regions | keyvalue\">\n      <div class=\"month\">{{ region.key }}</div>\n      <div class=\"allocation\">{{ data.sumByIndex(region.value,\n        config.config.reports.trucks.columns.allocation.allocation) | toNumber }}</div>\n      <div class=\"program\">{{ data.sumByIndex(region.value, config.config.reports.trucks.columns.allocation.program) |\n        toNumber }}</div>\n      <div class=\"percent\">{{ percent(data.sumByIndex(region.value,\n        config.config.reports.trucks.columns.allocation.allocation), data.sumByIndex(region.value,\n        config.config.reports.trucks.columns.allocation.program), true, true, true) }}</div>\n    </div>\n  </div>\n  <div class=\"row-group\" *ngIf=\"products\">\n    <div class=\"group-header\">ESTABLISHMENT</div>\n    <div class=\"row\" (click)=\"goProduct(product.key)\" *ngFor=\"let product of products | keyvalue\">\n      <div class=\"month\">{{ product.key }}</div>\n      <div class=\"allocation\">{{ data.sumByIndex(product.value,\n        config.config.reports.trucks.columns.allocation.allocation) | toNumber }}</div>\n      <div class=\"program\">{{ data.sumByIndex(product.value, config.config.reports.trucks.columns.allocation.program) |\n        toNumber }}</div>\n      <div class=\"percent\">{{ percent(data.sumByIndex(product.value,\n        config.config.reports.trucks.columns.allocation.allocation), data.sumByIndex(product.value,\n        config.config.reports.trucks.columns.allocation.program), true, true, true) }}</div>\n    </div>\n  </div>\n</div>","<div class=\"plandate\">\n  <div class=\"empty\"></div>{{ 'plandate' | translate }}: {{ plandate }}\n</div>\n<div class=\"overview\" *ngIf=\"ready\">\n  <div class=\"graphic\">\n    <allocation-graphic [months]=\"months\"></allocation-graphic>\n  </div>\n</div>\n<header *ngIf=\"ready\">\n  <div class=\"month\">\n    <mat-form-field matTooltipClass=\"after\" class=\"allocation-selector\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\"\n      style=\"margin-left: 10px;\">\n      <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n        <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n          {{ plant.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"allocation\">{{ 'allocation.allocation' | translate }}</div>\n  <div class=\"program\">{{ 'allocation.program' | translate }}</div>\n  <div class=\"percent\">&Delta;</div>\n</header>\n<header class=\"return\" *ngIf=\"ready\">\n  <div class=\"month\" (click)=\"returnToMain()\">\n    <div matTooltipClass=\"after\" matTooltip=\"Return to main view\" matTooltipPosition=\"after\" style=\"display: inline-block\">{{\n      monthMomentum }}</div>\n  </div>\n  <div class=\"total-allocation\">{{ totalAllocation | toNumber }}</div>\n  <div class=\"total-program\">{{ totalProgram | toNumber }}</div>\n  <div class=\"total-empty\"></div>\n</header>\n<header class=\"return2\" *ngIf=\"ready\">\n  <div class=\"month\" (click)=\"returnToParent()\">\n    <div *ngIf=\"type == 'region'\" matTooltipClass=\"after\" matTooltip=\"Return to month view\" matTooltipPosition=\"after\"\n      style=\"display: inline-block\">{{ 'region' | translate }} - {{ region_id }}</div>\n    <div *ngIf=\"type == 'product'\" matTooltipClass=\"after\" matTooltip=\"Return to month view\" matTooltipPosition=\"after\"\n      style=\"display: inline-block\">{{ 'product' | translate }} - {{ region_id }}</div>\n  </div>\n  <div class=\"total-allocation\">{{ subtotalAllocation | toNumber }}</div>\n  <div class=\"total-program\">{{ subtotalProgram | toNumber }}</div>\n  <div class=\"total-empty\"></div>\n</header>\n<allocation-bar [programNumber]=\"subtotalProgram\" [allocation]=\"percentAllocation\" [program]=\"subtotalProgram\" [ready]=\"ready\"\n  [partNumber]=\"subtotalAllocation || 0\"></allocation-bar>\n<div class=\"content-wrapper\" [@list]=\"months.length\">\n  <div class=\"row-group\">\n    <div class=\"group-header\" *ngIf=\"type == 'region'\">{{ 'products' | translate }}</div>\n    <div class=\"group-header\" *ngIf=\"type == 'product'\">{{ 'regions' | translate }}</div>\n    <div class=\"row\" (click)=\"exchangeType(row.key)\" *ngFor=\"let row of rows | keyvalue\">\n      <div class=\"month\">{{ row.key }}</div>\n      <div class=\"allocation\">{{ data.sumByIndex(row.value, config.config.reports.trucks.columns.allocation.allocation)\n        | toNumber }}</div>\n      <div class=\"program\">{{ data.sumByIndex(row.value, config.config.reports.trucks.columns.allocation.program) |\n        toNumber }}</div>\n      <div class=\"percent\">{{ percent(data.sumByIndex(row.value,\n        config.config.reports.trucks.columns.allocation.allocation), data.sumByIndex(row.value,\n        config.config.reports.trucks.columns.allocation.program), true, true, true) }}</div>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AllocationMainComponent } from './components/allocation-main/allocation-main.component';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { WrapperComponent } from './components/wrapper/wrapper.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AllocationLvl2Component } from './components/allocation-lvl2/allocation-lvl2.component';\nimport { GraphicComponent } from './components/graphic/graphic.component';\nimport { AllocationLvl3Component } from '@modules/allocation/components/allocation-lvl3/allocation-lvl3.component';\nimport { AllocationBarComponent } from './components/allocation-bar/allocation-bar.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WrapperComponent,\n    children: [\n      {\n        path: '',\n        component: AllocationMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant',\n        component: AllocationMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant/date/:date',\n        component: AllocationLvl2Component,\n        data: { level: 2 }\n      },\n      {\n        path: ':plant/date/:date/:type/:region_id',\n        component: AllocationLvl3Component,\n        data: { level: 3 }\n      }\n    ]\n  }\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  declarations: [\n    AllocationMainComponent,\n    WrapperComponent,\n    AllocationLvl2Component,\n    GraphicComponent,\n    AllocationLvl3Component,\n    AllocationBarComponent\n  ]\n})\nexport class AllocationModule { }\n","import { Component } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport * as moment from 'moment';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate, state } from '@angular/animations';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment, percent } from '@other/functions';\n\n@Component({\n  selector: 'allocation-lvl2',\n  templateUrl: './allocation-lvl2.component.html',\n  styleUrls: ['./allocation-lvl2.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('100ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ]),\n    trigger('fade', [\n      state('false', style({ opacity: 0, height: 0, overflow: 'hidden' })),\n      state('true', style({ opacity: 1, height: '35px', overflow: 'initial' })),\n      transition('false => true', animate('250ms', style({ opacity: 1, height: '35px', overflow: 'initial' })))\n    ])\n  ],\n  host: {\n    '(swiperight)': 'data.goFrom(\"allocation\", $event)',\n    '(swipeleft)': 'data.goFrom(\"allocation\", $event)'\n  }\n})\nexport class AllocationLvl2Component {\n\n  percent = percent;\n\n  ready: boolean = false\n\n  plandate: string = ''\n  plants\n\n  years: string[] = []\n\n  months = []\n\n  plant: string\n  date: string\n\n  monthMomentum: string = ''\n\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).moment = moment\n    moment.locale(this.config.config.language)\n    this.title.setTitle(config.config.appTitle + ' - Covid 19')\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      this.date = params.get('date')\n      // If no Allocation rows were found, get them\n      if (this.data.allocationData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.Allocation).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][18], moment)\n          this.data.allocationData = res\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.allocationData[0][18], moment)\n        this.rollupData()\n      }\n    })\n  }\n\n  changePlant(plant: string): void {\n    this.router.navigate(['covid', plant, 'date', this.date], { replaceUrl: true })\n  }\n\n  goRegion(key): void {\n    this.router.navigate(['region', key], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  goProduct(key): void {\n    this.router.navigate(['product', key], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  goMonth(date): void {\n    const momentum = moment(date, 'MM / YYYY')\n    const year = momentum.format('DDYYYY')\n    this.router.navigate(['date', year], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  getDate(month): string {\n    return moment(month, 'MM / YYYY').format('MMMM YYYY')\n  }\n\n  rollupData() {\n    this.plants = this.data.allocationData.reduce((r, a) => {\n      r[a[0]] = r[a[0]] || ''\n      r[a[0]] = a[this.config.config.language == 'en' ? 4 : 3]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['covid', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - Covid 19 - ' + (this.data.allocationData.filter(item => item[0] == this.plant)[0][this.config.config.reports.trucks.columns.allocation.plantName[this.config.config.language]]))\n    const dateNow: moment.Moment = moment()\n    const dateNextEightMonths: moment.Moment = moment().add(12, 'months')\n    let months = {}\n    let filteredRowsByPlant = this.data.allocationData.filter(aloc => aloc[0] == this.plant)\n    this.years = Object.keys(filteredRowsByPlant.reduce((r, a) => {\n      r[a[17].toString().substring(0, 4)] = r[a[17].toString().substring(0, 4)] || []\n      return r\n    }, {}))\n    filteredRowsByPlant.forEach(aloc => {\n      const alocDate = moment(aloc[17], 'YYYYMM')\n      if (alocDate.isBetween(dateNow, dateNextEightMonths, null, '[]')) {\n        months[aloc[17]] = []\n      }\n    })\n    let info = []\n    Object.keys(months).forEach(month => {\n      const monthCorrected = moment(month, 'YYYYMM').format('MM / YYYY')\n      const program = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.program)\n      const allocation = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.allocation)\n      info.push({\n        year: moment(monthCorrected, 'MM / YYYY').format('YYYY'),\n        month: monthCorrected,\n        program: program,\n        allocation: allocation,\n        percent: percent(allocation, program, true, true, true)\n      })\n    })\n    const maxProgram = Math.max(...info.map(mon => mon.program))\n    filteredRowsByPlant = filteredRowsByPlant.filter(item => {\n      return item[this.config.config.reports.trucks.columns.allocation.yearMonth].replace(/\\-/, '') == this.date\n    })\n    this.totalProgram = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program)\n    this.totalAllocation = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation)\n    this.partNumber = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation)\n    this.percentAllocation = +percent(this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation), this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program), false, false, false)\n    this.percentProgram = +percent(this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program), maxProgram, false, false, false)\n    this.programNumber = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program)\n    this.regions = this.data.classifyByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.regionName[this.config.config.language])\n    this.monthMomentum = moment(this.date, 'YYYYMM').format('MMMM YYYY')\n    this.products = this.data.classifyByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.productName[this.config.config.language])\n    this.months = info\n    setTimeout(() => {\n      this.ready = true\n    })\n\n  }\n\n  returnToMain(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  percentAllocation: number | string = 0\n  percentProgram: number | string = 0\n  partNumber: number = 0\n  programNumber: number = 0\n\n  regions\n  products\n\n  totalProgram: number = 0\n  totalAllocation: number = 0\n\n}","import { Component } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport * as moment from 'moment';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { trigger, transition, query, style, stagger, animate, state } from '@angular/animations';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment, percent } from '@other/functions';\n\n@Component({\n  selector: 'allocation-lvl3',\n  templateUrl: './allocation-lvl3.component.html',\n  styleUrls: ['./allocation-lvl3.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('100ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ]),\n    trigger('fade', [\n      state('false', style({ opacity: 0, height: 0, overflow: 'hidden' })),\n      state('true', style({ opacity: 1, height: '35px', overflow: 'initial' })),\n      transition('false => true', animate('250ms', style({ opacity: 1, height: '35px', overflow: 'initial' })))\n    ])\n  ],\n  host: {\n    '(swiperight)': 'data.goFrom(\"allocation\", $event)',\n    '(swipeleft)': 'data.goFrom(\"allocation\", $event)'\n  }\n})\nexport class AllocationLvl3Component {\n  percent = percent;\n  ready: boolean = false\n  plandate: string = ''\n  plants\n  years: string[] = []\n  months = []\n  plant: string\n  date: string\n  type: string\n  region_id: string\n  monthMomentum: string = ''\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).moment = moment\n    moment.locale(this.config.config.language)\n    this.title.setTitle(this.config.config.appTitle + ' - Covid 19')\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      this.date = params.get('date')\n      this.type = params.get('type')\n      this.region_id = decodeURI(params.get('region_id'))\n      // If no Allocation rows were found, get them\n      if (this.data.allocationData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.Allocation).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][18], moment)\n          this.data.allocationData = res\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.allocationData[0][18], moment)\n        this.rollupData()\n      }\n    })\n  }\n  changePlant(plant: string): void {\n    this.router.navigate(['covid', plant, 'date', this.date, this.type, this.region_id], { replaceUrl: true })\n  }\n  getDate(month): string {\n    return moment(month, 'MM / YYYY').format('MMMM YYYY')\n  }\n  rollupData() {\n    this.plants = this.data.allocationData.reduce((r, a) => {\n      r[a[0]] = r[a[0]] || ''\n      r[a[0]] = a[this.config.config.language == 'en' ? 4 : 3]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['covid', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - Covid 19- ' + (this.data.allocationData.filter(item => item[0] == this.plant)[0][this.config.config.reports.trucks.columns.allocation.plantName[this.config.config.language]]))\n    const dateNow: moment.Moment = moment()\n    const dateNextEightMonths: moment.Moment = moment().add(12, 'months')\n    let months = {}\n    let filteredRowsByPlant = this.data.allocationData.filter(aloc => aloc[0] == this.plant)\n    this.years = Object.keys(filteredRowsByPlant.reduce((r, a) => {\n      r[a[17].toString().substring(0, 4)] = r[a[17].toString().substring(0, 4)] || []\n      return r\n    }, {})\n    )\n    filteredRowsByPlant.forEach(aloc => {\n      const alocDate = moment(aloc[17], 'YYYYMM')\n      if (alocDate.isBetween(dateNow, dateNextEightMonths, null, '[]')) {\n        months[aloc[17]] = []\n      }\n    })\n    let info = []\n    Object.keys(months).forEach(month => {\n      const monthCorrected = moment(month, 'YYYYMM').format('MM / YYYY')\n      const program = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.program)\n      const allocation = this.data.sumByIndex(filteredRowsByPlant.filter(aloc => aloc[17] == month), this.config.config.reports.trucks.columns.allocation.allocation)\n      info.push({\n        year: moment(monthCorrected, 'MM / YYYY').format('YYYY'),\n        month: monthCorrected,\n        program: program,\n        allocation: allocation,\n        percent: percent(allocation, program, true, true, true)\n      })\n    })\n    const filteredRowsByPlant_copy = filteredRowsByPlant.concat()\n    filteredRowsByPlant = filteredRowsByPlant.filter(item => item[this.config.config.reports.trucks.columns.allocation.yearMonth].replace(/\\-/,'') == this.date)\n    this.totalProgram = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program)\n    this.totalAllocation = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation)\n    const filteredRowsByPlant_copy2 = filteredRowsByPlant.concat()\n    if (this.type == 'region') {\n      filteredRowsByPlant = filteredRowsByPlant.filter(item => item[this.config.config.reports.trucks.columns.allocation.regionName[this.config.config.language]] == this.region_id)\n    } else {\n      filteredRowsByPlant = filteredRowsByPlant.filter(item => item[this.config.config.reports.trucks.columns.allocation.productName[this.config.config.language]] == this.region_id)\n    }\n    this.subtotalProgram = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program)\n    this.subtotalAllocation = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation)\n    this.partNumber = this.data.sumByIndex(filteredRowsByPlant_copy2, this.config.config.reports.trucks.columns.allocation.allocation)\n    this.percentAllocation = +percent(this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.allocation), this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program), false, false, false)\n    this.percentProgram = +percent(this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.program), this.data.sumByIndex(filteredRowsByPlant_copy2, this.config.config.reports.trucks.columns.allocation.program), false, false, false)\n    this.programNumber = this.data.sumByIndex(filteredRowsByPlant_copy2, this.config.config.reports.trucks.columns.allocation.program)\n    this.monthMomentum = moment(this.date, 'YYYYMM').format('MMMM YYYY')\n    if (this.type == 'region') {\n      this.rows = this.data.classifyByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.productName[this.config.config.language])\n    } else {\n      this.rows = this.data.classifyByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.allocation.regionName[this.config.config.language])\n    }\n    this.months = info\n    setTimeout(() => {\n      this.ready = true\n    })\n  }\n  exchangeType(key): void {\n    if (this.type == 'region') {\n      this.router.navigate(['../../', 'product', key], { relativeTo: this.activatedRoute, replaceUrl: true })\n    } else {\n      this.router.navigate(['../../', 'region', key], { relativeTo: this.activatedRoute, replaceUrl: true })\n    }\n  }\n  returnToMain(): void {\n    this.router.navigate(['../../../../'], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n  returnToParent(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n  percentAllocation: number | string = 0\n  percentProgram: number | string = 0\n  partNumber: number = 0\n  programNumber: number = 0\n  rows = []\n  regions\n  products\n  totalProgram: number = 0\n  totalAllocation: number = 0\n  subtotalProgram: number = 0\n  subtotalAllocation: number = 0\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'toNumber'\n})\nexport class NumberPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  transform(value: number, sign: boolean = false, comma: boolean = true): string {\n    return ToNumberFn(value, sign, comma, this.language);\n  }\n\n}\n\nexport function ToNumberFn(value: number, sign: boolean = false, comma: boolean = true, language: string = 'en') {\n  if (isNaN(value)) {\n    return '-';\n  }\n  value = Math.round(value);\n  let ultimate: string\n  if (value == 0) return '0'\n  if (value > 0) {\n    if (sign) {\n      ultimate = '+ ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  } else {\n    if (sign) {\n      ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  }\n  if (comma) {\n    return ultimate;\n  } else {\n    return ultimate.replace(/[,.]/g, '');\n  }\n}\n"]}