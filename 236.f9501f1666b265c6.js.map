{"version":3,"file":"236.f9501f1666b265c6.js","mappings":"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","names":["ReportResourcesModule","CommonModule","RouterModule","SharedModule","NgxChartsModule","NgxsModule","OrderBacklogState","OrderIntakeHistoryState","ReportWrapperComponent","constructor","data","_store","_router","this","lastTap","lastTap2","ngOnInit","snapshot","title","dispatch","OrderIntakeHistory","OrderBacklog","getLevel","currentLevel","outlet","activatedRouteData","level","i0","selectors","swipeAnimation","OrderIntakeHistoryRouter","goToMainView","navigate","goToPlantZoneView","route","plantType","plantValue","params","plant","id","goToMonthView","month","goToProductRegionView","itemType","itemValue","type","value","factory","valueChanged","total","localStorage","setItem","toString","TotalSelectorComponent","ctx","__decorate","Select","Observable","w","DistinctMonthsPipe","_ac","rows","DistinctMonthsFn","report","pure","columnName","incomingDateFormat","IntakeHistoryColumns","BacklogColumns","reduce","r","a","moment","format","push","FilterYearPipe","methodRanges","ranges$","select","transform","year","pipe","map","ranges","FilterYearFn","cutUntil","filter","row","actual","includes","substr","previous","ValueSignPipe","FormatLatestDayPipe","date","extra","incomingFormat","outputFormat","subtract","ReportHeaderComponent","_data","methodDays","dateColumn","incommingDateFormat","totalOrAverageSign","currentMonth","days$","subscribe","res","params$","paramMap","keys","get","currentMonthDate$","switchMap","CustomSelectors","shareReplay","bufferSize","refCount","themeClass","LetDirective","vcRef","templateRef","ngLet","_ref","createView","context","$implicit","clear","createEmbeddedView","FilterDayPipe","activatedRoute","method","latestAndPreviousDay$","day","days","FilterDayFn","latestDay","previousDay","SumQuantityPipe","values","SumQuantityFn","showTotal","getItem","length","sumByProperty","NaN","HighestZoneTotalPipe","zones","highest","forEach","zone","totalCurrent","totalPrevious","StartWithPipe","originalValue","initialValue","of","delay","startWith","PercentPipe","part","toFixed","language","groupOrPlantNameFn","ctx_r17","oxw","GroupOrPlantNamePipe","SelectSnapshot","ConfigState","ReportGraphicComponent","router","goZone","ZoneID","relativeTo","replaceUrl","trigger","transition","query","style","opacity","optional","stagger","animate","changeDetection","before","after","isNaN","ToNumberFn","Math","abs","DifferencePipe","PlantsByZonePipe","classifyByProperty","ctx_r11","zone_r4","ctx_r28","plant_r21","ctx_r30","zone_r13","config","_obRouter","ref","setTitle","appTitle","trackfn","index","item","key","OrderIntakeHistoryMainComponent","$event","Ot","J","ViewSelectSnapshot","ReportGraphicComparisonComponent","_config","BehaviorSubject","locale","xAxisTickFormatting","bind","colorScheme$","lightTheme","valueChanges","domain","ngOnChanges","changes","currentRows","current","currentValue","previousRows","dateRanges","selectSnapshot","currentMonthsRange","sort","previousMonthsRange","currentMonths","substring","previousMonths","chart","name","series","i","currentMonthIndex","toDate","original","previousMonthIndex","originalItem","err","chart$","next","FormControl","plantControl","setValue","distinctUntilChanged","split","withLatestFrom","selected","hasOwnProperty","PlantSelectorComponent","DistinctYearsPipe","Object","entries","years","reverse","ReversePipe","array","MonthFormatPipe","PreviousMonthPipe","previousYearMonths","find","mo","console","log","ctx_r23","month_r15","ctx_r27","_title","_breakpoints","mobile$","observe","Breakpoints","result","matches","rows$","OrderIntakeHistorySubLvl2Component","MonthSelectorComponent","monthControl","ProductRegionChartComponent","maximum","highestValue","max","maxWidth$","calculatePercent","actualPercent","previousPercent","reportInterface","compareItems","column","uniques","DistinctItemsPipe","MaxPipe","currentValues","previousValues","highestCurrent","highestPrevious","numbers","num","DefaultPipe","def","ctx_r40","region_r26","ctx_r63","product_r51","ctx_r68","ctx_r70","plantOrZoneRows$","OrderIntakeHistorySubLvl3Component","ProductRegionLabelFormatPipe","mobile","JoinArraysPipe","arrays","arguments","flat","ProductRegionSelectorComponent","regionProductControl","MockMissingPreviousRowsPipe","ctx_r25","ctx_r56","ctx_r65","monthRows$","previousMonthRows$","GetPreviousMonth","previousRows$","goItem","OrderIntakeHistorySubLvl4Component","routes","path","component","children","OrderIntakeHistoryModule","imports","LayoutModule"],"sourceRoot":"webpack:///","sources":["./src/app/modules/report-resources/report-resources.module.ts","./src/app/modules/report-resources/components/wrapper/wrapper.component.ts","./src/app/modules/report-resources/components/wrapper/wrapper.component.html","./src/app/modules/order-intake-history/services/order-intake-history-router.service.ts","./src/app/modules/order-intake-history/components/selectors/total-selector/total-selector.component.ts","./src/app/modules/order-intake-history/components/selectors/total-selector/total-selector.component.html","./src/app/modules/report-resources/pipes/distinct-months.pipe.ts","./src/app/modules/report-resources/pipes/filter-year.pipe.ts","./src/app/modules/report-resources/pipes/value-sign.pipe.ts","./src/app/modules/report-resources/pipes/format-latest-day.pipe.ts","./src/app/modules/report-resources/components/report-header/report-header.component.html","./src/app/modules/report-resources/components/report-header/report-header.component.ts","./src/app/modules/report-resources/directives/ng-let.directive.ts","./src/app/modules/report-resources/pipes/filter-day.pipe.ts","./src/app/modules/report-resources/pipes/sum-quantity.pipe.ts","./src/app/modules/report-resources/pipes/highest-zone-total.pipe.ts","./src/app/modules/report-resources/pipes/start-with.pipe.ts","./src/app/modules/report-resources/pipes/percent.pipe.ts","./src/app/modules/report-resources/pipes/group-or-plant-name.pipe.ts","./src/app/modules/report-resources/components/graphic/graphic.component.html","./src/app/modules/report-resources/components/graphic/graphic.component.ts","./src/app/modules/report-resources/pipes/difference.pipe.ts","./src/app/modules/report-resources/pipes/plants-by-zone.pipe.ts","./src/app/modules/order-intake-history/components/order-intake-history-main/order-intake-history-main.component.html","./src/app/modules/order-intake-history/components/order-intake-history-main/order-intake-history-main.component.ts","./src/app/modules/report-resources/components/graphic-comparison/graphic-comparison.component.ts","./src/app/modules/report-resources/components/graphic-comparison/graphic-comparison.component.html","./src/app/modules/order-intake-history/components/selectors/plant-selector/plant-selector.component.html","./src/app/modules/order-intake-history/components/selectors/plant-selector/plant-selector.component.ts","./src/app/modules/report-resources/pipes/distinct-years.pipe.ts","./src/app/modules/report-resources/pipes/reverse.pipe.ts","./src/app/modules/report-resources/pipes/month-format.pipe.ts","./src/app/modules/report-resources/pipes/previous-month.pipe.ts","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl2/order-intake-history-sub-lvl2.component.html","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl2/order-intake-history-sub-lvl2.component.ts","./src/app/modules/order-intake-history/components/selectors/month-selector/month-selector.component.html","./src/app/modules/order-intake-history/components/selectors/month-selector/month-selector.component.ts","./src/app/modules/report-resources/components/product-region-chart/product-region-chart.component.ts","./src/app/modules/report-resources/components/product-region-chart/product-region-chart.component.html","./src/app/modules/report-resources/pipes/distinct-items.pipe.ts","./src/app/modules/report-resources/pipes/max.pipe.ts","./src/app/modules/report-resources/pipes/default.pipe.ts","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl3/order-intake-history-sub-lvl3.component.html","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl3/order-intake-history-sub-lvl3.component.ts","./src/app/modules/report-resources/pipes/product-region-label-format.pipe.ts","./src/app/modules/report-resources/pipes/join-arrays.pipe.ts","./src/app/modules/order-intake-history/components/selectors/product-region-selector/product-region-selector.component.html","./src/app/modules/order-intake-history/components/selectors/product-region-selector/product-region-selector.component.ts","./src/app/modules/report-resources/pipes/mock-missing-previous-rows.pipe.ts","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl4/order-intake-history-sub-lvl4.component.html","./src/app/modules/order-intake-history/components/order-intake-history-sub-lvl4/order-intake-history-sub-lvl4.component.ts","./src/app/modules/order-intake-history/order-intake-history.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReportWrapperComponent } from './components/wrapper/wrapper.component';\nimport { RouterModule } from '@angular/router';\nimport { LetDirective } from './directives/ng-let.directive';\nimport { HighestZoneTotalPipe } from './pipes/highest-zone-total.pipe';\nimport { SumQuantityPipe } from './pipes/sum-quantity.pipe';\nimport { FilterDayPipe } from './pipes/filter-day.pipe';\nimport { ReportGraphicComponent } from './components/graphic/graphic.component';\nimport { GroupOrPlantNamePipe } from './pipes/group-or-plant-name.pipe';\nimport { StartWithPipe } from './pipes/start-with.pipe';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { PercentPipe } from './pipes/percent.pipe';\nimport { FormatLatestDayPipe } from './pipes/format-latest-day.pipe';\nimport { ReportHeaderComponent } from './components/report-header/report-header.component';\nimport { PlantsByZonePipe } from './pipes/plants-by-zone.pipe';\nimport { DifferencePipe } from './pipes/difference.pipe';\nimport { FilterYearPipe } from './pipes/filter-year.pipe';\nimport { DistinctMonthsPipe } from './pipes/distinct-months.pipe';\nimport { DistinctYearsPipe } from './pipes/distinct-years.pipe';\nimport { ReportGraphicComparisonComponent } from './components/graphic-comparison/graphic-comparison.component';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { ReversePipe } from './pipes/reverse.pipe';\nimport { MonthFormatPipe } from './pipes/month-format.pipe';\nimport { PreviousMonthPipe } from './pipes/previous-month.pipe';\nimport { ProductRegionLabelFormatPipe } from './pipes/product-region-label-format.pipe';\nimport { JoinArraysPipe } from './pipes/join-arrays.pipe';\nimport { DistinctItemsPipe } from './pipes/distinct-items.pipe';\nimport { ProductRegionChartComponent } from './components/product-region-chart/product-region-chart.component';\nimport { MaxPipe } from './pipes/max.pipe';\nimport { DefaultPipe } from './pipes/default.pipe';\nimport { AbsPipe } from './pipes/abs.pipe';\nimport { MockMissingPreviousRowsPipe } from './pipes/mock-missing-previous-rows.pipe';\nimport { LogPipe } from './pipes/log.pipe';\nimport { ValueSignPipe } from './pipes/value-sign.pipe';\nimport { NgxsModule } from '@ngxs/store';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\n\n@NgModule({\n  declarations: [\n    // Components\n    ReportWrapperComponent,\n    ReportGraphicComponent,\n    ReportGraphicComparisonComponent,\n    ReportHeaderComponent,\n    ProductRegionChartComponent,\n    // Directives\n    LetDirective,\n    // Pipes\n    HighestZoneTotalPipe,\n    SumQuantityPipe,\n    FilterDayPipe,\n    GroupOrPlantNamePipe,\n    StartWithPipe,\n    PercentPipe,\n    FormatLatestDayPipe,\n    PlantsByZonePipe,\n    DifferencePipe,\n    FilterYearPipe,\n    DistinctMonthsPipe,\n    DistinctYearsPipe,\n    ReversePipe,\n    MonthFormatPipe,\n    PreviousMonthPipe,\n    ProductRegionLabelFormatPipe,\n    JoinArraysPipe,\n    DistinctItemsPipe,\n    MaxPipe,\n    DefaultPipe,\n    AbsPipe,\n    MockMissingPreviousRowsPipe,\n    LogPipe,\n    ValueSignPipe\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    SharedModule,\n    NgxChartsModule,\n    NgxsModule.forFeature([\n      OrderBacklogState,\n      OrderIntakeHistoryState\n    ])\n  ],\n  exports: [\n    // Components\n    ReportGraphicComponent,\n    ReportGraphicComparisonComponent,\n    ReportHeaderComponent,\n    ProductRegionChartComponent,\n    // Directives\n    LetDirective,\n    // Pipes\n    FilterDayPipe,\n    SumQuantityPipe,\n    GroupOrPlantNamePipe,\n    StartWithPipe,\n    PercentPipe,\n    FormatLatestDayPipe,\n    PlantsByZonePipe,\n    DifferencePipe,\n    FilterYearPipe,\n    DistinctMonthsPipe,\n    DistinctYearsPipe,\n    ReversePipe,\n    MonthFormatPipe,\n    PreviousMonthPipe,\n    ProductRegionLabelFormatPipe,\n    JoinArraysPipe,\n    DistinctItemsPipe,\n    MaxPipe,\n    DefaultPipe,\n    AbsPipe,\n    MockMissingPreviousRowsPipe,\n    LogPipe\n  ]\n})\nexport class ReportResourcesModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, RouterOutlet } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { DataService } from '@services/data.service';\nimport { OrderBacklog } from '@store/order-backlog.state';\nimport { OrderIntakeHistory } from '@store/order-intake-history.state';\nimport { swipeAnimation } from 'app/app.transitions';\n\n@Component({\n  selector: 'order-backlog-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n  animations: [swipeAnimation],\n  host: {\n    '[@routerTransition]': 'getLevel()'\n  }\n})\nexport class ReportWrapperComponent implements OnInit {\n\n  @ViewChild('o', { static: true }) outlet: RouterOutlet;\n\n  constructor(\n    private data: DataService,\n    private _store: Store,\n    private _router: ActivatedRoute\n  ) {\n    data.lastTap = null;\n    data.lastTap2 = null;\n  }\n\n  ngOnInit() {\n    let report = this._router.snapshot.data.title;\n    switch(report){\n      case 'order_intake_history':\n        // Get Order Intake History Data\n        this._store.dispatch( new OrderIntakeHistory.Get() );\n        break;\n      case 'order_backlog':\n      // Get Order Backlog Data\n      this._store.dispatch( new OrderBacklog.Get() );\n      break;\n      default:\n      // Get Order Intake History Data\n      this._store.dispatch( new OrderIntakeHistory.Get() );\n      break;\n        \n    }\n  }\n\n  getLevel() {\n    this.data.currentLevel = +this.outlet.activatedRouteData['level'];\n    return this.outlet.activatedRouteData['level'];\n  }\n\n}\n","<router-outlet #o=\"outlet\"></router-outlet>","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PlantOrZone, RegionOrProduct } from '@other/interfaces';\n\n/**\n * Route Handler Actions for Order Intake History\n * If no params are passed to those functions, will try to use those from the current URL\n */\n@Injectable()\nexport class OrderIntakeHistoryRouter {\n\n    constructor(\n        private _router: Router\n    ) { }\n\n    goToMainView() {\n        this._router.navigate(['/ecommerce evolution']);\n    }\n\n    goToPlantZoneView(route: ActivatedRoute, plantType?: PlantOrZone, plantValue?: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        this._router.navigate([\n            '/ecommerce evolution',\n            plantType,\n            plantValue\n        ]);\n    }\n\n    goToMonthView(route: ActivatedRoute, plantType?: PlantOrZone, plantValue?: string, month?: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        month = month || route.snapshot.params.month;\n        this._router.navigate([\n            '/ecommerce evolution',\n            plantType,\n            plantValue,\n            'month',\n            month\n        ]);\n    }\n\n    // tslint:disable-next-line: max-line-length\n    goToProductRegionView(route: ActivatedRoute, plantType: PlantOrZone, plantValue: string, month: string, itemType: RegionOrProduct, itemValue: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        month = month || route.snapshot.params.month;\n        itemType = itemType || route.snapshot.params.type;\n        itemValue = itemValue || route.snapshot.params.value;\n        this._router.navigate([\n            '/ecommerce evolution',\n            plantType,\n            plantValue,\n            'month',\n            month,\n            itemType,\n            itemValue\n        ]);\n    }\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { OrderIntakeHistory, OrderIntakeHistoryState } from '@store/order-intake-history.state';\n\n@Component({\n  selector: 'dip-total-selector',\n  templateUrl: './total-selector.component.html',\n  styleUrls: ['./total-selector.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TotalSelectorComponent {\n\n  @Select(OrderIntakeHistoryState.GetShowTotal) showTotal$: Observable<boolean>;\n\n  constructor(\n    private _store: Store\n  ) { }\n\n  valueChanged(value: string) {\n    let total = value == \"total\";\n    this._store.dispatch(new OrderIntakeHistory.SetShowTotal(total))\n    localStorage.setItem('intake_history_show_total', total.toString());\n  }\n\n}\n","<mat-button-toggle-group appearance=\"legacy\" #group=\"matButtonToggleGroup\" [value]=\"(showTotal$ | async) ? 'total' : 'avg'\" (change)=\"valueChanged(group.value)\">\n  <mat-button-toggle value=\"avg\">{{ 'total_selector.avg_view' | translate }}</mat-button-toggle>\n  <mat-button-toggle value=\"total\">{{ 'total_selector.total_view' | translate }}</mat-button-toggle>\n</mat-button-toggle-group>","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BacklogColumns, IntakeHistoryColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'distinctMonths'\n})\nexport class DistinctMonthsPipe implements PipeTransform {\n\n  report: string;\n\n  constructor(private _ac: ActivatedRoute) {\n    this.report = this._ac.snapshot.data.title;\n  }\n\n  // Retrieve rows classified by month in descending order (current is first)\n  transform = (rows: any[]) => DistinctMonthsFn(rows, this.report);\n\n}\n\nexport function DistinctMonthsFn(rows: any[], report: string = null) {\n  // save the format of incomming date and column based on the report\n  let incomingDateFormat = 'YYYY-MM-DD'\n  let columnName;\n  switch(report) {\n    case 'order_intake_history':\n      incomingDateFormat = 'YYYYMM';\n      columnName = IntakeHistoryColumns.Date;\n      break;\n    case 'order_backlog':\n    default:\n      incomingDateFormat = 'YYYY-MM-DD';\n      columnName = BacklogColumns.Date;\n      break;\n  }\n\n  return rows.reduce((r, a) => {\n    const month = moment(a[columnName], incomingDateFormat).format('YYYY-MM');\n    r[month] = r[month] || [];\n    r[month].push(a);\n    return r;\n  }, {});\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { IntakeHistoryColumns, DateRanges, BacklogColumns } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'filterYear'\n})\nexport class FilterYearPipe implements PipeTransform {\n\n  ranges$: Observable<DateRanges>;\n  report: string;\n\n  constructor(\n    private _ac: ActivatedRoute,\n    private _store: Store\n  ) {\n    // get report name from route\n    this.report = this._ac.snapshot.data.title;\n\n    // get the method name to get the date ranges depending on report\n    let methodRanges: any;\n    switch(this.report) {\n      case 'order_intake_history':\n        methodRanges = OrderIntakeHistoryState.GetDateRanges\n        break;\n      case 'order_backlog':\n      default:\n        methodRanges = OrderBacklogState.GetDateRanges\n        break;\n    }\n    // Retrieves ranges from Store State\n    this.ranges$ = this._store.select(methodRanges);\n  }\n\n  // Filter zone rows depending on year\n  transform(rows: any[], year: 'current' | 'previous'): Observable<any[]> {\n    return this.ranges$.pipe(\n      map(ranges => FilterYearFn(rows, year, ranges, this.report))\n    )\n  }\n\n}\n\n// CurrentYear: Should be the first 12 months available from now to past\n// PreviousYear: Should be the next 12 months available from 12 months ago\n// For example: dates = Array(24)\n//              Current: dates.slice(0, 12)\n//              Previous: dates.slice()\nexport function FilterYearFn(rows: any[], year: 'current' | 'previous', ranges: DateRanges, report: string = null) {\n  // get the column name to use depending on the report\n  let columnName = '';\n  // get where to cut the date\n  let cutUntil = 0;\n  switch(report) {\n    case 'order_intake_history':\n      columnName = IntakeHistoryColumns.Date\n      cutUntil = 6;\n      break;\n    case 'order_backlog':\n    default:\n      columnName = BacklogColumns.Date\n      cutUntil = 7;\n      break;\n  }\n  if (year === 'current') {\n    return rows.filter(row => ranges.actual.includes(row[columnName].toString().substr(0, cutUntil)));\n  } else {\n    return rows.filter(row => ranges.previous.includes(row[columnName].toString().substr(0, cutUntil)));\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Pipe({\n  name: 'valueSign'\n})\nexport class ValueSignPipe implements PipeTransform {\n  report: string;\n  constructor(private _ac: ActivatedRoute) {\n    this.report = this._ac.snapshot.data.title;\n  }\n\n  transform(value: any): string {\n    if (this.report != 'order_intake_history' ) return '';\n    return value ? 'Σ' : 'Ø';\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'formatLatestDay'\n})\nexport class FormatLatestDayPipe implements PipeTransform {\n\n  constructor(private _ac: ActivatedRoute) {}\n\n  transform(date: string, extra: string = null): string {\n    const report = this._ac.snapshot.data.title;\n    let incomingFormat = ''\n    let outputFormat = ''\n    switch(report) {\n      case 'order_intake_history':\n        incomingFormat = 'YYYYMM'\n        outputFormat = 'MM/YYYY'\n        if (extra == 'today') return moment().subtract(1, 'days').format('DD/MM/YYYY')\n        break;\n      case 'order_backlog':\n      default:\n        incomingFormat = 'YYYY-MM-DD'\n        outputFormat = 'DD/MM/YYYY'\n        if (extra == 'monthOnly') outputFormat = 'MM/YYYY';\n        break;\n    }\n    return moment(date, incomingFormat).format(outputFormat);\n  }\n\n}\n","<div class=\"empty\"></div>\n<ng-container [ngSwitch]=\"level\">\n    <!-- Level 1 Headers -->\n    <ng-container *ngSwitchCase=\"1\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} {{ ( days$ | async ).latestDay | formatLatestDay }}</div>\n                <div class=\"lower\"></div>\n            </div>\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} {{ ( days$ | async ).latestDay | formatLatestDay }}</div>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} Prev. Year</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 2 Headers -->\n    <ng-container *ngSwitchCase=\"2\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} Last</div>\n                <div class=\"lower\">12 Month</div>\n            </div>\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} Last 12 month</div>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} Prev. Year</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 3 Headers -->\n    <ng-container *ngSwitchCase=\"3\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <ng-container *ngIf=\"(currentMonthDate$ | async) === currentMonth; then today else last12MonthMobile\"></ng-container>\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <ng-container *ngIf=\"(currentMonthDate$ | async) == currentMonth; then today else last12MonthDesktop\"></ng-container>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} Prev. Year</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 4 Headers -->\n    <ng-container *ngSwitchCase=\"4\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <ng-container *ngIf=\"(currentMonthDate$ | async) === currentMonth; then today else last12MonthMobile\"></ng-container>\n            <div class=\"report-date\">\n                <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <ng-container *ngIf=\"(currentMonthDate$ | async) == currentMonth; then today else last12MonthDesktop\"></ng-container>\n            <div class=\"report-date\">{{totalOrAverageSign | async | valueSign}} Prev. Year</div>\n        </ng-template>\n    </ng-container>\n</ng-container>\n<ng-template #today>\n    <div class=\"report-date\">\n        <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} {{ currentMonthDate$ | async | formatLatestDay:'today' }}</div>\n    </div>\n</ng-template>\n<ng-template #last12MonthMobile>\n    <div class=\"report-date\">\n        <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} {{ currentMonthDate$ | async | formatLatestDay:'monthOnly' }}</div>\n    </div>\n</ng-template>\n<ng-template #last12MonthDesktop>\n    <div class=\"report-date\">\n        <div class=\"upper\">{{totalOrAverageSign | async | valueSign}} {{ currentMonthDate$ | async | formatLatestDay:'monthOnly' }}</div>\n    </div>\n</ng-template>\n<div class=\"glyph\">&Delta;</div>","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DistinctMonthsFn } from '@modules/report-resources/pipes/distinct-months.pipe';\nimport { FilterYearFn } from '@modules/report-resources/pipes/filter-year.pipe';\nimport { Select, Store } from '@ngxs/store';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { IntakeHistoryColumns, DateRanges, OrderBacklogDays, BacklogColumns } from '@other/interfaces';\nimport { DataService } from '@services/data.service';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport * as moment from 'moment';\nimport { Observable } from 'rxjs';\nimport { filter, map, shareReplay, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'report-header',\n  templateUrl: './report-header.component.html',\n  styleUrls: ['./report-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ReportHeaderComponent {\n  ranges !: DateRanges;\n  days$ !: OrderBacklogDays;\n\n  currentMonthDate$: Observable<string>;\n\n  level: number;\n  totalOrAverageSign: Observable<boolean>;\n  currentMonth: string;\n\n  @HostBinding('class') get themeClass() {\n    return `level${this.level}`;\n  };\n\n  params$: Observable<any>;\n\n  constructor(\n    public _data: DataService,\n    private _ac: ActivatedRoute,\n    private _store: Store\n  ) {\n    this.level = this._ac.snapshot.data.level;\n    const report = this._ac.snapshot.data.title;\n\n    // update days and ranges variables depending on the report title\n    let methodDays: any;\n    let methodRanges: any;\n    let dateColumn: string;\n    let incommingDateFormat = 'YYYY-MM';\n\n    switch(report) {\n      case 'order_intake_history':\n        methodDays = OrderIntakeHistoryState.GetLatestAndPreviousDay\n        methodRanges = OrderIntakeHistoryState.GetDateRanges\n        dateColumn = IntakeHistoryColumns.Date\n        incommingDateFormat = 'YYYYMM';\n        this.totalOrAverageSign = this._store.select(OrderIntakeHistoryState.GetShowTotal);\n        break;\n      case 'order_backlog':\n      default:\n        methodDays = OrderBacklogState.GetLatestAndPreviousDay\n        methodRanges = OrderBacklogState.GetDateRanges\n        dateColumn = BacklogColumns.Date\n        break;\n    }\n\n    this.currentMonth = moment().format(incommingDateFormat);\n\n    // get days\n    // @ts-ignore\n    // ignoring lint errors since we are not assigning the data to ranges variable\n    // instead we are assigning the observable to the ranges \n    this.days$ = this._store.select(methodDays)\n\n    // get ranges\n    this._store.select(methodRanges).subscribe(res => {\n      // @ts-ignore\n      this.ranges = res;\n    })\n\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.currentMonthDate$ = this.params$.pipe(\n      switchMap(params => this._store.select<any[]>(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id, report)).pipe(\n        filter(rows => !!rows),\n        map(rows => ([params, rows]))\n      )),\n      map(([params, rows]) => {\n        rows = FilterYearFn(rows, 'current', this.ranges, report);\n        rows = DistinctMonthsFn(rows, report);\n        rows = rows[params.month];\n        return rows[0][dateColumn];\n      }),\n      shareReplay({bufferSize: 1, refCount: true})\n    );\n  }\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, EmbeddedViewRef } from '@angular/core';\n\n/**\n * Custom Directive to dynamicly assign calculated value to a static value context\n * @url https://stackblitz.com/edit/directive-collection-with-examples?file=src%2Fapp%2Fng-let.directive.ts\n */\n@Directive({\n    selector: '[ngLet]'\n})\nexport class LetDirective {\n    _ref: EmbeddedViewRef<any>;\n    context: any = {};\n\n    @Input()\n    set ngLet(value: any) {\n      // if embeadded view doesn't exist yet create it (only once)\n      if (!this._ref) {\n          this.createView();\n      }\n      // if value is empty destroy the component\n      // here it's acctualy works like ngIf (will rerender on non-empty value)\n      /* if (!value) {\n        this._ref.destroy();\n        this._ref = undefined;\n        return;\n      } */\n      // add the value to the context\n      this._ref.context.$implicit = this.context.ngLet = value;\n    }\n\n    constructor(\n      private readonly vcRef: ViewContainerRef,\n      private readonly templateRef: TemplateRef<any>\n    ) {}\n\n    createView(): void {\n      this.vcRef.clear();\n      this._ref = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { BacklogColumns, IntakeHistoryColumns, OrderBacklogDays } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'filterDay'\n})\nexport class FilterDayPipe implements PipeTransform {\n\n  latestAndPreviousDay$: Observable<OrderBacklogDays>;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private _store: Store\n  ) {\n    // get the report that user is viewing currently\n    const report = this.activatedRoute.snapshot.data.title;\n    let method;\n    switch (report) {\n      case 'order_intake_history':\n        method = OrderIntakeHistoryState.GetLatestAndPreviousDay\n        break;\n      case 'order_backlog':\n      default:\n        method = OrderBacklogState.GetLatestAndPreviousDay\n        break;\n    }\n    // Retrieves days from Store State\n    this.latestAndPreviousDay$ = this._store.select(method);\n  }\n\n  transform(rows: any[], day: 'current' | 'previous'): Observable<any[]> {\n    const filteredDay = this.latestAndPreviousDay$.pipe(\n      map(days => FilterDayFn(rows, day, days, this.activatedRoute.snapshot.data.title))\n    )\n    return filteredDay;\n  }\n\n}\n\nexport function FilterDayFn(rows: any[], day: 'current' | 'previous', days: OrderBacklogDays, report: string = null) {\n\n  let columnName: string;\n  // get the Date column name for report based on report value\n  switch(report) {\n    case 'order_intake_history':\n      columnName = IntakeHistoryColumns.Date;\n      break;\n    case 'order_backlog':\n    default:\n      columnName = BacklogColumns.Date;\n      break;\n  }\n\n  if (day === 'current') {\n    return rows.filter(row => row[columnName] === days.latestDay);\n  } else {\n    return rows.filter(row => row[columnName] === days.previousDay);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { sumByProperty } from '@other/functions';\nimport { BacklogColumns, IntakeHistoryColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'sumQuantity'\n})\nexport class SumQuantityPipe implements PipeTransform {\n  report: string;\n\n  constructor(\n    private activatedRoute: ActivatedRoute\n  ) {\n    // get the report that user is viewing currently\n    this.report = this.activatedRoute.snapshot.data.title;\n  }\n\n  transform = (values: any[]) => SumQuantityFn(values, this.report);\n\n}\n\nexport function SumQuantityFn(values: any[], report: string = null) {\n  let columnName: string;\n  // get the Date column name for report based on report value\n  switch(report) {\n    case 'order_intake_history':\n      let showTotal = localStorage.getItem('intake_history_show_total') == 'true'\n      columnName = showTotal ? IntakeHistoryColumns.Total : IntakeHistoryColumns.Average;\n      break;\n    case 'order_backlog':\n    default:\n      columnName = BacklogColumns.Quantity;\n      break;\n  }\n\n  if (!values || values.length === 0) {\n    return NaN;\n  }\n  return sumByProperty(values, columnName);\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { OrderBacklogDays } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FilterDayFn } from './filter-day.pipe';\nimport { SumQuantityFn } from './sum-quantity.pipe';\n\n@Pipe({\n  name: 'highestZoneTotal'\n})\nexport class HighestZoneTotalPipe implements PipeTransform {\n  \n  days$: Observable<OrderBacklogDays>;\n  report: string;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private _store: Store\n  ) {\n    // get the report that user is viewing currently\n    this.report = this.activatedRoute.snapshot.data.title;\n    let method: any;\n\n    switch(this.report) {\n      case 'order_intake_history':\n        method = OrderIntakeHistoryState.GetLatestAndPreviousDay\n        break;\n      case 'order_backlog':\n      default:\n        method = OrderBacklogState.GetLatestAndPreviousDay\n        break;\n    }\n    // Retrieves days from Store State\n    this.days$ = this._store.select(method);\n  }\n\n  transform(zones: KeyValue<string, any[]>[]): Observable<number> {\n    return this.days$.pipe(\n      map(days => {\n        // Calculate highest current and previous year total of all zones\n        // This value is used in graphic to know the bar height %\n        // The maximum value should be the highest total (current/previous) of all given zones\n        let highest = 0;\n        zones.forEach(zone => {\n          const totalCurrent = SumQuantityFn( FilterDayFn( zone.value, 'current', days, this.report ), this.report );\n          const totalPrevious = SumQuantityFn( FilterDayFn( zone.value, 'previous', days, this.report ), this.report );\n          if (totalCurrent > highest) {\n            highest = totalCurrent;\n          }\n          if (totalPrevious > highest) {\n            highest = totalPrevious;\n          }\n        });\n        return highest;\n      })\n    )\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, startWith } from 'rxjs/operators';\n\n@Pipe({\n  name: 'startWith'\n})\nexport class StartWithPipe implements PipeTransform {\n\n  transform(originalValue: any, initialValue: any): Observable<any> {\n    return of(originalValue).pipe(\n      delay(0),\n      startWith(initialValue)\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'percent'\n})\nexport class PercentPipe implements PipeTransform {\n\n  transform(part: number, total: number): number {\n    return + ( ( part / total ) * 100).toFixed(0);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'groupOrPlantName'\n})\nexport class GroupOrPlantNamePipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguageHuman) language: ILanguage;\n\n  // Get plant group name\n  transform(values: any[], type: 'plant' | 'group' | 'zone'): string {\n    return groupOrPlantNameFn(values, type, this.language);\n  }\n\n}\n\nexport function groupOrPlantNameFn(values: any[], type: 'plant' | 'group' | 'zone', language): string {\n  return values[0][['group', 'zone'].includes(type) ? BacklogColumns[`PlantGroup${language}`] : BacklogColumns[`Plant${language}`]];\n}\n","<div class=\"wrapper\" [@list]=\"zones.length\">\n  <!-- Iterate over each zone -->\n  <ng-container *ngLet=\"zones | highestZoneTotal | async as highestZone\">\n    <div class=\"zone\" (click)=\"goZone(zone.key)\" *ngFor=\"let zone of zones\" [style.width.%]=\"100 / zones.length\">\n      <div class=\"bars\">\n        <div style=\"position: relative; height: 100%;\">\n          <ng-container *ngLet=\"zone.value | sumQuantity as zoneTotal\">\n            <!-- Current year bar -->\n            <div *ngLet=\"zone.value | filterDay:'current' | async | sumQuantity as quantity\" class=\"actual\" [style.height.%]=\"quantity | percent:highestZone | startWith:0 | async\">\n              <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ quantity | toNumber }}</div>\n            </div>\n            <!-- Previous year bar -->\n            <div *ngLet=\"zone.value | filterDay:'previous' | async | sumQuantity as quantity\" class=\"previous\" [style.height.%]=\"quantity | percent:highestZone | startWith:0 | async\">\n              <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ quantity | toNumber }}</div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Zone name -->\n      <div class=\"title\">{{ zone.value | groupOrPlantName:'group' }}</div>\n    </div>\n  </ng-container>\n</div>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { trigger, transition, query, stagger, style, animate } from '@angular/animations';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { KeyValue } from '@angular/common';\nimport { DataService } from '@services/data.service';\n\n@Component({\n  selector: 'report-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ]\n})\nexport class ReportGraphicComponent {\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    public _data: DataService\n  ) {}\n\n  @Input() zones: KeyValue<string, any[]>[];\n\n  // CLick handler for going to clicked zone\n  goZone(ZoneID): void {\n    this.router.navigate(['zone', ZoneID], { relativeTo: this.route, replaceUrl: true });\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ToNumberFn } from '@pipes/number.pipe';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'difference'\n})\nexport class DifferencePipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  // Get difference with symbol\n  transform(before: number, after: number): string {\n    if (isNaN(before)) {\n      before = 0;\n    }\n    if (isNaN(after)) {\n      after = 0;\n    }\n    const value = after - before;\n    if (value === 0) {\n      return '-';\n    } else if (value > 0) {\n      return `+ ${ToNumberFn(Math.abs(value), false, true, this.language)}`;\n    } else {\n      return `- ${ToNumberFn(Math.abs(value), false, true, this.language)}`;\n    }\n  }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { classifyByProperty } from '@other/functions';\nimport { BacklogColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'plantsByZone'\n})\nexport class PlantsByZonePipe implements PipeTransform {\n\n  // Get available plants inside zone\n  transform = (values: any[]) => classifyByProperty(values, BacklogColumns.SortKey_Plant);\n\n}\n","<!-- Quick Overview -->\n<ng-container *ngIf=\"zones$ | async | keyvalue as zones\">\n  <div class=\"report-header\">\n    <dip-total-selector></dip-total-selector>\n    <!-- Header Info -->\n    <report-header type=\"day\"></report-header>\n    <div class=\"overview\">\n      <div class=\"graphic\">\n        <!-- Graphic -->\n        <report-graphic [zones]=\"zones | startWith:[] | async\"></report-graphic>\n      </div>\n      <!-- Overview of plant groups -->\n      <div class=\"simple\">\n        <div (click)=\"_obRouter.goToPlantZoneView(_ac, 'zone', zone.key)\" class=\"overview-group\" *ngFor=\"let zone of zones\">\n          <div class=\"empty\">{{ zone.value | groupOrPlantName:'group' }}</div>\n          <!-- Map current value -->\n          <ng-container *ngLet=\"zone.value | filterDay:'current' | async | sumQuantity as currentValue\">\n            <!-- Map previous value -->\n            <ng-container *ngLet=\"zone.value | filterDay:'previous' | async | sumQuantity as previousValue\">\n              <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n              <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n              <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Zones Content -->\n  <div class=\"wrapper\" [@list]=\"zones.length\">\n    <!-- Iterate over each zone -->\n    <div class=\"zone\" *ngFor=\"let zone of zones; trackBy:trackfn\">\n      <div class=\"zone-header\" (click)=\"_obRouter.goToPlantZoneView(_ac, 'zone', zone.key)\">\n        <!-- FIXME: Dynamic language fields -->\n        <div class=\"title\">{{ zone.value | groupOrPlantName:'group' }}</div>\n        <!-- Map current value -->\n        <ng-container *ngLet=\"zone.value | filterDay:'current' | async | sumQuantity as currentValue\">\n          <!-- Map previous value -->\n          <ng-container *ngLet=\"zone.value | filterDay:'previous' | async | sumQuantity as previousValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n            <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n          </ng-container>\n        </ng-container>\n      </div>\n      <!-- Iterate over each plant inside zone -->\n      <div class=\"plant\" (click)=\"_obRouter.goToPlantZoneView(_ac, 'plant', plant.key)\" *ngFor=\"let plant of zone.value | plantsByZone | keyvalue\">\n        <div class=\"title\">{{ plant.value | groupOrPlantName:'plant' }}</div>\n        <!-- Map current value -->\n        <ng-container *ngLet=\"plant.value | filterDay:'current' | async | sumQuantity as currentValue\">\n          <!-- Map previous value -->\n          <ng-container *ngLet=\"plant.value | filterDay:'previous' | async | sumQuantity as previousValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n            <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</ng-container>","import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport { Title } from '@angular/platform-browser';\nimport { Zones } from '@other/interfaces';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { OrderIntakeHistoryRouter } from '../../services/order-intake-history-router.service';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs'\nimport { KeyValue } from '@angular/common';\n\n@Component({\n  selector: 'order-intake-history-main',\n  templateUrl: './order-intake-history-main.component.html',\n  styleUrls: ['./order-intake-history-main.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('list', [\n      transition('0 => *', [\n        query('.zone:enter', style({ opacity: 0 }), { optional: true }),\n        query('.zone:enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ],\n  host: {\n    '(swiperight)': '_data.goFrom(\"order_intake_history\", $event)',\n    '(swipeleft)': '_data.goFrom(\"order_intake_history\", $event)'\n  }\n})\nexport class OrderIntakeHistoryMainComponent {\n  @Select(OrderIntakeHistoryState.GetUniqueZones) zones$ !: Observable<Zones>;\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderIntakeHistoryState.GetPlanDate) plandate$ !: string;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    public _data: DataService,\n    private config: ConfigService,\n    private title: Title,\n    public _obRouter: OrderIntakeHistoryRouter,\n    private ref: ChangeDetectorRef\n  ) {\n    this.title.setTitle(this.config.config.appTitle + ' - Ecommerce evoluton');\n  }\n\n  trackfn(index, item: KeyValue<string, any[]>) {\n    return item.key;\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { BacklogColumns, IntakeHistoryColumns, NgxLineChart } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport * as moment from 'moment';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigService } from '@services/config.service';\nimport { DataService } from '@services/data.service';\nimport { map, startWith } from 'rxjs/operators';\nimport { SumQuantityFn } from '@modules/report-resources/pipes/sum-quantity.pipe';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\n\n@Component({\n  selector: 'report-graphic-comparison',\n  templateUrl: './graphic-comparison.component.html',\n  styleUrls: ['./graphic-comparison.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ReportGraphicComparisonComponent implements OnChanges {\n\n  chart$ = new BehaviorSubject<NgxLineChart>([]);\n\n  colorScheme$: Observable<any>;\n\n  @Input() current: any[];\n  @Input() previous: any[];\n\n  report: string;\n  method: any;\n  incommingDateFormat: string;\n  cutUntil: number;\n  columnName: any;\n\n  constructor(\n    private _store: Store,\n    private _config: ConfigService,\n    private _data: DataService,\n    private _ac: ActivatedRoute\n  ) {\n    // get the report, incomming date format depending\n    // on the report and method to get date ranges from store\n    this.report = this._ac.snapshot.data.title;\n    switch (this.report) {\n      case 'order_intake_history':\n        this.incommingDateFormat = 'YYYYMM';\n        this.cutUntil = 6;\n        this.method = OrderIntakeHistoryState.GetDateRanges;\n        this.columnName = IntakeHistoryColumns.Date;\n        break;\n      case 'order_backlog':\n      default:\n        this.incommingDateFormat = 'YYYY-MM';\n        this.cutUntil = 7;\n        this.method = OrderBacklogState.GetDateRanges;\n        this.columnName = BacklogColumns.Date;\n        break;\n    }\n\n    // Pipe the lightTheme FormControl for the correct chart colors\n    // startWith is needed because valueChanges doesn't emit until there's a change\n    this.colorScheme$ = this._data.lightTheme.valueChanges.pipe(\n      startWith(this._data.lightTheme.value),\n      map(lightTheme => {\n        const darkPalette = ['#28E8FF', '#F8B03B'];\n        const lightPalette = ['#17687F', '#E59123'];\n        return { domain: lightTheme ? lightPalette : darkPalette };\n      })\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Grab values from @Input()\n    const currentRows = changes.current.currentValue as any[];\n    const previousRows = changes.previous.currentValue as any[];\n    // Check the arrays are filled\n    if (currentRows.length > 0 && previousRows.length > 0) {\n      // Grab the date ranges for Actual and Previous from Store\n      const dateRanges = this._store.selectSnapshot(this.method);\n      // Get the months numbers we expect to show in chart\n      // @ts-ignore\n      const currentMonthsRange = [ ...dateRanges.actual ].sort();\n      // @ts-ignore\n      const previousMonthsRange = [ ...dateRanges.previous ].sort();\n      // Get the rows for every month number and for actual / previous\n      const currentMonths = currentRows.reduce((r, a) => {\n        const month = a[this.columnName].toString().substring(0, this.cutUntil);\n        r[month] = r[month] || [];\n        r[month].push(a);\n        return r;\n      }, {});\n      const previousMonths = previousRows.reduce((r, a) => {\n        const month = a[this.columnName].toString().substring(0, this.cutUntil);\n        r[month] = r[month] || [];\n        r[month].push(a);\n        return r;\n      }, {});\n      // Create basic scheme for chart\n      const chart: NgxLineChart = [\n        { name: 'Last 12 Month', series: [] },\n        { name: 'Prev. Year', series: [] }\n      ];\n      let i = 0;\n      const length = currentMonthsRange.length;\n      for ( ; i < length ; i++ ) {\n        // Push current value\n        const currentMonthIndex = currentMonthsRange[i];\n        // check if currentMonthIndex value is in currentMonths\n        if ( ! (currentMonthIndex in currentMonths) ) continue;\n        chart[0].series.push({\n          name: moment(currentMonths[currentMonthIndex][0][this.columnName], this.incommingDateFormat).toDate(),\n          value: SumQuantityFn(currentMonths[currentMonthIndex], this.report),\n          extra: {\n            original: moment(currentMonths[currentMonthIndex][0][this.columnName], this.incommingDateFormat).toDate()\n          }\n        });\n        // Push previous value\n        const previousMonthIndex = previousMonthsRange[i];\n        let originalItem = null;\n        try {\n          originalItem = moment(previousMonths[previousMonthIndex][0][this.columnName], this.incommingDateFormat).toDate();\n        } catch (err) { }\n        chart[1].series.push({\n          name: moment(currentMonths[currentMonthIndex][0][this.columnName], this.incommingDateFormat).toDate(),\n          value: previousMonths[previousMonthIndex] ? SumQuantityFn(previousMonths[previousMonthIndex], this.report) : 0,\n          extra: {\n            original: originalItem\n          }\n        });\n      }\n      this.chart$.next(chart);\n    }\n  }\n\n  xAxisTickFormatting = value => moment(value).locale(this._config.config.language).format('MMM');\n\n  xAxisTickFormattingFn = this.xAxisTickFormatting.bind(this);\n\n}\n","<ngx-charts-line-chart\n  [scheme]=\"colorScheme$ | async\"\n  [legend]=\"true\"\n  [showXAxisLabel]=\"false\"\n  [showYAxisLabel]=\"false\"\n  [xAxis]=\"true\"\n  [yAxis]=\"true\"\n  [timeline]=\"false\"\n  [xAxisTickFormatting]=\"xAxisTickFormattingFn\"\n  legendPosition=\"below\"\n  legendTitle=\"\"\n  [results]=\"chart$ | async\">\n</ngx-charts-line-chart>","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"plantControl\">\n    <ng-container *ngFor=\"let zone of zones$ | keyvalue\">\n      <ng-container *ngLet=\"zone.value | groupOrPlantName:'zone' as zoneName\">\n        <mat-option class=\"zone\" value=\"zone|{{zone.key}}\">{{ zoneName }}</mat-option>\n      </ng-container>\n      <ng-container class=\"plant\" *ngFor=\"let plant of zone.value | plantsByZone | keyvalue\">\n        <ng-container *ngLet=\"plant.value | groupOrPlantName:'plant' as plantName\">\n          <mat-option class=\"plant\" value=\"plant|{{plant.key}}\">{{ plantName }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ActivatedRoute } from '@angular/router';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { Zones } from '@other/interfaces';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\n\n@Component({\n  selector: 'dip-plant-selector',\n  templateUrl: './plant-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PlantSelectorComponent {\n\n  // Retrieve unique zones from Order Backlog State\n  @ViewSelectSnapshot(OrderIntakeHistoryState.GetUniqueZones) zones$ !: Zones;\n\n  // FormControl for current Plant / Zone\n  plantControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  constructor(\n    private _obRouter: OrderIntakeHistoryRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.plantControl.setValue( `${params.plant}|${params.id}` ));\n    // Subcribe to selector changes and grab latest params values\n    this.plantControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      map(value => ({ type: value.split('|')[0], value: value.split('|')[1] })),\n      withLatestFrom(this.params$)\n    ).subscribe(([selected, params]) => {\n      // Detect in which level we are\n      if (params.hasOwnProperty('type')) {\n        // We are in LVL 4\n        this._obRouter.goToProductRegionView(this._ac, selected.type, selected.value, null, null, null);\n      } else if (params.hasOwnProperty('month')) {\n        // We are in LVL 3\n        this._obRouter.goToMonthView(this._ac, selected.type, selected.value, null);\n      } else {\n        // We are in LVL 3\n        this._obRouter.goToPlantZoneView(this._ac, selected.type, selected.value);\n      }\n    });\n  }\n\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BacklogColumns, IntakeHistoryColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'distinctYears'\n})\nexport class DistinctYearsPipe implements PipeTransform {\n\n  report: string;\n\n  constructor(private _ac: ActivatedRoute) {\n\n    this.report = this._ac.snapshot.data.title;\n\n  }\n\n  // Retrieve rows classified by month in descending order (current is first)\n  transform(rows: KeyValue<string, any[]>[]): KeyValue<string, any[]>[] {\n\n    // get the column name and incomming date format based on the report\n    let incommingDateFormat;\n    let columnName;\n\n    switch (this.report) {\n      case 'order_intake_history':\n        columnName = IntakeHistoryColumns.Date;\n        incommingDateFormat = 'YYYYMM';\n        break;\n      case 'order_backlog':\n      default:\n        columnName = BacklogColumns.Date;\n        incommingDateFormat = 'YYYY-MM-DD';\n        break;\n    }\n\n    return Object.entries(rows.reduce((r, a) => {\n      const year = +moment(a[columnName], incommingDateFormat).year();\n      r[year] = r[year] || [];\n      r[year].push(a);\n      return r;\n    }, {}))\n    .map(years => ({\n      key: years[0],\n      value: years[1] as any[]\n    }))\n    .reverse();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n\n  transform(array: any[]): any[] {\n    return [ ...array ].reverse();\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'monthFormat'\n})\nexport class MonthFormatPipe implements PipeTransform {\n\n  constructor(\n    private _config: ConfigService\n  ) { }\n\n  transform(date: string): string {\n    return moment(date, ['YYYY-MM-DD', 'YYYY-MM']).locale(this._config.config.language).format('MMMM YYYY');\n  }\n\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BacklogColumns, IntakeHistoryColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'previousMonth'\n})\nexport class PreviousMonthPipe implements PipeTransform {\n  cutUntil: number;\n  columnName: BacklogColumns | IntakeHistoryColumns;\n\n  constructor(private _ac: ActivatedRoute) {\n    switch(this._ac.snapshot.data.title) {\n      case 'order_intake_history':\n        this.cutUntil = 6;\n        this.columnName = IntakeHistoryColumns.Date;\n        break;\n      case 'order_backlog':\n      default:\n        this.cutUntil = 7;\n        this.columnName = BacklogColumns.Date;\n        break;\n    }\n  }\n\n  transform(date: string, previousYearMonths: KeyValue<string, any[]>[]): any[] {\n    // First extract month\n    const month = moment(date, 'YYYY-MM-DD').subtract(1, 'years').format('YYYY-MM');\n    // Find matching month of previous date range and get corresponding values\n    try {\n      if (previousYearMonths[0].hasOwnProperty('key')) {\n        return previousYearMonths.find(mo => mo.key.substring(0, 7) === month).value;\n      } else {\n        return previousYearMonths.find(mo => mo[this.columnName].substring(0, this.cutUntil) === month).value;\n      }\n    } catch (err) {\n      console.log('Previous month not found for date ' + date);\n      return [];\n    }\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngIf=\"rows$ | async as rows\">\n    <!-- Bindings for actual and previous date ranges -->\n    <ng-container *ngLet=\"rows | filterYear:'current' | async as currentYearRows\">\n      <ng-container *ngLet=\"rows | filterYear:'previous' | async as previousYearRows\">\n        <dip-total-selector></dip-total-selector>\n        <!-- Graphic Comparison -->\n        <report-graphic-comparison [current]=\"currentYearRows\" [previous]=\"previousYearRows\"></report-graphic-comparison>\n        <!-- Overview -->\n        <div class=\"overview\">\n          <!-- Headers -->\n          <report-header></report-header>\n          <!-- Header Row of current select plant / zone -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to main view\"></i>\n            <div class=\"title with-selector\">\n              <dip-plant-selector></dip-plant-selector>\n            </div>\n          </div>\n          <!-- Content Rows -->\n          <ng-container *ngLet=\"rows | filterYear:'current' | async as currentYearRows\">\n            <ng-container *ngLet=\"rows | filterYear:'previous' | async | distinctMonths | keyvalue as previousYearMonths\">\n              <ng-container *ngFor=\"let year of currentYearRows | distinctYears\">\n                <!-- Year Row -->\n                <div class=\"title-header\">\n                  <div class=\"title\">{{ year.key }}</div>\n                </div>\n                <!-- Month Rows -->\n                <div class=\"lvl2-row\" (click)=\"_obRouter.goToMonthView(_ac, null, null, month.key)\" *ngFor=\"let month of year.value | distinctMonths | keyvalue | reverse\">\n                  <div class=\"title\">{{ month.key | monthFormat }}</div>\n                  <ng-container *ngLet=\"month.value | sumQuantity as currentValue\">\n                    <ng-container *ngLet=\"month.key | previousMonth:previousYearMonths | sumQuantity as previousValue\">\n                      <div class=\"actual cyan\" [innerHTML]=\"currentValue | toNumber\"></div>\n                      <div class=\"previous orange\" [innerHTML]=\"previousValue | toNumber\"></div>\n                      <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n                    </ng-container>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\n\n@Component({\n  selector: 'order-intake-history-sub-lvl2',\n  templateUrl: './order-intake-history-sub-lvl2.component.html',\n  styleUrls: ['./order-intake-history-sub-lvl2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': '_obRouter.goToMainView()'\n  }\n})\nexport class OrderIntakeHistorySubLvl2Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderIntakeHistoryState.GetPlanDate) plandate$ !: string;\n\n  // Wether or not we are on mobile view\n  mobile$: Observable<boolean>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone\n  rows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    private _breakpoints: BreakpointObserver,\n    public _obRouter: OrderIntakeHistoryRouter\n  ) {\n    this._title.setTitle(this.config.config.appTitle + ' - Ecommerce evolution');\n    this.mobile$ = this._breakpoints.observe(Breakpoints.HandsetPortrait).pipe( map(result => result.matches) );\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    // Grab plant and id parameter and use it to get the data\n    this.rows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id, this._ac.snapshot.data.title)))\n    );\n  }\n\n}\n","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"monthControl\">\n    <ng-container *ngLet=\"rows | filterYear:'current' | async as currentYearRows\">\n      <ng-container *ngLet=\"rows | filterYear:'previous' | async | distinctMonths | keyvalue as previousYearMonths\">\n        <mat-optgroup *ngFor=\"let year of currentYearRows | distinctYears\" [label]=\"year.key\">\n          <ng-container *ngFor=\"let month of year.value | distinctMonths | keyvalue | reverse\">\n            <mat-option [value]=\"month.key\">{{ month.key | monthFormat }}</mat-option>\n          </ng-container>\n        </mat-optgroup>\n      </ng-container>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'dip-month-selector',\n  templateUrl: './month-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthSelectorComponent {\n\n  // FormControl for current month\n  monthControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  @Input() rows: any[];\n\n  constructor(\n    private _obRouter: OrderIntakeHistoryRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.monthControl.setValue( params.month ));\n    // Subcribe to selector changes and grab latest params values\n    this.monthControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      withLatestFrom(this.params$)\n    ).subscribe(([month, params]: [string, any]) => {\n      // Detect in which level we are\n      if (params.hasOwnProperty('type')) {\n        // We are in LVL 4\n        this._obRouter.goToProductRegionView(this._ac, null, null, month, null, null);\n      } else {\n        // We are in LVL 3\n        this._obRouter.goToMonthView(this._ac, null, null, month);\n      }\n    });\n  }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'dip-product-region-chart',\n  templateUrl: './product-region-chart.component.html',\n  styleUrls: ['./product-region-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProductRegionChartComponent implements OnChanges {\n\n  @Input() current !: number;\n  @Input() previous: number = null;\n  @Input() maximum !: number;\n\n  maxWidth$ = new BehaviorSubject<string>('100%');\n\n  // Percents\n  actualPercent = new BehaviorSubject<number>(0);\n  // deltaPercent = new BehaviorSubject<number>(0);\n  previousPercent = new BehaviorSubject<number>(0);\n\n  // Delta offset percent\n  // deltaPosition = new BehaviorSubject<number>(0);\n\n  // Delta value\n  // deltaValue = new BehaviorSubject<number>(0);\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Grab current values\n    const current = changes.current.currentValue || 0;\n    const previous = (changes.previous && changes.previous.currentValue) || 0;\n    const maximum = changes.maximum.currentValue;\n    // Check if previous is valid\n    // If previous is not valid, only show total bar\n    let highestValue = current;\n    if (!isNaN(previous)) {\n      // Calculate highest value\n      highestValue = Math.max(current, previous);\n    }\n    this.maxWidth$.next(this.calculatePercent(maximum, highestValue) + '%');\n    const actualPercent = this.calculatePercent(highestValue, current);\n    this.actualPercent.next(actualPercent);\n    const previousPercent = this.calculatePercent(highestValue, previous);\n    this.previousPercent.next(previousPercent);\n    // const difference = current - previous;\n    // this.deltaValue.next(difference);\n    /* let deltaPercent;\n    if (difference > 0) {\n      deltaPercent = this.calculatePercent(highestValue, difference);\n    } else {\n      deltaPercent = this.calculatePercent(highestValue, previous - current);\n    } */\n    // this.deltaPercent.next(deltaPercent);\n    /* if (difference > 0) {\n      this.deltaPosition.next(previousPercent);\n    } else {\n      this.deltaPosition.next(actualPercent);\n    }*/\n  }\n\n  calculatePercent(total: number, part: number): number {\n    return + ( ( part / total ) * 100).toFixed(0);\n  }\n\n}","<div class=\"wrapper\" [style.width]=\"maxWidth$ | async\">\n  <div class=\"bar-wrapper\" [style.width.%]=\"actualPercent | async | startWith:0 | async\">\n    <div class=\"bar actual\"></div>\n  </div>\n  <!-- No delta bar for this moment -->\n  <!-- <ng-container *ngLet=\"deltaValue | async as value\">\n    <div class=\"bar-wrapper\" [style.left.%]=\"deltaPosition | async | startWith:0 | async\" [style.width.%]=\"deltaPercent | async | startWith:0 | async\">\n      <div class=\"bar delta\" [class.neutral]=\"value === 0\" [class.positive]=\"value > 0\" [class.negative]=\"value < 0\">\n        <div class=\"relative\">\n          <div class=\"value\">{{ value | abs }}</div>\n        </div>\n      </div>\n    </div>\n  </ng-container> -->\n  <div class=\"bar-wrapper\" [style.width.%]=\"previousPercent | async | startWith:0 | async\">\n    <div class=\"bar previous\"></div>\n  </div>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, ILanguage, IntakeHistoryColumns } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'distinctItems'\n})\nexport class DistinctItemsPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguageHuman) language: ILanguage;\n  reportInterface: typeof BacklogColumns | typeof IntakeHistoryColumns;\n\n  constructor(private _ac: ActivatedRoute) {\n    let report = this._ac.snapshot.data.title;\n    switch (report) {\n      case 'order_intake_history':\n        this.reportInterface = IntakeHistoryColumns;\n        break;\n      case 'order_backlog':\n      default:\n        this.reportInterface = BacklogColumns;\n        break;\n    }\n  }\n\n  transform(rows: any[], type: 'region' | 'product', compareItems: any = null): any {\n    if (!rows || rows.length === 0) {\n      return {};\n    }\n    const column = type === 'region' ? this.reportInterface[`Region${this.language}`] : this.reportInterface[`Product${this.language}`];\n    const uniques = rows.reduce((r, a) => {\n      r[a[column]] = r[a[column]] || [];\n      r[a[column]].push(a);\n      return r;\n    }, {});\n    if (compareItems) {\n      // If compare object is specified, crossjoin distinct items keys\n      for (const key in compareItems) {\n        if (compareItems[key]) {\n          uniques[key] = uniques[key] || [];\n        }\n      }\n    }\n    return uniques;\n  }\n\n}","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SumQuantityFn } from './sum-quantity.pipe';\n\n@Pipe({\n  name: 'max'\n})\nexport class MaxPipe implements PipeTransform {\n  report: string;\n\n  constructor(private _ac: ActivatedRoute) {\n    this.report = this._ac.snapshot.data.title;\n  }\n\n  transform(currentValues: KeyValue<string, any[]>[], previousValues: KeyValue<string, any[]>[]): number {\n    let highestCurrent = 0;\n    let highestPrevious = 0;\n    // Get maximum value of current items\n    if (currentValues && currentValues.length > 0) {\n      const numbers = currentValues.map(value => SumQuantityFn(value.value, this.report)).filter(num => !isNaN(num));\n      highestCurrent = Math.max(...numbers);\n    }\n    // Get maximum value of previous items\n    if (previousValues && previousValues.length > 0) {\n      const numbers = previousValues.map(value => SumQuantityFn(value.value, this.report)).filter(num => !isNaN(num));\n      highestPrevious = Math.max(...numbers);\n    }\n    // Get total highest^\n    return Math.max(highestCurrent, highestPrevious);\n  }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'default'\n})\nexport class DefaultPipe implements PipeTransform {\n\n  transform(value: any, def: any): any {\n    return value || def;\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngIf=\"rows$ | async as rows\">\n    <!-- Overview -->\n    <div class=\"overview\" *ngLet=\"plantOrZoneRows$ | async as plantOrZoneRows\">\n      <dip-total-selector></dip-total-selector>\n      <!-- Headers -->\n      <report-header></report-header>\n      <ng-container *ngLet=\"params.month | previousMonth:(plantOrZoneRows | distinctMonths | keyvalue) as previousMonthRows\">\n        <div class=\"header-rows\">\n          <!-- Header Row of current select plant / zone -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to main view\"></i>\n            <div class=\"title with-selector\">\n              <dip-plant-selector></dip-plant-selector>\n            </div>\n          </div>\n          <!-- Header Row of current selected month -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToPlantZoneView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to plant/zone view\"></i>\n            <div class=\"title with-selector\">\n              <dip-month-selector [rows]=\"plantOrZoneRows\"></dip-month-selector>\n            </div>\n            <ng-container *ngLet=\"rows | sumQuantity as currentValue\">\n              <ng-container *ngLet=\"previousMonthRows | sumQuantity as previousValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n              </ng-container>\n            </ng-container>\n          </div>\n        </div>\n        <!-- Content Rows -->\n        <div class=\"title-header\">\n          <div class=\"title\">REGIONS</div>\n        </div>\n        <!-- Region rows -->\n        <ng-container *ngLet=\"previousMonthRows | distinctItems:'region' as previousRegions\">\n          <!-- Iterate over each region -->\n          <ng-container *ngLet=\"rows | distinctItems:'region':previousRegions | keyvalue as regions\">\n            <ng-container *ngLet=\"regions | max:(previousRegions | keyvalue) as maximum\">\n              <div class=\"lvl3-row\" (click)=\"_obRouter.goToProductRegionView(_ac, null, null, null, 'region', region.key)\" *ngFor=\"let region of regions\">\n                <div class=\"title\">{{ region.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"region.value | sumQuantity as currentValue\">\n                  <!-- Bind and check previous value, it can be not found in some cases! -->\n                  <ng-container *ngIf=\"previousRegions[region.key] | default:[] as previousRegion; else dummyPrevious\">\n                    <ng-container *ngLet=\"previousRegion | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 3 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n                <!-- Template for when a region title is not found in a previous month -->\n                <ng-template #dummyPrevious>\n                  <div class=\"previous orange\">-</div>\n                  <div class=\"delta grey\">-</div>\n                </ng-template>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <div class=\"title-header\">\n          <div class=\"title\">PRODUCTS</div>\n        </div>\n        <!-- Product rows -->\n        <ng-container *ngLet=\"previousMonthRows | distinctItems:'product' as previousProducts\">\n          <!-- Iterate over each product -->\n          <ng-container *ngLet=\"rows | distinctItems:'product':previousProducts | keyvalue as products\">\n            <ng-container *ngLet=\"products | max:(previousProducts | keyvalue) as maximum\">\n              <div class=\"lvl3-row\" (click)=\"_obRouter.goToProductRegionView(_ac, null, null, null, 'product', product.key)\" *ngFor=\"let product of products\">\n                <div class=\"title\">{{ product.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"product.value | sumQuantity as currentValue\">\n                  <ng-container *ngLet=\"previousProducts[product.key] | default:[] as previousProduct\">\n                    <ng-container *ngLet=\"previousProduct | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 3 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-container>\n<!-- Template for LVL 3 Rows -->\n<ng-template #responsiveRow let-current=\"current\" let-previous=\"previous\" let-maximum=\"maximum\">\n  <!-- Check mobile view-->\n  <ng-container *ngIf=\"_data.mobile$ | async; then mobileRow else desktopRow\"></ng-container>\n  <!-- Template for mobile-tabletPortrait -->\n  <ng-template #mobileRow>\n    <ng-container *ngTemplateOutlet=\"lvl3Row; context: { current: current, previous: previous }\"></ng-container>\n    <!-- Bind numbers template -->\n    <dip-product-region-chart class=\"mobile\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n  </ng-template>\n  <!-- Template for TabletLandscape-Desktop -->\n  <ng-template #desktopRow>\n    <dip-product-region-chart class=\"desktop\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n    <!-- Bind numbers template -->\n    <ng-container *ngTemplateOutlet=\"lvl3Row; context: { current: current, previous: previous }\"></ng-container>\n  </ng-template>\n</ng-template>\n<!-- Template used in every row to show the numbers -->\n<ng-template #lvl3Row let-current=\"current\" let-previous=\"previous\">\n  <div class=\"actual cyan\" [innerHTML]=\"current | toNumber\"></div>\n  <div class=\"previous orange\" [innerHTML]=\"previous | toNumber\"></div>\n  <div class=\"delta grey\" [innerHTML]=\"previous | difference:current\"></div>\n</ng-template>","import { DataService } from '@services/data.service';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\n\n@Component({\n  selector: 'order-intake-history-sub-lvl3',\n  templateUrl: './order-intake-history-sub-lvl3.component.html',\n  styleUrls: ['./order-intake-history-sub-lvl3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': '_obRouter.goToPlantZoneView(_ac)'\n  }\n})\nexport class OrderIntakeHistorySubLvl3Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderIntakeHistoryState.GetPlanDate) plandate$ !: string;\n\n  // Rows used for higher totals\n  plantOrZoneRows$: Observable<any[]>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone and month\n  rows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    public _data: DataService,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    public _obRouter: OrderIntakeHistoryRouter\n  ) {\n    this._title.setTitle(this.config.config.appTitle + ' - Ecommerce evolution');\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    this.plantOrZoneRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id, 'order_intake_history')))\n    );\n    // Grab plant, id and month parameter and use it to get the current month data\n    this.rows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, params.month, 'order_intake_history')))\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'productRegionLabelFormat'\n})\nexport class ProductRegionLabelFormatPipe implements PipeTransform {\n\n  constructor(\n    private _data: DataService\n  ) { }\n\n  transform(value: string): Observable<string> {\n    value = value.split('|')[1];\n    return this._data.mobile$.pipe(\n      map(mobile => {\n        if (mobile) {\n          return value.length > 10 ? value.substring(0, 14) + '...' : value;\n        } else {\n          return value;\n        }\n      })\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'joinArrays'\n})\nexport class JoinArraysPipe implements PipeTransform {\n\n  transform(): any[] {\n    const arrays = [];\n    for (let i = 0; i < arguments.length; i++) {\n      arrays.push(arguments[i] || []);\n    }\n    return arrays.flat();\n  }\n\n}\n","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"regionProductControl\">\n    <mat-select-trigger>\n      <span class=\"mat-select-value-custom\">{{ regionProductControl.value | productRegionLabelFormat | async }}</span>\n    </mat-select-trigger>\n    <ng-container *ngLet=\"rows | joinArrays:previousRows as allRows\">\n      <mat-optgroup label=\"REGIONS\">\n        <ng-container *ngFor=\"let region of allRows | distinctItems:'region' | keyvalue\">\n          <mat-option value=\"region|{{region.key}}\">{{ region.key }}</mat-option>\n        </ng-container>\n      </mat-optgroup>\n      <mat-optgroup label=\"PRODUCTS\">\n        <ng-container *ngFor=\"let product of allRows | distinctItems:'product' | keyvalue\">\n          <mat-option value=\"product|{{product.key}}\">{{ product.key }}</mat-option>\n        </ng-container>\n      </mat-optgroup>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\nimport { RegionOrProduct } from '@other/interfaces';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'dip-product-region-selector',\n  templateUrl: './product-region-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProductRegionSelectorComponent {\n\n  // FormControl for current Region / Product\n  regionProductControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  constructor(\n    private _obRouter: OrderIntakeHistoryRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.regionProductControl.setValue( `${params.type}|${params.value}` ));\n    // Subcribe to selector changes and grab latest params values\n    this.regionProductControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      map(value => ({ type: value.split('|')[0], value: value.split('|')[1] }))\n    ).subscribe(selected => {\n      // We are in LVL 4\n      this._obRouter.goToProductRegionView(this._ac, null, null, null, selected.type as RegionOrProduct, selected.value);\n    });\n  }\n\n  @Input() rows: any[];\n  @Input() previousRows: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BacklogColumns, IntakeHistoryColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'mockMissingPreviousRows'\n})\nexport class MockMissingPreviousRowsPipe implements PipeTransform {\n\n  report: string;\n  columnName: string;\n\n  constructor(private _ac: ActivatedRoute) {\n    this.report = this._ac.snapshot.data.title;\n    switch(this.report) {\n      case 'order_intake_history':\n        let showTotal = localStorage.getItem('intake_history_show_total') == 'true';\n        this.columnName = showTotal ? IntakeHistoryColumns.Total : IntakeHistoryColumns.Average;\n        break;\n      case 'order_backlog':\n      default:\n        this.columnName = BacklogColumns.Quantity;\n        break;\n    }\n  }\n\n  /**\n   * This is a pipe which takes the current result of reduced items and the result of previous reduced items,\n   * and compares them to add the missing keys in current from the previous, mocking the row value\n   */\n  transform(current: any, previous: any): any {\n    for (const key in previous) {\n      if (previous[key] && !current.hasOwnProperty(key)) {\n        // Mock rows with non value\n        current[key] = previous[key].map(row => {\n          return {\n            ...row,\n            [this.columnName]: ''\n          };\n        });\n      }\n    }\n    return current;\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngLet=\"rows$ | async as rows\">\n    <!-- Overview -->\n    <div class=\"overview\" *ngIf=\"plantOrZoneRows$ | async as plantOrZoneRows\">\n      <dip-total-selector></dip-total-selector>\n      <!-- Headers -->\n      <report-header type=\"day\"></report-header>\n      <div class=\"header-rows\">\n        <!-- Header Row of currented select plant / zone -->\n        <div class=\"header-row zone\">\n          <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to main view\"></i>\n          <div class=\"title with-selector\">\n            <dip-plant-selector></dip-plant-selector>\n          </div>\n        </div>\n        <ng-container *ngLet=\"plantOrZoneRows | distinctMonths as currentDistinctMonths\">\n          <ng-container *ngLet=\"previousMonthRows$ | async as previousMonthRows\">\n            <!-- Header Row of current selected month -->\n            <div class=\"header-row zone\">\n              <i class=\"arrow\" (click)=\"_obRouter.goToPlantZoneView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to plant/zone view\"></i>\n              <div class=\"title with-selector\">\n                <dip-month-selector [rows]=\"plantOrZoneRows\"></dip-month-selector>\n              </div>\n              <ng-container *ngLet=\"currentDistinctMonths[params.month] | sumQuantity as currentValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <ng-container *ngLet=\"previousMonthRows | sumQuantity as previousValue\">\n                  <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                  <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n        <!-- Header Row of current selected product / region -->\n        <div class=\"header-row zone\">\n          <i class=\"arrow\" (click)=\"_obRouter.goToMonthView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Return to month view\"></i>\n          <div class=\"title with-selector\">\n            <dip-product-region-selector [rows]=\"monthRows$ | async\" [previousRows]=\"previousRows$ | async\"></dip-product-region-selector>\n          </div>\n          <ng-container *ngLet=\"rows | sumQuantity as currentValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <ng-container *ngIf=\"previousRows$ | async | sumQuantity as previousValue; else dummyPrevious\">\n              <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n              <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n            </ng-container>\n            <!-- Template for when a region title is not found in a previous month -->\n            <ng-template #dummyPrevious>\n              <div class=\"previous orange\">-</div>\n              <div class=\"delta grey\">-</div>\n            </ng-template>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Content Rows -->\n      <div class=\"title-header\">\n        <ng-container *ngIf=\"params.type === 'region'; else regionsTitle\">\n          <div class=\"title\">PRODUCTS</div>\n        </ng-container>\n        <ng-template #regionsTitle>\n          <div class=\"title\">REGIONS</div>\n        </ng-template>\n      </div>\n      <!-- Opposite param type -->\n      <ng-container *ngLet=\"params.type === 'region' ? 'product' : 'region' as oppositeType\">\n        <!-- Items rows -->\n        <ng-container *ngLet=\"previousRows$ | async | distinctItems:oppositeType as previousRegions\">\n          <ng-container *ngLet=\"rows | distinctItems:oppositeType:previousRegions | mockMissingPreviousRows:previousRegions | keyvalue as items\">\n            <ng-container *ngLet=\"items | max:(previousRegions | keyvalue) as maximum\">\n              <!-- Iterate over each region -->\n              <div class=\"lvl4-row\" (click)=\"goItem(oppositeType, item.key)\" *ngFor=\"let item of items\">\n                <div class=\"title\">{{ item.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"item.value | sumQuantity as currentValue\">\n                  <ng-container *ngLet=\"previousRegions[item.key] | default:[] as previousRegion\">\n                    <ng-container *ngLet=\"previousRegion | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 4 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-container>\n<!-- Template for LVL 4 Rows -->\n<ng-template #responsiveRow let-current=\"current\" let-previous=\"previous\" let-maximum=\"maximum\">\n  <!-- Check mobile view-->\n  <ng-container *ngIf=\"_data.mobile$ | async; then mobileRow else desktopRow\"></ng-container>\n  <!-- Template for mobile-tabletPortrait -->\n  <ng-template #mobileRow>\n    <ng-container *ngTemplateOutlet=\"lvl4Row; context: { current: current, previous: previous }\"></ng-container>\n    <!-- Bind numbers template -->\n    <dip-product-region-chart class=\"mobile\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n  </ng-template>\n  <!-- Template for TabletLandscape-Desktop -->\n  <ng-template #desktopRow>\n    <dip-product-region-chart class=\"desktop\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n    <!-- Bind numbers template -->\n    <ng-container *ngTemplateOutlet=\"lvl4Row; context: { current: current, previous: previous }\"></ng-container>\n  </ng-template>\n</ng-template>\n<!-- Template used in every row to show the numbers -->\n<ng-template #lvl4Row let-current=\"current\" let-previous=\"previous\">\n  <div class=\"actual cyan\" [innerHTML]=\"current | toNumber\"></div>\n  <div class=\"previous orange\" [innerHTML]=\"previous | toNumber\"></div>\n  <div class=\"delta grey\" [innerHTML]=\"previous | difference:current\"></div>\n</ng-template>","import { DataService } from '@services/data.service';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { GetPreviousMonth } from '@other/functions';\nimport { RegionOrProduct } from '@other/interfaces';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { OrderIntakeHistoryState } from '@store/order-intake-history.state';\nimport { OrderIntakeHistoryRouter } from '@modules/order-intake-history/services/order-intake-history-router.service';\n\n@Component({\n  selector: 'order-intake-history-sub-lvl4',\n  templateUrl: './order-intake-history-sub-lvl4.component.html',\n  styleUrls: ['./order-intake-history-sub-lvl4.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': '_obRouter.goToMonthView(_ac)'\n  }\n})\nexport class OrderIntakeHistorySubLvl4Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderIntakeHistoryState.GetPlanDate) plandate$ !: string;\n\n  // Wether or not we are on mobile view\n  mobile$: Observable<boolean>;\n  // Rows used for highest total\n  plantOrZoneRows$: Observable<any[]>;\n  // Rows used for month total\n  monthRows$: Observable<any[]>;\n  // Rows used for month previous total\n  previousMonthRows$: Observable<any[]>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone and month\n  rows$: Observable<any[]>;\n  // All rows for the selected plant / zone and previous month\n  previousRows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    private _breakpoints: BreakpointObserver,\n    public _obRouter: OrderIntakeHistoryRouter,\n    public _data: DataService\n  ) {\n    this._title.setTitle(this.config.config.appTitle + 'Ecommerce evolution');\n    this.mobile$ = this._breakpoints.observe(Breakpoints.HandsetPortrait).pipe( map(result => result.matches) );\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    // Get the total plant rows\n    this.plantOrZoneRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id, 'order_intake_history')))\n    );\n    // Get the total month rows\n    this.monthRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, params.month, 'order_intake_history')))\n    );\n    // Get the total previous month rows\n    this.previousMonthRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, GetPreviousMonth(params.month), 'order_intake_history')))\n    );\n    // Get the the rows for the current selected region or product\n    this.rows$ = this.params$.pipe(\n      // tslint:disable-next-line: max-line-length\n      switchMap(params => this._store.select(CustomSelectors.GetRegionOrProductRows(params.plant, params.id, params.month, params.type, params.value, 'order_intake_history')))\n    );\n    // Get the the rows for the previous selected region or product\n    this.previousRows$ = this.params$.pipe(\n      // tslint:disable-next-line: max-line-length\n      switchMap(params => this._store.select(CustomSelectors.GetRegionOrProductRows(params.plant, params.id, GetPreviousMonth(params.month), params.type, params.value, 'order_intake_history')))\n    );\n  }\n\n  goItem(type: RegionOrProduct, item: string): void {\n    this._obRouter.goToProductRegionView(this._ac, null, null, null, type, item);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { ReportResourcesModule } from '@modules/report-resources/report-resources.module';\nimport { ReportWrapperComponent } from '@modules/report-resources/components/wrapper/wrapper.component';\nimport { OrderIntakeHistoryRouter } from './services/order-intake-history-router.service';\nimport { OrderIntakeHistoryMainComponent } from './components/order-intake-history-main/order-intake-history-main.component';\nimport { OrderIntakeHistorySubLvl2Component } from './components/order-intake-history-sub-lvl2/order-intake-history-sub-lvl2.component';\nimport { PlantSelectorComponent } from './components/selectors/plant-selector/plant-selector.component';\nimport { MonthSelectorComponent } from './components/selectors/month-selector/month-selector.component';\nimport { ProductRegionSelectorComponent } from './components/selectors/product-region-selector/product-region-selector.component';\nimport { OrderIntakeHistorySubLvl3Component } from './components/order-intake-history-sub-lvl3/order-intake-history-sub-lvl3.component';\nimport { OrderIntakeHistorySubLvl4Component } from './components/order-intake-history-sub-lvl4/order-intake-history-sub-lvl4.component';\nimport { TotalSelectorComponent } from './components/selectors/total-selector/total-selector.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ReportWrapperComponent,\n    children: [\n      {\n        path: '',\n        component: OrderIntakeHistoryMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant/:id',\n        component: OrderIntakeHistorySubLvl2Component,\n        data: { level: 2 }\n      },\n      {\n        path: ':plant/:id/month/:month',\n        component: OrderIntakeHistorySubLvl3Component,\n        data: { level: 3 }\n      },\n      {\n        path: ':plant/:id/month/:month/:type/:value',\n        component: OrderIntakeHistorySubLvl4Component,\n        data: { level: 4 }\n      }\n    ]\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    LayoutModule,\n    NgxChartsModule,\n    SharedModule,\n    ReportResourcesModule\n  ],\n  declarations: [\n    // Components\n    OrderIntakeHistoryMainComponent,\n    OrderIntakeHistorySubLvl2Component,\n    OrderIntakeHistorySubLvl3Component,\n    OrderIntakeHistorySubLvl4Component,\n    // Selectors\n    PlantSelectorComponent,\n    MonthSelectorComponent,\n    ProductRegionSelectorComponent,\n    TotalSelectorComponent\n  ],\n  providers: [\n    OrderIntakeHistoryRouter\n  ]\n})\nexport class OrderIntakeHistoryModule {}\n"]}