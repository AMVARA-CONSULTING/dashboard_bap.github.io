{"version":3,"file":"606.1610892640760b75.js","mappings":"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","names":["OrderBacklogWrapperComponent","constructor","data","_store","this","lastTap","lastTap2","ngOnInit","dispatch","OrderBacklog","getLevel","currentLevel","outlet","activatedRouteData","level","i0","selectors","swipeAnimation","OrderBacklogRouter","_router","goToMainView","navigate","main_route","goToPlantZoneView","route","plantType","plantValue","snapshot","params","plant","id","goToMonthView","month","sub_level_a","goToProductRegionView","itemType","itemValue","type","value","factory","LetDirective","vcRef","templateRef","ngLet","_ref","createView","context","$implicit","clear","createEmbeddedView","DistinctMonthsPipe","rows","DistinctMonthsFn","pure","reduce","r","a","moment","BacklogColumns","format","push","year","FilterYearFn","ranges","length","filter","row","actual","includes","substring","previous","FilterYearPipe","__decorate","SelectSnapshot","OrderBacklogState","FormatLatestDayPipe","transform","date","_data","_ac","params$","paramMap","pipe","map","keys","get","currentMonthDate$","switchMap","select","CustomSelectors","themeClass","OrderBacklogHeaderComponent","hn","ViewSelectSnapshot","day","FilterDayFn","days$","days","latestDay","previousDay","FilterDayPipe","SumQuantityPipe","values","SumQuantityFn","sumByProperty","NaN","zones","highest","forEach","zone","totalCurrent","totalPrevious","HighestZoneTotalPipe","StartWithPipe","originalValue","initialValue","of","delay","startWith","PercentPipe","part","total","toFixed","language","groupOrPlantNameFn","ctx_r17","oxw","GroupOrPlantNamePipe","ConfigState","OrderBacklogGraphicComponent","router","goZone","ZoneID","relativeTo","replaceUrl","trigger","transition","query","style","opacity","optional","stagger","animate","changeDetection","before","after","isNaN","ToNumberFn","Math","abs","DifferencePipe","PlantsByZonePipe","classifyByProperty","ctx_r11","zone_r4","ctx_r28","plant_r21","ctx_r30","zone_r13","config","title","translate","_obRouter","setTitle","appTitle","instant","OrderBacklogMainComponent","ctx","$event","On","OrderBacklogGraphicComparisonComponent","_config","BehaviorSubject","locale","xAxisTickFormatting","bind","colorScheme$","lightTheme","valueChanges","domain","ngOnChanges","changes","currentRows","current","currentValue","previousRows","dateRanges","selectSnapshot","currentMonthsRange","sort","previousMonthsRange","currentMonths","previousMonths","prev_year","chart","name","series","i","currentMonthIndex","toDate","extra","original","previousMonthIndex","originalItem","err","chart$","next","FormControl","subscribe","plantControl","setValue","distinctUntilChanged","split","withLatestFrom","selected","hasOwnProperty","PlantSelectorComponent","DistinctYearsPipe","Object","entries","years","key","reverse","ReversePipe","array","MonthFormatPipe","PreviousMonthPipe","previousYearMonths","subtract","find","mo","console","log","ctx_r23","month_r15","ctx_r27","_title","_breakpoints","mobile$","observe","Breakpoints","result","matches","rows$","OrderBacklogSubLvl2Component","MonthSelectorComponent","monthControl","ProductRegionChartComponent","maximum","highestValue","max","maxWidth$","calculatePercent","actualPercent","previousPercent","compareItems","column","uniques","DistinctItemsPipe","MaxPipe","currentValues","previousValues","highestCurrent","highestPrevious","numbers","num","DefaultPipe","def","ctx_r40","region_r26","ctx_r63","product_r51","ctx_r68","ctx_r70","plantOrZoneRows$","OrderBacklogSubLvl3Component","ProductRegionLabelFormatPipe","mobile","JoinArraysPipe","arrays","arguments","flat","ProductRegionSelectorComponent","regionProductControl","MockMissingPreviousRowsPipe","ctx_r25","ctx_r56","ctx_r65","monthRows$","previousMonthRows$","GetPreviousMonth","previousRows$","goItem","item","OrderBacklogSubLvl4Component","routes","path","component","children","OrderBacklogModule","imports","CommonModule","RouterModule","LayoutModule","NgxChartsModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/modules/order-backlog/components/wrapper/wrapper.component.ts","./src/app/modules/order-backlog/components/wrapper/wrapper.component.html","./src/app/modules/order-backlog/services/order-backlog-router.service.ts","./src/app/modules/order-backlog/directives/ng-let.directive.ts","./src/app/modules/order-backlog/pipes/distinct-months.pipe.ts","./src/app/modules/order-backlog/pipes/filter-year.pipe.ts","./src/app/modules/order-backlog/pipes/format-latest-day.pipe.ts","./src/app/modules/order-backlog/components/order-backlog-header/order-backlog-header.component.html","./src/app/modules/order-backlog/components/order-backlog-header/order-backlog-header.component.ts","./src/app/modules/order-backlog/pipes/filter-day.pipe.ts","./src/app/modules/order-backlog/pipes/sum-quantity.pipe.ts","./src/app/modules/order-backlog/pipes/highest-zone-total.pipe.ts","./src/app/modules/order-backlog/pipes/start-with.pipe.ts","./src/app/modules/order-backlog/pipes/percent.pipe.ts","./src/app/modules/order-backlog/pipes/group-or-plant-name.pipe.ts","./src/app/modules/order-backlog/components/graphic/graphic.component.html","./src/app/modules/order-backlog/components/graphic/graphic.component.ts","./src/app/modules/order-backlog/pipes/difference.pipe.ts","./src/app/modules/order-backlog/pipes/plants-by-zone.pipe.ts","./src/app/modules/order-backlog/components/order-backlog-main/order-backlog-main.component.html","./src/app/modules/order-backlog/components/order-backlog-main/order-backlog-main.component.ts","./src/app/modules/order-backlog/components/graphic-comparison/graphic-comparison.component.ts","./src/app/modules/order-backlog/components/graphic-comparison/graphic-comparison.component.html","./src/app/modules/order-backlog/components/selectors/plant-selector/plant-selector.component.html","./src/app/modules/order-backlog/components/selectors/plant-selector/plant-selector.component.ts","./src/app/modules/order-backlog/pipes/distinct-years.pipe.ts","./src/app/modules/order-backlog/pipes/reverse.pipe.ts","./src/app/modules/order-backlog/pipes/month-format.pipe.ts","./src/app/modules/order-backlog/pipes/previous-month.pipe.ts","./src/app/modules/order-backlog/components/order-backlog-sub-lvl2/order-backlog-sub-lvl2.component.html","./src/app/modules/order-backlog/components/order-backlog-sub-lvl2/order-backlog-sub-lvl2.component.ts","./src/app/modules/order-backlog/components/selectors/month-selector/month-selector.component.html","./src/app/modules/order-backlog/components/selectors/month-selector/month-selector.component.ts","./src/app/modules/order-backlog/components/product-region-chart/product-region-chart.component.ts","./src/app/modules/order-backlog/components/product-region-chart/product-region-chart.component.html","./src/app/modules/order-backlog/pipes/distinct-items.pipe.ts","./src/app/modules/order-backlog/pipes/max.pipe.ts","./src/app/modules/order-backlog/pipes/default.pipe.ts","./src/app/modules/order-backlog/components/order-backlog-sub-lvl3/order-backlog-sub-lvl3.component.html","./src/app/modules/order-backlog/components/order-backlog-sub-lvl3/order-backlog-sub-lvl3.component.ts","./src/app/modules/order-backlog/pipes/product-region-label-format.pipe.ts","./src/app/modules/order-backlog/pipes/join-arrays.pipe.ts","./src/app/modules/order-backlog/components/selectors/product-region-selector/product-region-selector.component.html","./src/app/modules/order-backlog/components/selectors/product-region-selector/product-region-selector.component.ts","./src/app/modules/order-backlog/pipes/mock-missing-previous-rows.pipe.ts","./src/app/modules/order-backlog/components/order-backlog-sub-lvl4/order-backlog-sub-lvl4.component.html","./src/app/modules/order-backlog/components/order-backlog-sub-lvl4/order-backlog-sub-lvl4.component.ts","./src/app/modules/order-backlog/order-backlog.module.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { DataService } from '@services/data.service';\nimport { OrderBacklog } from '@store/order-backlog.state';\nimport { swipeAnimation } from 'app/app.transitions';\n\n@Component({\n  selector: 'order-backlog-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n  animations: [swipeAnimation],\n  host: {\n    '[@routerTransition]': 'getLevel()'\n  }\n})\nexport class OrderBacklogWrapperComponent implements OnInit {\n\n  @ViewChild('o', { static: true }) outlet: RouterOutlet;\n\n  constructor(\n    private data: DataService,\n    private _store: Store\n  ) {\n    data.lastTap = null;\n    data.lastTap2 = null;\n  }\n\n  ngOnInit() {\n    // Get Order Backlog Data\n    this._store.dispatch( new OrderBacklog.Get() );\n  }\n\n  getLevel() {\n    this.data.currentLevel = +this.outlet.activatedRouteData['level'];\n    return this.outlet.activatedRouteData['level'];\n  }\n\n}\n","<router-outlet #o=\"outlet\"></router-outlet>","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PlantOrZone, RegionOrProduct } from '@other/interfaces';\n\n/**\n * Route Handler Actions for Order Backlog\n * If no params are passed to those functions, will try to use those from the current URL\n */\n@Injectable()\nexport class OrderBacklogRouter {\n\n    // Names of routes for each level\n    main_route: string = '/sells';\n    sub_level_a: string = 'month';\n\n    constructor(\n        private _router: Router\n    ) { }\n\n    goToMainView() {\n        this._router.navigate([this.main_route]);\n    }\n\n    goToPlantZoneView(route: ActivatedRoute, plantType?: PlantOrZone, plantValue?: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        this._router.navigate([\n            this.main_route,\n            plantType,\n            plantValue\n        ]);\n    }\n\n    goToMonthView(route: ActivatedRoute, plantType?: PlantOrZone, plantValue?: string, month?: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        month = month || route.snapshot.params.month;\n        this._router.navigate([\n            this.main_route,\n            plantType,\n            plantValue,\n            this.sub_level_a,\n            month\n        ]);\n    }\n\n    // tslint:disable-next-line: max-line-length\n    goToProductRegionView(route: ActivatedRoute, plantType: PlantOrZone, plantValue: string, month: string, itemType: RegionOrProduct, itemValue: string) {\n        plantType = plantType || route.snapshot.params.plant;\n        plantValue = plantValue || route.snapshot.params.id;\n        month = month || route.snapshot.params.month;\n        itemType = itemType || route.snapshot.params.type;\n        itemValue = itemValue || route.snapshot.params.value;\n        this._router.navigate([\n            this.main_route,\n            plantType,\n            plantValue,\n            this.sub_level_a,\n            month,\n            itemType,\n            itemValue\n        ]);\n    }\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, EmbeddedViewRef } from '@angular/core';\n\n/**\n * Custom Directive to dynamicly assign calculated value to a static value context\n * @url https://stackblitz.com/edit/directive-collection-with-examples?file=src%2Fapp%2Fng-let.directive.ts\n */\n@Directive({\n    selector: '[ngLet]'\n})\nexport class LetDirective {\n    _ref: EmbeddedViewRef<any>;\n    context: any = {};\n\n    @Input()\n    set ngLet(value: any) {\n      // if embeadded view doesn't exist yet create it (only once)\n      if (!this._ref) {\n          this.createView();\n      }\n      // if value is empty destroy the component\n      // here it's acctualy works like ngIf (will rerender on non-empty value)\n      /* if (!value) {\n        this._ref.destroy();\n        this._ref = undefined;\n        return;\n      } */\n      // add the value to the context\n      this._ref.context.$implicit = this.context.ngLet = value;\n    }\n\n    constructor(\n      private readonly vcRef: ViewContainerRef,\n      private readonly templateRef: TemplateRef<any>\n    ) {}\n\n    createView(): void {\n      this.vcRef.clear();\n      this._ref = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { BacklogColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'distinctMonths'\n})\nexport class DistinctMonthsPipe implements PipeTransform {\n\n  // Retrieve rows classified by month in descending order (current is first)\n  transform = (rows: any[]) => DistinctMonthsFn(rows);\n\n}\n\nexport function DistinctMonthsFn(rows: any[]) {\n  return rows.reduce((r, a) => {\n    const month = moment(a[BacklogColumns.Date], 'YYYY-MM-DD').format('YYYY-MM');\n    r[month] = r[month] || [];\n    r[month].push(a);\n    return r;\n  }, {});\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, DateRanges } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\n\n@Pipe({\n  name: 'filterYear'\n})\nexport class FilterYearPipe implements PipeTransform {\n\n  @SelectSnapshot(OrderBacklogState.GetDateRanges) ranges !: DateRanges;\n\n  // Filter zone rows depending on year\n  transform = (rows: any[], year: 'current' | 'previous') => FilterYearFn(rows, year, this.ranges);\n\n}\n\n// CurrentYear: Should be the first 12 months available from now to past\n// PreviousYear: Should be the next 12 months available from 12 months ago\n// For example: dates = Array(24)\n//              Current: dates.slice(0, 12)\n//              Previous: dates.slice()\nexport function FilterYearFn(rows: any[], year: 'current' | 'previous', ranges: DateRanges) {\n  if (!rows || rows.length === 0) return [];\n  if (year === 'current') {\n    return rows.filter(row => ranges.actual.includes(row[BacklogColumns.Date].substring(0, 7)));\n  } else {\n    return rows.filter(row => ranges.previous.includes(row[BacklogColumns.Date].substring(0, 7)));\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'formatLatestDay'\n})\nexport class FormatLatestDayPipe implements PipeTransform {\n\n  transform(date: string): string {\n    return moment(date, 'YYYY-MM-DD').format('DD/MM/YYYY');\n  }\n\n}\n","<div class=\"empty\"></div>\n<ng-container [ngSwitch]=\"level\">\n    <!-- Level 1 Headers -->\n    <ng-container *ngSwitchCase=\"1\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <div class=\"report-date\">\n                <div class=\"upper\">{{ days$.latestDay | formatLatestDay }}</div>\n                <div class=\"lower\"></div>\n            </div>\n            <div class=\"report-date\">\n                <div class=\"upper\">Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <div class=\"report-date\">{{ days$.latestDay | formatLatestDay }}</div>\n            <div class=\"report-date\">{{ 'prev_year' | translate }}</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 2 Headers -->\n    <ng-container *ngSwitchCase=\"2\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <div class=\"report-date\">\n                <div class=\"upper\">Last</div>\n                <div class=\"lower\">12 Month</div>\n            </div>\n            <div class=\"report-date\">\n                <div class=\"upper\">Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <div class=\"report-date\">{{ 'last_x_month' | translate }}</div>\n            <div class=\"report-date\">{{ 'prev_year' | translate }}</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 3 Headers -->\n    <ng-container *ngSwitchCase=\"3\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <ng-container *ngIf=\"(currentMonthDate$ | async).substring(0,7) === currentMonth; then today else last12MonthMobile\"></ng-container>\n            <div class=\"report-date\">\n                <div class=\"upper\">Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <ng-container *ngIf=\"(currentMonthDate$ | async).substring(0,7) === currentMonth; then today else last12MonthDesktop\"></ng-container>\n            <div class=\"report-date\">{{ 'prev_year' | translate }}</div>\n        </ng-template>\n    </ng-container>\n    <!-- Level 4 Headers -->\n    <ng-container *ngSwitchCase=\"4\">\n        <!-- Mobile -->\n        <ng-container *ngIf=\"_data.mobile$ | async; else desktopHeaders\">\n            <ng-container *ngIf=\"(currentMonthDate$ | async).substring(0,7) === currentMonth; then today else last12MonthMobile\"></ng-container>\n            <div class=\"report-date\">\n                <div class=\"upper\">Prev.</div>\n                <div class=\"lower\">Year</div>\n            </div>\n        </ng-container>\n        <!-- Desktop -->\n        <ng-template #desktopHeaders>\n            <ng-container *ngIf=\"(currentMonthDate$ | async).substring(0,7) === currentMonth; then today else last12MonthDesktop\"></ng-container>\n            <div class=\"report-date\">{{ 'prev_year' | translate }}</div>\n        </ng-template>\n    </ng-container>\n</ng-container>\n<ng-template #today>\n    <div class=\"report-date\">\n        <div class=\"upper\">{{ currentMonthDate$ | async | formatLatestDay }}</div>\n    </div>\n</ng-template>\n<ng-template #last12MonthMobile>\n    <div class=\"report-date\">\n        <div class=\"upper\">Last</div>\n        <div class=\"lower\">12 Month</div>\n    </div>\n</ng-template>\n<ng-template #last12MonthDesktop>\n    <div class=\"report-date\">\n        <div class=\"upper\">{{ 'last_x_month' | translate }}</div>\n    </div>\n</ng-template>\n<div class=\"glyph\">&Delta;</div>","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DistinctMonthsFn } from '@modules/order-backlog/pipes/distinct-months.pipe';\nimport { FilterYearFn } from '@modules/order-backlog/pipes/filter-year.pipe';\nimport { SelectSnapshot, ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { Store } from '@ngxs/store';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { BacklogColumns, DateRanges, OrderBacklogDays } from '@other/interfaces';\nimport { DataService } from '@services/data.service';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport * as moment from 'moment';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'order-backlog-header',\n  templateUrl: './order-backlog-header.component.html',\n  styleUrls: ['./order-backlog-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrderBacklogHeaderComponent {\n\n  @SelectSnapshot(OrderBacklogState.GetDateRanges) ranges !: DateRanges;\n\n  @ViewSelectSnapshot(OrderBacklogState.GetLatestAndPreviousDay) days$ !: OrderBacklogDays;\n\n  currentMonthDate$: Observable<string>;\n\n  level: number;\n\n  @HostBinding('class') get themeClass() {\n    return `level${this.level}`;\n  };\n\n  currentMonth = moment().format('YYYY-MM');\n\n  params$: Observable<any>;\n\n  constructor(\n    public _data: DataService,\n    private _ac: ActivatedRoute,\n    private _store: Store\n  ) {\n    this.level = this._ac.snapshot.data.level;\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.currentMonthDate$ = this.params$.pipe(\n      switchMap(params => this._store.select<any[]>(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id)).pipe(\n        map(rows => ([params, rows]))\n      )),\n      map(([params, rows]) => {\n        rows = FilterYearFn(rows, 'current', this.ranges);\n        rows = DistinctMonthsFn(rows);\n        rows = rows[params.month];\n        return rows[0][BacklogColumns.Date];\n      })\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, OrderBacklogDays } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\n\n@Pipe({\n  name: 'filterDay'\n})\nexport class FilterDayPipe implements PipeTransform {\n\n  @SelectSnapshot(OrderBacklogState.GetLatestAndPreviousDay) days$ !: OrderBacklogDays;\n\n  transform(rows: any[], day: 'current' | 'previous'): any[] {\n    return FilterDayFn(rows, day, this.days$);\n  }\n\n}\n\nexport function FilterDayFn(rows: any[], day: 'current' | 'previous', days: OrderBacklogDays) {\n  if (day === 'current') {\n    return rows.filter(row => row[BacklogColumns.Date].substring(0, 7) === days.latestDay.substring(0, 7));\n  } else {\n    return rows.filter(row => row[BacklogColumns.Date].substring(0, 7) === days.previousDay.substring(0, 7));\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { sumByProperty } from '@other/functions';\nimport { BacklogColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'sumQuantity'\n})\nexport class SumQuantityPipe implements PipeTransform {\n\n  transform = (values: any[]) => SumQuantityFn(values);\n\n}\n\nexport function SumQuantityFn(values: any[]) {\n  if (!values || values.length === 0) {\n    return NaN;\n  }\n\n  return sumByProperty(values, BacklogColumns.Quantity);\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { OrderBacklogDays } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { FilterDayFn } from './filter-day.pipe';\nimport { SumQuantityFn } from './sum-quantity.pipe';\n\n@Pipe({\n  name: 'highestZoneTotal'\n})\nexport class HighestZoneTotalPipe implements PipeTransform {\n\n  @SelectSnapshot(OrderBacklogState.GetLatestAndPreviousDay) days$ !: OrderBacklogDays;\n\n  transform(zones: KeyValue<string, any[]>[]): number {\n    // Calculate highest current and previous year total of all zones\n    // This value is used in graphic to know the bar height %\n    // The maximum value should be the highest total (current/previous) of all given zones\n    let highest = 0;\n    zones.forEach(zone => {\n      const totalCurrent = SumQuantityFn( FilterDayFn( zone.value, 'current', this.days$ ) );\n      const totalPrevious = SumQuantityFn( FilterDayFn( zone.value, 'previous', this.days$ ) );\n      if (totalCurrent > highest) {\n        highest = totalCurrent;\n      }\n      if (totalPrevious > highest) {\n        highest = totalPrevious;\n      }\n    });\n    return highest;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, startWith } from 'rxjs/operators';\n\n@Pipe({\n  name: 'startWith'\n})\nexport class StartWithPipe implements PipeTransform {\n\n  transform(originalValue: any, initialValue: any): Observable<any> {\n    return of(originalValue).pipe(\n      delay(0),\n      startWith(initialValue)\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'percent'\n})\nexport class PercentPipe implements PipeTransform {\n\n  transform(part: number, total: number): number {\n    return + ( ( part / total ) * 100).toFixed(0);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'groupOrPlantName'\n})\nexport class GroupOrPlantNamePipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguageHuman) language: ILanguage;\n\n  // Get plant group name\n  transform(values: any[], type: 'plant' | 'group' | 'zone'): string {\n    return groupOrPlantNameFn(values, type, this.language);\n  }\n\n}\n\nexport function groupOrPlantNameFn(values: any[], type: 'plant' | 'group' | 'zone', language): string {\nreturn values[0][['group', 'zone'].includes(type) ? BacklogColumns[`PlantGroup${language}`] : BacklogColumns[`Plant${language}`]];\n}\n","<div class=\"wrapper\" [@list]=\"zones.length\">\n  <!-- Iterate over each zone -->\n  <ng-container *ngLet=\"zones | highestZoneTotal as highestZone\">\n    <div class=\"zone\" (click)=\"goZone(zone.key)\" *ngFor=\"let zone of zones\" [style.width.%]=\"100 / zones.length\">\n      <div class=\"bars\">\n        <div style=\"position: relative; height: 100%;\">\n          <ng-container *ngLet=\"zone.value | sumQuantity as zoneTotal\">\n            <!-- Current year bar -->\n            <div *ngLet=\"zone.value | filterDay:'current' | sumQuantity as quantity\" class=\"actual\" [style.height.%]=\"quantity | percent:highestZone | startWith:0 | async\">\n              <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ quantity | toNumber }}</div>\n            </div>\n            <!-- Previous year bar -->\n            <div *ngLet=\"zone.value | filterDay:'previous' | sumQuantity as quantity\" class=\"previous\" [style.height.%]=\"quantity | percent:highestZone | startWith:0 | async\">\n              <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ quantity | toNumber }}</div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Zone name -->\n      <div class=\"title\">{{ zone.value | groupOrPlantName:'group' }}</div>\n    </div>\n  </ng-container>\n</div>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { trigger, transition, query, stagger, style, animate } from '@angular/animations';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { KeyValue } from '@angular/common';\nimport { DataService } from '@services/data.service';\n\n@Component({\n  selector: 'order-backlog-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ]\n})\nexport class OrderBacklogGraphicComponent {\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    public _data: DataService\n  ) { }\n\n  @Input() zones: KeyValue<string, any[]>[];\n\n  // CLick handler for going to clicked zone\n  goZone(ZoneID): void {\n    this.router.navigate(['zone', ZoneID], { relativeTo: this.route, replaceUrl: true });\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ToNumberFn } from '@pipes/number.pipe';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'difference'\n})\nexport class DifferencePipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  // Get difference with symbol\n  transform(before: number, after: number): string {\n    if (isNaN(before)) {\n      before = 0;\n    }\n    if (isNaN(after)) {\n      after = 0;\n    }\n    const value = after - before;\n    if (value === 0) {\n      return '-';\n    } else if (value > 0) {\n      return `+ ${ToNumberFn(Math.abs(value), false, true, this.language)}`;\n    } else {\n      return `- ${ToNumberFn(Math.abs(value), false, true, this.language)}`;\n    }\n  }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { classifyByProperty } from '@other/functions';\nimport { BacklogColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'plantsByZone'\n})\nexport class PlantsByZonePipe implements PipeTransform {\n\n  // Get available plants inside zone\n  transform = (values: any[]) => { \n    return classifyByProperty(values, BacklogColumns.SortKey_Plant)\n  };\n\n}\n","<!-- Quick Overview -->\n<ng-container *ngLet=\"zones$ | keyvalue | startWith:[] | async as zones\">\n  <div class=\"report-header\">\n    <!-- Header Info -->\n    <order-backlog-header type=\"day\"></order-backlog-header>\n    <div class=\"overview\">\n      <div class=\"graphic\">\n        <!-- Graphic for level 1-->\n        <order-backlog-graphic [zones]=\"zones\"></order-backlog-graphic>\n      </div>\n      <!-- Overview of plant groups -->\n      <div class=\"simple\">\n        <div (click)=\"_obRouter.goToPlantZoneView(_ac, 'zone', zone.key)\" class=\"overview-group\" *ngFor=\"let zone of zones\">\n          <div class=\"empty\">{{ zone.value | groupOrPlantName:'group' }}</div>\n          <!-- Map current value -->\n          <ng-container *ngLet=\"zone.value | filterDay:'current' | sumQuantity as currentValue\">\n            <!-- Map previous value -->\n            <ng-container *ngLet=\"zone.value | filterDay:'previous' | sumQuantity as previousValue\">\n              <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n              <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n              <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!-- Zones Content -->\n  <div class=\"wrapper\" [@list]=\"zones.length\">\n    <!-- Iterate over each zone -->\n    <div class=\"zone\" *ngFor=\"let zone of zones\">\n      <div class=\"zone-header\" (click)=\"_obRouter.goToPlantZoneView(_ac, 'zone', zone.key)\">\n        <!-- FIXME: Dynamic language fields -->\n        <div class=\"title\">{{ zone.value | groupOrPlantName:'group' }}</div>\n        <!-- Map current value -->\n        <ng-container *ngLet=\"zone.value | filterDay:'current' | sumQuantity as currentValue\">\n          <!-- Map previous value -->\n          <ng-container *ngLet=\"zone.value | filterDay:'previous' | sumQuantity as previousValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n            <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n          </ng-container>\n        </ng-container>\n      </div>\n      <!-- Iterate over each plant inside zone -->\n      <div class=\"plant\" (click)=\"_obRouter.goToPlantZoneView(_ac, 'region', plant.key)\" *ngFor=\"let plant of zone.value | plantsByZone | keyvalue\">\n        <div class=\"title\">{{ plant.value | groupOrPlantName:'region' }}</div>\n        <!-- Map current value -->\n        <ng-container *ngLet=\"plant.value | filterDay:'current' | sumQuantity as currentValue\">\n          <!-- Map previous value -->\n          <ng-container *ngLet=\"plant.value | filterDay:'previous' | sumQuantity as previousValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n            <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</ng-container>","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport { Title } from '@angular/platform-browser';\nimport { OrderBacklogState } from 'app/store/order-backlog.state';\nimport { Zones } from '@other/interfaces';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DataService } from '@services/data.service';\n\n@Component({\n  selector: 'order-backlog-main',\n  templateUrl: './order-backlog-main.component.html',\n  styleUrls: ['./order-backlog-main.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('list', [\n      transition('0 => *', [\n        query('.zone:enter', style({ opacity: 0 }), { optional: true }),\n        query('.zone:enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ],\n  host: {\n    '(swiperight)': '_data.goFrom(\"order_backlog\", $event)',\n    '(swipeleft)': '_data.goFrom(\"order_backlog\", $event)'\n  }\n})\nexport class OrderBacklogMainComponent {\n\n  // Retrieve unique zones from Order Backlog State\n  @ViewSelectSnapshot(OrderBacklogState.GetUniqueZones) zones$ !: Zones;\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderBacklogState.GetPlanDate) plandate$ !: string;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    public _data: DataService,\n    private config: ConfigService,\n    private title: Title,\n    private translate: TranslateService,\n    public _obRouter: OrderBacklogRouter\n  ) {\n    this.title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_backlog'));\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { SumQuantityFn } from '@modules/order-backlog/pipes/sum-quantity.pipe';\nimport { Store } from '@ngxs/store';\nimport { BacklogColumns, NgxLineChart } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport * as moment from 'moment';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigService } from '@services/config.service';\nimport { DataService } from '@services/data.service';\nimport { map, startWith } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'order-backlog-graphic-comparison',\n  templateUrl: './graphic-comparison.component.html',\n  styleUrls: ['./graphic-comparison.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrderBacklogGraphicComparisonComponent implements OnChanges {\n\n  chart$ = new BehaviorSubject<NgxLineChart>([]);\n\n  colorScheme$: Observable<any>;\n\n  @Input() current: any[];\n  @Input() previous: any[];\n\n  constructor(\n    private _store: Store,\n    private _config: ConfigService,\n    private _data: DataService,\n    private translate: TranslateService\n  ) {\n    // Pipe the lightTheme FormControl for the correct chart colors\n    // startWith is needed because valueChanges doesn't emit until there's a change\n    this.colorScheme$ = this._data.lightTheme.valueChanges.pipe(\n      startWith(this._data.lightTheme.value),\n      map(lightTheme => {\n        const darkPalette = ['#28E8FF', '#f2142c'];\n        const lightPalette = ['#17687F', '#f2142c'];\n        return { domain: lightTheme ? lightPalette : darkPalette };\n      })\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Grab values from @Input()\n    const currentRows = changes.current.currentValue as any[];\n    const previousRows = changes.previous.currentValue as any[];\n    // Check the arrays are filled\n    if (currentRows.length > 0 && previousRows.length > 0) {\n      // Grab the date ranges for Actual and Previous from Store\n      const dateRanges = this._store.selectSnapshot(OrderBacklogState.GetDateRanges);\n      // Get the months numbers we expect to show in chart\n      const currentMonthsRange = [ ...dateRanges.actual ].sort();\n      const previousMonthsRange = [ ...dateRanges.previous ].sort();\n      // Get the rows for every month number and for actual / previous\n      const currentMonths = currentRows.reduce((r, a) => {\n        const month = a[BacklogColumns.Date].substring(0, 7);\n        r[month] = r[month] || [];\n        r[month].push(a);\n        return r;\n      }, {});\n      const previousMonths = previousRows.reduce((r, a) => {\n        const month = a[BacklogColumns.Date].substring(0, 7);\n        r[month] = r[month] || [];\n        r[month].push(a);\n        return r;\n      }, {});\n      // Create basic scheme for chart\n      const prev_year = this.translate.instant('prev_year');\n      const last_x_month = this.translate.instant('last_x_month');\n      const chart: NgxLineChart = [\n        { name: last_x_month, series: [] },\n        { name: prev_year, series: [] }\n      ];\n      let i = 0;\n      const length = currentMonthsRange.length;\n      for ( ; i < length ; i++ ) {\n        // Push current value\n        const currentMonthIndex = currentMonthsRange[i];\n        chart[0].series.push({\n          name: moment(currentMonths[currentMonthIndex][0][BacklogColumns.Date], 'YYYY-MM').toDate(),\n          value: SumQuantityFn(currentMonths[currentMonthIndex]),\n          extra: {\n            original: moment(currentMonths[currentMonthIndex][0][BacklogColumns.Date], 'YYYY-MM').toDate()\n          }\n        });\n        // Push previous value\n        const previousMonthIndex = previousMonthsRange[i];\n        let originalItem = null;\n        try {\n          originalItem = moment(previousMonths[previousMonthIndex][0][BacklogColumns.Date], 'YYYY-MM').toDate();\n        } catch (err) { }\n        chart[1].series.push({\n          name: moment(currentMonths[currentMonthIndex][0][BacklogColumns.Date], 'YYYY-MM').toDate(),\n          value: SumQuantityFn(previousMonths[previousMonthIndex]),\n          extra: {\n            original: originalItem\n          }\n        });\n      }\n      this.chart$.next(chart);\n    }\n  }\n\n  xAxisTickFormatting = value => moment(value).locale(this._config.config.language).format('MMM');\n\n  xAxisTickFormattingFn = this.xAxisTickFormatting.bind(this);\n\n}\n","<ngx-charts-line-chart\n  [scheme]=\"colorScheme$ | async\"\n  [legend]=\"true\"\n  [showXAxisLabel]=\"false\"\n  [showYAxisLabel]=\"false\"\n  [xAxis]=\"true\"\n  [yAxis]=\"true\"\n  [timeline]=\"false\"\n  [xAxisTickFormatting]=\"xAxisTickFormattingFn\"\n  legendPosition=\"below\"\n  legendTitle=\"\"\n  [results]=\"chart$ | async\">\n</ngx-charts-line-chart>","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"plantControl\">\n    <ng-container *ngFor=\"let zone of zones$ | keyvalue\">\n      <ng-container *ngLet=\"zone.value | groupOrPlantName:'zone' as zoneName\">\n        <mat-option class=\"zone\" value=\"zone|{{zone.key}}\">{{ zoneName }}</mat-option>\n      </ng-container>\n      <ng-container class=\"plant\" *ngFor=\"let plant of zone.value | plantsByZone | keyvalue\">\n        <ng-container *ngLet=\"plant.value | groupOrPlantName:'plant' as plantName\">\n          <mat-option class=\"plant\" value=\"region|{{plant.key}}\">{{ plantName }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ActivatedRoute } from '@angular/router';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { Zones } from '@other/interfaces';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'dip-plant-selector',\n  templateUrl: './plant-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PlantSelectorComponent {\n\n  // Retrieve unique zones from Order Backlog State\n  @ViewSelectSnapshot(OrderBacklogState.GetUniqueZones) zones$ !: Zones;\n\n  // FormControl for current Plant / Zone\n  plantControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  constructor(\n    private _obRouter: OrderBacklogRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.plantControl.setValue( `${params.plant}|${params.id}` ));\n    // Subcribe to selector changes and grab latest params values\n    this.plantControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      map(value => ({ type: value.split('|')[0], value: value.split('|')[1] })),\n      withLatestFrom(this.params$)\n    ).subscribe(([selected, params]) => {\n      // Detect in which level we are\n      if (params.hasOwnProperty('type')) {\n        // We are in LVL 4\n        this._obRouter.goToProductRegionView(this._ac, selected.type, selected.value, null, null, null);\n      } else if (params.hasOwnProperty('month')) {\n        // We are in LVL 3\n        this._obRouter.goToMonthView(this._ac, selected.type, selected.value, null);\n      } else {\n        // We are in LVL 3\n        this._obRouter.goToPlantZoneView(this._ac, selected.type, selected.value);\n      }\n    });\n  }\n\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { BacklogColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'distinctYears'\n})\nexport class DistinctYearsPipe implements PipeTransform {\n\n  // Retrieve rows classified by month in descending order (current is first)\n  transform(rows: KeyValue<string, any[]>[]): KeyValue<string, any[]>[] {\n    return Object.entries(rows.reduce((r, a) => {\n      const year = +moment(a[BacklogColumns.Date], 'YYYY-MM-DD').year();\n      r[year] = r[year] || [];\n      r[year].push(a);\n      return r;\n    }, {}))\n    .map(years => ({\n      key: years[0],\n      value: years[1] as any[]\n    }))\n    .reverse();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n\n  transform(array: any[]): any[] {\n    return [ ...array ].reverse();\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'monthFormat'\n})\nexport class MonthFormatPipe implements PipeTransform {\n\n  constructor(\n    private _config: ConfigService\n  ) { }\n\n  transform(date: string): string {\n    return moment(date, ['YYYY-MM-DD', 'YYYY-MM']).locale(this._config.config.language).format('MMMM YYYY');\n  }\n\n}\n","import { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { BacklogColumns } from '@other/interfaces';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'previousMonth'\n})\nexport class PreviousMonthPipe implements PipeTransform {\n\n  transform(date: string, previousYearMonths: KeyValue<string, any[]>[]): any[] {\n    // First extract month\n    const month = moment(date, 'YYYY-MM-DD').subtract(1, 'years').format('YYYY-MM');\n    // Find matching month of previous date range and get corresponding values\n    try {\n      if (previousYearMonths[0].hasOwnProperty('key')) {\n        return previousYearMonths.find(mo => mo.key.substring(0, 7) === month).value;\n      } else {\n        return previousYearMonths.find(mo => mo[BacklogColumns.Date].substring(0, 7) === month).value;\n      }\n    } catch (err) {\n      console.log('Previous month not found for date ' + date);\n      return [];\n    }\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngLet=\"rows$ | async as rows\">\n    <!-- Bindings for actual and previous date ranges -->\n    <ng-container *ngLet=\"rows | filterYear:'current' as currentYearRows\">\n      <ng-container *ngLet=\"rows | filterYear:'previous' as previousYearRows\">\n        <!-- Graphic Comparison for level 2 -->\n        <order-backlog-graphic-comparison [current]=\"currentYearRows\" [previous]=\"previousYearRows\"></order-backlog-graphic-comparison>\n        <!-- Overview -->\n        <div class=\"overview\">\n          <!-- Headers -->\n          <order-backlog-header></order-backlog-header>\n          <!-- Header Row of current select plant / zone -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate }}\"></i>\n            <div class=\"title with-selector\">\n              <dip-plant-selector></dip-plant-selector>\n            </div>\n            <!-- <ng-container *ngLet=\"rows | filterYear:'current' | sumQuantity as currentValue\">\n              <ng-container *ngLet=\"rows | filterYear:'previous' | sumQuantity as previousValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n              </ng-container>\n            </ng-container> -->\n          </div>\n          <!-- Content Rows -->\n          <ng-container *ngLet=\"rows | filterYear:'current' as currentYearRows\">\n            <ng-container *ngLet=\"rows | filterYear:'previous' | distinctMonths | keyvalue as previousYearMonths\">\n              <ng-container *ngFor=\"let year of currentYearRows | distinctYears\">\n                <!-- Year Row -->\n                <div class=\"title-header\">\n                  <div class=\"title\">{{ year.key }}</div>\n                </div>\n                <!-- Month Rows -->\n                <div class=\"lvl2-row\" (click)=\"_obRouter.goToMonthView(_ac, null, null, month.key)\" *ngFor=\"let month of year.value | distinctMonths | keyvalue | reverse\">\n                  <div class=\"title\">{{ month.key | monthFormat }}</div>\n                  <ng-container *ngLet=\"month.value | sumQuantity as currentValue\">\n                    <ng-container *ngLet=\"month.key | previousMonth:previousYearMonths | sumQuantity as previousValue\">\n                      <div class=\"actual cyan\" [innerHTML]=\"currentValue | toNumber\"></div>\n                      <div class=\"previous orange\" [innerHTML]=\"previousValue | toNumber\"></div>\n                      <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n                    </ng-container>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { TranslateService } from '@ngx-translate/core';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\n\n@Component({\n  selector: 'order-backlog-sub-lvl2',\n  templateUrl: './order-backlog-sub-lvl2.component.html',\n  styleUrls: ['./order-backlog-sub-lvl2.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_backlog\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_backlog\", $event)'\n  }\n})\nexport class OrderBacklogSubLvl2Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderBacklogState.GetPlanDate) plandate$ !: string;\n\n  // Wether or not we are on mobile view\n  mobile$: Observable<boolean>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone\n  rows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    private _breakpoints: BreakpointObserver,\n    private translate: TranslateService,\n    public _obRouter: OrderBacklogRouter\n  ) {\n    this._title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_backlog'));\n    this.mobile$ = this._breakpoints.observe(Breakpoints.HandsetPortrait).pipe( map(result => result.matches) );\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    // Grab plant and id parameter and use it to get the data\n    this.rows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id)))\n    );\n  }\n\n}\n","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"monthControl\">\n    <ng-container *ngLet=\"rows | filterYear:'current' as currentYearRows\">\n      <ng-container *ngLet=\"rows | filterYear:'previous' | distinctMonths | keyvalue as previousYearMonths\">\n        <mat-optgroup *ngFor=\"let year of currentYearRows | distinctYears\" [label]=\"year.key\">\n          <ng-container *ngFor=\"let month of year.value | distinctMonths | keyvalue | reverse\">\n            <mat-option [value]=\"month.key\">{{ month.key | monthFormat }}</mat-option>\n          </ng-container>\n        </mat-optgroup>\n      </ng-container>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'dip-month-selector',\n  templateUrl: './month-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthSelectorComponent {\n\n  // FormControl for current month\n  monthControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  @Input() rows: any[];\n\n  constructor(\n    private _obRouter: OrderBacklogRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.monthControl.setValue( params.month ));\n    // Subcribe to selector changes and grab latest params values\n    this.monthControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      withLatestFrom(this.params$)\n    ).subscribe(([month, params]: [string, any]) => {\n      // Detect in which level we are\n      if (params.hasOwnProperty('type')) {\n        // We are in LVL 4\n        this._obRouter.goToProductRegionView(this._ac, null, null, month, null, null);\n      } else {\n        // We are in LVL 3\n        this._obRouter.goToMonthView(this._ac, null, null, month);\n      }\n    });\n  }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'dip-product-region-chart',\n  templateUrl: './product-region-chart.component.html',\n  styleUrls: ['./product-region-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProductRegionChartComponent implements OnChanges {\n\n  @Input() current !: number;\n  @Input() previous: number = null;\n  @Input() maximum !: number;\n\n  maxWidth$ = new BehaviorSubject<string>('100%');\n\n  // Percents\n  actualPercent = new BehaviorSubject<number>(0);\n  // deltaPercent = new BehaviorSubject<number>(0);\n  previousPercent = new BehaviorSubject<number>(0);\n\n  // Delta offset percent\n  // deltaPosition = new BehaviorSubject<number>(0);\n\n  // Delta value\n  // deltaValue = new BehaviorSubject<number>(0);\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Grab current values\n    const current = changes.current.currentValue || 0;\n    const previous = (changes.previous && changes.previous.currentValue) || 0;\n    const maximum = changes.maximum.currentValue;\n    // Check if previous is valid\n    // If previous is not valid, only show total bar\n    let highestValue = current;\n    if (!isNaN(previous)) {\n      // Calculate highest value\n      highestValue = Math.max(current, previous);\n    }\n    this.maxWidth$.next(this.calculatePercent(maximum, highestValue) + '%');\n    const actualPercent = this.calculatePercent(highestValue, current);\n    this.actualPercent.next(actualPercent);\n    const previousPercent = this.calculatePercent(highestValue, previous);\n    this.previousPercent.next(previousPercent);\n    // const difference = current - previous;\n    // this.deltaValue.next(difference);\n    /* let deltaPercent;\n    if (difference > 0) {\n      deltaPercent = this.calculatePercent(highestValue, difference);\n    } else {\n      deltaPercent = this.calculatePercent(highestValue, previous - current);\n    } */\n    // this.deltaPercent.next(deltaPercent);\n    /* if (difference > 0) {\n      this.deltaPosition.next(previousPercent);\n    } else {\n      this.deltaPosition.next(actualPercent);\n    }*/\n  }\n\n  calculatePercent(total: number, part: number): number {\n    return + ( ( part / total ) * 100).toFixed(0);\n  }\n\n}","<div class=\"wrapper\" [style.width]=\"maxWidth$ | async\">\n  <div class=\"bar-wrapper\" [style.width.%]=\"actualPercent | async | startWith:0 | async\">\n    <div class=\"bar actual\"></div>\n  </div>\n  <!-- No delta bar for this moment -->\n  <!-- <ng-container *ngLet=\"deltaValue | async as value\">\n    <div class=\"bar-wrapper\" [style.left.%]=\"deltaPosition | async | startWith:0 | async\" [style.width.%]=\"deltaPercent | async | startWith:0 | async\">\n      <div class=\"bar delta\" [class.neutral]=\"value === 0\" [class.positive]=\"value > 0\" [class.negative]=\"value < 0\">\n        <div class=\"relative\">\n          <div class=\"value\">{{ value | abs }}</div>\n        </div>\n      </div>\n    </div>\n  </ng-container> -->\n  <div class=\"bar-wrapper\" [style.width.%]=\"previousPercent | async | startWith:0 | async\">\n    <div class=\"bar previous\"></div>\n  </div>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BacklogColumns, ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'distinctItems'\n})\nexport class DistinctItemsPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguageHuman) language: ILanguage;\n\n  transform(rows: any[], type: 'region' | 'product', compareItems: any = null): any {\n    if (!rows || rows.length === 0) {\n      return {};\n    }\n    const column = type === 'region' ? BacklogColumns[`Region${this.language}`] : BacklogColumns[`Product${this.language}`];\n    const uniques = rows.reduce((r, a) => {\n      r[a[column]] = r[a[column]] || [];\n      r[a[column]].push(a);\n      return r;\n    }, {});\n    if (compareItems) {\n      // If compare object is specified, crossjoin distinct items keys\n      for (const key in compareItems) {\n        if (compareItems[key]) {\n          uniques[key] = uniques[key] || [];\n        }\n      }\n    }\n    return uniques;\n  }\n\n}","import { SumQuantityFn } from '@modules/order-backlog/pipes/sum-quantity.pipe';\nimport { KeyValue } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'max'\n})\nexport class MaxPipe implements PipeTransform {\n\n  transform(currentValues: KeyValue<string, any[]>[], previousValues: KeyValue<string, any[]>[]): number {\n    let highestCurrent = 0;\n    let highestPrevious = 0;\n    // Get maximum value of current items\n    if (currentValues && currentValues.length > 0) {\n      const numbers = currentValues.map(value => SumQuantityFn(value.value)).filter(num => !isNaN(num));\n      highestCurrent = Math.max(...numbers);\n    }\n    // Get maximum value of previous items\n    if (previousValues && previousValues.length > 0) {\n      const numbers = previousValues.map(value => SumQuantityFn(value.value)).filter(num => !isNaN(num));\n      highestPrevious = Math.max(...numbers);\n    }\n    // Get total highest^\n    return Math.max(highestCurrent, highestPrevious);\n  }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'default'\n})\nexport class DefaultPipe implements PipeTransform {\n\n  transform(value: any, def: any): any {\n    return value || def;\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngLet=\"rows$ | async as rows\">\n    <!-- Overview -->\n    <div class=\"overview\" *ngLet=\"plantOrZoneRows$ | async as plantOrZoneRows\">\n      <!-- Headers -->\n      <order-backlog-header></order-backlog-header>\n      <ng-container *ngLet=\"params.month | previousMonth:(plantOrZoneRows | distinctMonths | keyvalue) as previousMonthRows\">\n        <div class=\"header-rows\">\n          <!-- Header Row of current select plant / zone -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate }}\"></i>\n            <div class=\"title with-selector\">\n              <dip-plant-selector></dip-plant-selector>\n            </div>\n            <!-- <ng-container *ngLet=\"rows | filterYear:'current' | sumQuantity as currentValue\">\n              <ng-container *ngLet=\"rows | filterYear:'previous' | sumQuantity as previousValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                <div class=\"delta\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n              </ng-container>\n            </ng-container> -->\n          </div>\n          <!-- Header Row of current selected month -->\n          <div class=\"header-row zone\">\n            <i class=\"arrow\" (click)=\"_obRouter.goToPlantZoneView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.month' | translate }}\"></i>\n            <div class=\"title with-selector\">\n              <dip-month-selector [rows]=\"plantOrZoneRows\"></dip-month-selector>\n            </div>\n            <ng-container *ngLet=\"rows | sumQuantity as currentValue\">\n              <ng-container *ngLet=\"previousMonthRows | sumQuantity as previousValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n              </ng-container>\n            </ng-container>\n          </div>\n        </div>\n        <!-- Content Rows -->\n        <div class=\"title-header\">\n          <div class=\"title\">{{ 'cities' | translate }}</div>\n        </div>\n        <!-- Region rows -->\n        <ng-container *ngLet=\"previousMonthRows | distinctItems:'region' as previousRegions\">\n          <!-- Iterate over each region -->\n          <ng-container *ngLet=\"rows | distinctItems:'region':previousRegions | keyvalue as regions\">\n            <ng-container *ngLet=\"regions | max:(previousRegions | keyvalue) as maximum\">\n              <div class=\"lvl3-row\" (click)=\"_obRouter.goToProductRegionView(_ac, null, null, null, 'region', region.key)\" *ngFor=\"let region of regions\">\n                <div class=\"title\">{{ region.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"region.value | sumQuantity as currentValue\">\n                  <!-- Bind and check previous value, it can be not found in some cases! -->\n                  <ng-container *ngIf=\"previousRegions[region.key] | default:[] as previousRegion; else dummyPrevious\">\n                    <ng-container *ngLet=\"previousRegion | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 3 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n                <!-- Template for when a region title is not found in a previous month -->\n                <ng-template #dummyPrevious>\n                  <div class=\"previous orange\">-</div>\n                  <div class=\"delta grey\">-</div>\n                </ng-template>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <div class=\"title-header\">\n          <div class=\"title\">{{ 'companies' | translate }}</div>\n        </div>\n        <!-- Product rows -->\n        <ng-container *ngLet=\"previousMonthRows | distinctItems:'product' as previousProducts\">\n          <!-- Iterate over each product -->\n          <ng-container *ngLet=\"rows | distinctItems:'product':previousProducts | keyvalue as products\">\n            <ng-container *ngLet=\"products | max:(previousProducts | keyvalue) as maximum\">\n              <div class=\"lvl3-row\" (click)=\"_obRouter.goToProductRegionView(_ac, null, null, null, 'product', product.key)\" *ngFor=\"let product of products\">\n                <div class=\"title\">{{ product.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"product.value | sumQuantity as currentValue\">\n                  <ng-container *ngLet=\"previousProducts[product.key] | default:[] as previousProduct\">\n                    <ng-container *ngLet=\"previousProduct | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 3 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-container>\n<!-- Template for LVL 3 Rows -->\n<ng-template #responsiveRow let-current=\"current\" let-previous=\"previous\" let-maximum=\"maximum\">\n  <!-- Check mobile view-->\n  <ng-container *ngIf=\"_data.mobile$ | async; then mobileRow else desktopRow\"></ng-container>\n  <!-- Template for mobile-tabletPortrait -->\n  <ng-template #mobileRow>\n    <ng-container *ngTemplateOutlet=\"lvl3Row; context: { current: current, previous: previous }\"></ng-container>\n    <!-- Bind numbers template -->\n    <dip-product-region-chart class=\"mobile\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n  </ng-template>\n  <!-- Template for TabletLandscape-Desktop -->\n  <ng-template #desktopRow>\n    <dip-product-region-chart class=\"desktop\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n    <!-- Bind numbers template -->\n    <ng-container *ngTemplateOutlet=\"lvl3Row; context: { current: current, previous: previous }\"></ng-container>\n  </ng-template>\n</ng-template>\n<!-- Template used in every row to show the numbers -->\n<ng-template #lvl3Row let-current=\"current\" let-previous=\"previous\">\n  <div class=\"actual cyan\" [innerHTML]=\"current | toNumber\"></div>\n  <div class=\"previous orange\" [innerHTML]=\"previous | toNumber\"></div>\n  <div class=\"delta grey\" [innerHTML]=\"previous | difference:current\"></div>\n</ng-template>","import { DataService } from '@services/data.service';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { TranslateService } from '@ngx-translate/core';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\n\n@Component({\n  selector: 'order-backlog-sub-lvl3',\n  templateUrl: './order-backlog-sub-lvl3.component.html',\n  styleUrls: ['./order-backlog-sub-lvl3.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_backlog\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_backlog\", $event)'\n  }\n})\nexport class OrderBacklogSubLvl3Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderBacklogState.GetPlanDate) plandate$ !: string;\n\n  // Rows used for higher totals\n  plantOrZoneRows$: Observable<any[]>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone and month\n  rows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    public _data: DataService,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    private translate: TranslateService,\n    public _obRouter: OrderBacklogRouter\n  ) {\n    this._title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_backlog'));\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    this.plantOrZoneRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id)))\n    );\n    // Grab plant, id and month parameter and use it to get the current month data\n    this.rows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, params.month)))\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Pipe({\n  name: 'productRegionLabelFormat'\n})\nexport class ProductRegionLabelFormatPipe implements PipeTransform {\n\n  constructor(\n    private _data: DataService\n  ) { }\n\n  transform(value: string): Observable<string> {\n    value = value.split('|')[1];\n    return this._data.mobile$.pipe(\n      map(mobile => {\n        if (mobile) {\n          return value.length > 10 ? value.substring(0, 14) + '...' : value;\n        } else {\n          return value;\n        }\n      })\n    );\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'joinArrays'\n})\nexport class JoinArraysPipe implements PipeTransform {\n\n  transform(): any[] {\n    const arrays = [];\n    for (let i = 0; i < arguments.length; i++) {\n      arrays.push(arguments[i] || []);\n    }\n    return arrays.flat();\n  }\n\n}\n","<mat-form-field>\n  <mat-select panelClass=\"plant-select-panel\" [formControl]=\"regionProductControl\">\n    <mat-select-trigger>\n      <span class=\"mat-select-value-custom\">{{ regionProductControl.value | productRegionLabelFormat | async }}</span>\n    </mat-select-trigger>\n    <ng-container *ngLet=\"rows | joinArrays:previousRows as allRows\">\n      <mat-optgroup label=\"REGIONS\">\n        <ng-container *ngFor=\"let region of allRows | distinctItems:'region' | keyvalue\">\n          <mat-option value=\"region|{{region.key}}\">{{ region.key }}</mat-option>\n        </ng-container>\n      </mat-optgroup>\n      <mat-optgroup label=\"PRODUCTS\">\n        <ng-container *ngFor=\"let product of allRows | distinctItems:'product' | keyvalue\">\n          <mat-option value=\"product|{{product.key}}\">{{ product.key }}</mat-option>\n        </ng-container>\n      </mat-optgroup>\n    </ng-container>\n  </mat-select>\n</mat-form-field>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\nimport { RegionOrProduct } from '@other/interfaces';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'dip-product-region-selector',\n  templateUrl: './product-region-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProductRegionSelectorComponent {\n\n  // FormControl for current Region / Product\n  regionProductControl = new FormControl('');\n\n  params$: Observable<any>;\n\n  constructor(\n    private _obRouter: OrderBacklogRouter,\n    private _ac: ActivatedRoute\n  ) {\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap\n    .pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {} as any))\n    );\n    this.params$.subscribe(params => this.regionProductControl.setValue( `${params.type}|${params.value}` ));\n    // Subcribe to selector changes and grab latest params values\n    this.regionProductControl.valueChanges.pipe(\n      distinctUntilChanged(),\n      map(value => ({ type: value.split('|')[0], value: value.split('|')[1] }))\n    ).subscribe(selected => {\n      // We are in LVL 4\n      this._obRouter.goToProductRegionView(this._ac, null, null, null, selected.type as RegionOrProduct, selected.value);\n    });\n  }\n\n  @Input() rows: any[];\n  @Input() previousRows: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { BacklogColumns } from '@other/interfaces';\n\n@Pipe({\n  name: 'mockMissingPreviousRows'\n})\nexport class MockMissingPreviousRowsPipe implements PipeTransform {\n\n  /**\n   * This is a pipe which takes the current result of reduced items and the result of previous reduced items,\n   * and compares them to add the missing keys in current from the previous, mocking the row value\n   */\n  transform(current: any, previous: any): any {\n    for (const key in previous) {\n      if (previous[key] && !current.hasOwnProperty(key)) {\n        // Mock rows with non value\n        current[key] = previous[key].map(row => {\n          return {\n            ...row,\n            [BacklogColumns.Quantity]: ''\n          };\n        });\n      }\n    }\n    return current;\n  }\n\n}\n","<!-- Binding for params -->\n<ng-container *ngLet=\"params$ | async as params\">\n  <!-- Binding for rows -->\n  <ng-container *ngLet=\"rows$ | async as rows\">\n    <!-- Overview -->\n    <div class=\"overview\" *ngLet=\"plantOrZoneRows$ | async as plantOrZoneRows\">\n      <!-- Headers -->\n      <order-backlog-header type=\"day\"></order-backlog-header>\n      <div class=\"header-rows\">\n        <!-- Header Row of currented select plant / zone -->\n        <div class=\"header-row zone\">\n          <i class=\"arrow\" (click)=\"_obRouter.goToMainView()\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate }}\"></i>\n          <div class=\"title with-selector\">\n            <dip-plant-selector></dip-plant-selector>\n          </div>\n          <!-- <ng-container *ngLet=\"plantOrZoneRows | filterYear:'current' | sumQuantity as currentValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <ng-container *ngLet=\"plantOrZoneRows | filterYear:'previous' | sumQuantity as previousValue\">\n              <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n              <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n            </ng-container>\n          </ng-container> -->\n        </div>\n        <ng-container *ngLet=\"plantOrZoneRows | distinctMonths as currentDistinctMonths\">\n          <ng-container *ngLet=\"previousMonthRows$ | async as previousMonthRows\">\n            <!-- Header Row of current selected month -->\n            <div class=\"header-row zone\">\n              <i class=\"arrow\" (click)=\"_obRouter.goToPlantZoneView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.month' | translate }}\"></i>\n              <div class=\"title with-selector\">\n                <dip-month-selector [rows]=\"plantOrZoneRows\"></dip-month-selector>\n              </div>\n              <ng-container *ngLet=\"currentDistinctMonths[params.month] | sumQuantity as currentValue\">\n                <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n                <ng-container *ngLet=\"previousMonthRows | sumQuantity as previousValue\">\n                  <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n                  <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n                </ng-container>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n        <!-- Header Row of current selected product / region -->\n        <div class=\"header-row zone\">\n          <i class=\"arrow\" (click)=\"_obRouter.goToMonthView(_ac)\" matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.cities' | translate }}\"></i>\n          <div class=\"title with-selector\">\n            <dip-product-region-selector [rows]=\"monthRows$ | async\" [previousRows]=\"previousRows$ | async\"></dip-product-region-selector>\n          </div>\n          <ng-container *ngLet=\"rows | sumQuantity as currentValue\">\n            <div class=\"actual\" [innerHTML]=\"currentValue | toNumber\"></div>\n            <ng-container *ngIf=\"previousRows$ | async | sumQuantity as previousValue; else dummyPrevious\">\n              <div class=\"previous\" [innerHTML]=\"previousValue | toNumber\"></div>\n              <div class=\"delta grey\" [innerHTML]=\"previousValue | difference:currentValue\"></div>\n            </ng-container>\n            <!-- Template for when a region title is not found in a previous month -->\n            <ng-template #dummyPrevious>\n              <div class=\"previous orange\">-</div>\n              <div class=\"delta grey\">-</div>\n            </ng-template>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Content Rows -->\n      <div class=\"title-header\">\n        <ng-container *ngIf=\"params.type === 'region'; else regionsTitle\">\n          <div class=\"title\">{{ 'companies' | translate }}</div>\n        </ng-container>\n        <ng-template #regionsTitle>\n          <div class=\"title\">{{ 'cities' | translate }}</div>\n        </ng-template>\n      </div>\n      <!-- Opposite param type -->\n      <ng-container *ngLet=\"params.type === 'region' ? 'product' : 'region' as oppositeType\">\n        <!-- Items rows -->\n        <ng-container *ngLet=\"previousRows$ | async | distinctItems:oppositeType as previousRegions\">\n          <ng-container *ngLet=\"rows | distinctItems:oppositeType:previousRegions | mockMissingPreviousRows:previousRegions | keyvalue as items\">\n            <ng-container *ngLet=\"items | max:(previousRegions | keyvalue) as maximum\">\n              <!-- Iterate over each region -->\n              <div class=\"lvl4-row\" (click)=\"goItem(oppositeType, item.key)\" *ngFor=\"let item of items\">\n                <div class=\"title\">{{ item.key }}</div>\n                <!-- Bind current and previous value, previous can be not found in some cases! -->\n                <ng-container *ngLet=\"item.value | sumQuantity as currentValue\">\n                  <ng-container *ngLet=\"previousRegions[item.key] | default:[] as previousRegion\">\n                    <ng-container *ngLet=\"previousRegion | sumQuantity as previousValue\">\n                      <!-- Bind template of LVL 4 Row -->\n                      <ng-container *ngTemplateOutlet=\"responsiveRow; context: { current: currentValue, previous: previousValue, maximum: maximum }\"></ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-container>\n<!-- Template for LVL 4 Rows -->\n<ng-template #responsiveRow let-current=\"current\" let-previous=\"previous\" let-maximum=\"maximum\">\n  <!-- Check mobile view-->\n  <ng-container *ngIf=\"_data.mobile$ | async; then mobileRow else desktopRow\"></ng-container>\n  <!-- Template for mobile-tabletPortrait -->\n  <ng-template #mobileRow>\n    <ng-container *ngTemplateOutlet=\"lvl4Row; context: { current: current, previous: previous }\"></ng-container>\n    <!-- Bind numbers template -->\n    <dip-product-region-chart class=\"mobile\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n  </ng-template>\n  <!-- Template for TabletLandscape-Desktop -->\n  <ng-template #desktopRow>\n    <dip-product-region-chart class=\"desktop\" [current]=\"current\" [previous]=\"previous\" [maximum]=\"maximum\"></dip-product-region-chart>\n    <!-- Bind numbers template -->\n    <ng-container *ngTemplateOutlet=\"lvl4Row; context: { current: current, previous: previous }\"></ng-container>\n  </ng-template>\n</ng-template>\n<!-- Template used in every row to show the numbers -->\n<ng-template #lvl4Row let-current=\"current\" let-previous=\"previous\">\n  <div class=\"actual cyan\" [innerHTML]=\"current | toNumber\"></div>\n  <div class=\"previous orange\" [innerHTML]=\"previous | toNumber\"></div>\n  <div class=\"delta grey\" [innerHTML]=\"previous | difference:current\"></div>\n</ng-template>","import { DataService } from '@services/data.service';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { OrderBacklogState } from '@store/order-backlog.state';\nimport { ViewSelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { GetPreviousMonth } from '@other/functions';\nimport { RegionOrProduct } from '@other/interfaces';\nimport { CustomSelectors } from '@other/custom-selectors';\nimport { TranslateService } from '@ngx-translate/core';\nimport { OrderBacklogRouter } from '@modules/order-backlog/services/order-backlog-router.service';\n\n@Component({\n  selector: 'order-backlog-sub-lvl4',\n  templateUrl: './order-backlog-sub-lvl4.component.html',\n  styleUrls: ['./order-backlog-sub-lvl4.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_backlog\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_backlog\", $event)'\n  }\n})\nexport class OrderBacklogSubLvl4Component {\n\n  // Retrieve plan date\n  @ViewSelectSnapshot(OrderBacklogState.GetPlanDate) plandate$ !: string;\n\n  // Wether or not we are on mobile view\n  mobile$: Observable<boolean>;\n  // Rows used for highest total\n  plantOrZoneRows$: Observable<any[]>;\n  // Rows used for month total\n  monthRows$: Observable<any[]>;\n  // Rows used for month previous total\n  previousMonthRows$: Observable<any[]>;\n  // All params comming from URL\n  params$: Observable<any>;\n  // All rows for the selected plant / zone and month\n  rows$: Observable<any[]>;\n  // All rows for the selected plant / zone and previous month\n  previousRows$: Observable<any[]>;\n\n  constructor(\n    public _ac: ActivatedRoute,\n    private config: ConfigService,\n    private _title: Title,\n    private _store: Store,\n    private _breakpoints: BreakpointObserver,\n    public _obRouter: OrderBacklogRouter,\n    private translate: TranslateService,\n    public _data: DataService\n  ) {\n    this._title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_backlog'));\n    this.mobile$ = this._breakpoints.observe(Breakpoints.HandsetPortrait).pipe( map(result => result.matches) );\n    // Grab all params from URL\n    this.params$ = this._ac.paramMap.pipe(\n      map(params => params.keys.reduce((r, a) => (r[a] = params.get(a), r), {}))\n    );\n    // Get the total plant rows\n    this.plantOrZoneRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetZoneOrPlantRows(params.plant, params.id)))\n    );\n    // Get the total month rows\n    this.monthRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, params.month)))\n    );\n    // Get the total previous month rows\n    this.previousMonthRows$ = this.params$.pipe(\n      switchMap(params => this._store.select(CustomSelectors.GetMonthRows(params.plant, params.id, GetPreviousMonth(params.month))))\n    );\n    // Get the the rows for the current selected region or product\n    this.rows$ = this.params$.pipe(\n      // tslint:disable-next-line: max-line-length\n      switchMap(params => this._store.select(CustomSelectors.GetRegionOrProductRows(params.plant, params.id, params.month, params.type, params.value)))\n    );\n    // Get the the rows for the previous selected region or product\n    this.previousRows$ = this.params$.pipe(\n      // tslint:disable-next-line: max-line-length\n      switchMap(params => this._store.select(CustomSelectors.GetRegionOrProductRows(params.plant, params.id, GetPreviousMonth(params.month), params.type, params.value)))\n    );\n  }\n\n  goItem(type: RegionOrProduct, item: string): void {\n    this._obRouter.goToProductRegionView(this._ac, null, null, null, type, item);\n  }\n\n}\n","import { MaxPipe } from './pipes/max.pipe';\nimport { DefaultPipe } from './pipes/default.pipe';\nimport { AbsPipe } from './pipes/abs.pipe';\nimport { ProductRegionChartComponent } from './components/product-region-chart/product-region-chart.component';\nimport { ProductRegionLabelFormatPipe } from './pipes/product-region-label-format.pipe';\nimport { MonthSelectorComponent } from './components/selectors/month-selector/month-selector.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { OrderBacklogWrapperComponent } from './components/wrapper/wrapper.component';\nimport { OrderBacklogMainComponent } from './components/order-backlog-main/order-backlog-main.component';\nimport { GroupOrPlantNamePipe } from './pipes/group-or-plant-name.pipe';\nimport { FilterYearPipe } from './pipes/filter-year.pipe';\nimport { SumQuantityPipe } from './pipes/sum-quantity.pipe';\nimport { PlantsByZonePipe } from './pipes/plants-by-zone.pipe';\nimport { LetDirective } from './directives/ng-let.directive';\nimport { OrderBacklogGraphicComponent } from './components/graphic/graphic.component';\nimport { PercentPipe } from './pipes/percent.pipe';\nimport { HighestZoneTotalPipe } from './pipes/highest-zone-total.pipe';\nimport { DifferencePipe } from './pipes/difference.pipe';\nimport { StartWithPipe } from './pipes/start-with.pipe';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { OrderBacklogSubLvl2Component } from './components/order-backlog-sub-lvl2/order-backlog-sub-lvl2.component';\nimport { DistinctMonthsPipe } from './pipes/distinct-months.pipe';\nimport { MonthFormatPipe } from './pipes/month-format.pipe';\nimport { DistinctYearsPipe } from './pipes/distinct-years.pipe';\nimport { PreviousMonthPipe } from './pipes/previous-month.pipe';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { OrderBacklogGraphicComparisonComponent } from './components/graphic-comparison/graphic-comparison.component';\nimport { OrderBacklogSubLvl3Component } from './components/order-backlog-sub-lvl3/order-backlog-sub-lvl3.component';\nimport { OrderBacklogSubLvl4Component } from './components/order-backlog-sub-lvl4/order-backlog-sub-lvl4.component';\nimport { ReversePipe } from './pipes/reverse.pipe';\nimport { DistinctItemsPipe } from './pipes/distinct-items.pipe';\nimport { OrderBacklogRouter } from './services/order-backlog-router.service';\nimport { OrderBacklogHeaderComponent } from './components/order-backlog-header/order-backlog-header.component';\nimport { FormatLatestDayPipe } from './pipes/format-latest-day.pipe';\nimport { FilterDayPipe } from './pipes/filter-day.pipe';\nimport { PlantSelectorComponent } from './components/selectors/plant-selector/plant-selector.component';\nimport { ProductRegionSelectorComponent } from './components/selectors/product-region-selector/product-region-selector.component';\nimport { JoinArraysPipe } from './pipes/join-arrays.pipe';\nimport { MockMissingPreviousRowsPipe } from './pipes/mock-missing-previous-rows.pipe';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrderBacklogWrapperComponent,\n    children: [\n      {\n        path: '',\n        component: OrderBacklogMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant/:id',\n        component: OrderBacklogSubLvl2Component,\n        data: { level: 2 }\n      },\n      {\n        path: ':plant/:id/month/:month',\n        component: OrderBacklogSubLvl3Component,\n        data: { level: 3 }\n      },\n      {\n        path: ':plant/:id/month/:month/:type/:value',\n        component: OrderBacklogSubLvl4Component,\n        data: { level: 4 }\n      }\n    ]\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    LayoutModule,\n    NgxChartsModule,\n    SharedModule\n  ],\n  declarations: [\n    // Components\n    OrderBacklogWrapperComponent,\n    OrderBacklogMainComponent,\n    OrderBacklogGraphicComponent,\n    OrderBacklogSubLvl2Component,\n    OrderBacklogSubLvl3Component,\n    OrderBacklogSubLvl4Component,\n    OrderBacklogGraphicComparisonComponent,\n    OrderBacklogHeaderComponent,\n    ProductRegionChartComponent,\n    // Selectors\n    PlantSelectorComponent,\n    MonthSelectorComponent,\n    ProductRegionSelectorComponent,\n    // Pipes\n    GroupOrPlantNamePipe,\n    FilterYearPipe,\n    SumQuantityPipe,\n    PlantsByZonePipe,\n    LetDirective,\n    PercentPipe,\n    HighestZoneTotalPipe,\n    DifferencePipe,\n    StartWithPipe,\n    DistinctMonthsPipe,\n    MonthFormatPipe,\n    DistinctYearsPipe,\n    PreviousMonthPipe,\n    DistinctItemsPipe,\n    ReversePipe,\n    FormatLatestDayPipe,\n    FilterDayPipe,\n    ProductRegionLabelFormatPipe,\n    AbsPipe,\n    DefaultPipe,\n    MaxPipe,\n    JoinArraysPipe,\n    MockMissingPreviousRowsPipe\n  ],\n  providers: [\n    OrderBacklogRouter\n  ]\n})\nexport class OrderBacklogModule {}\n"]}