{"version":3,"file":"469.f8402ea0a3c2a9c8.js","mappings":"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","names":["swipeAnimation","trigger","transition","query","style","overflow","optional","group","transform","animate","left","i0","ctx_r6","oxw","GraphicComponent","constructor","_data","config","router","route","this","window","oi_graphic","ngOnChanges","changes","zoneKeys","zones","data","currentValue","reduce","r","a","push","zone","title","reports","trucks","columns","orderIntake","groupName","language","actual","parseInt","sumByIndex","previous","rows","classifyByIndex","orderIntakeData","tActual","maxTotal","percent1","percent2","percentActual","toString","toFixed","percentPrevious","Object","keys","barsWidth","length","setTimeout","ready","goZone","ZoneID","navigate","relativeTo","replaceUrl","selectors","opacity","stagger","ctx_r3","ctx_r8","ctx_r10","OrderIntakeMainComponent","api","translate","moment","setTitle","appTitle","instant","ngOnInit","getSavedReportData","ReportTypes","subscribe","res","plandate","getPlanDateWithMoment","rollupData","rowGroups","rowPlants","rowKeys","getPlantsByZone","lastTap","type","general_route","key","main_route","queryParamsHandling","goPlant","PlantID","second_level_route","recoverLvl2","ctx","$event","ctx_r5","ctx_r7","ctx_r13","OrderIntakeSubLvl2Component","activatedRoute","params","C","id","err","zoneRows","groupKey","plantRows","plantKey","groupInfo","rowsPlain","zoneID","plantID","totalActual","totalPrevious","zoneTitle","plantTitle","plantName","zoneActual","zonePrevious","plantActual","plantPrevious","regions","region","products","product","regionKeys","productKeys","progressValue1","progressValue2","progress1","percent","progress2","part","total","return","forward","lastTap2","sub_route_a","sub_route_b","goProduct","ProductID","encodeURI","goRegion","RegionID","OrderIntakeWrapperComponent","getLevel","currentLevel","outlet","activatedRouteData","level","ctx_r11","ctx_r19","OrderIntakeSubLvl3Component","paramMap","get","decodeURI","goAnother","subRows","thisActual","thisPrevious","sub3rows","groupKeys","returnToMain","routes","path","component","children","OrderIntakeModule","CommonModule","RouterModule","SharedModule","value","sign","comma","ToNumberFn","isNaN","ultimate","Math","round","t","abs","toLocaleString","s","replace","NumberPipe","pure","__decorate","SelectSnapshot","ConfigState"],"sourceRoot":"webpack:///","sources":["./src/app/app.transitions.ts","./src/app/modules/order-intake/components/graphic/graphic.component.html","./src/app/modules/order-intake/components/graphic/graphic.component.ts","./src/app/modules/order-intake/components/order-intake-main/order-intake-main.component.html","./src/app/modules/order-intake/components/order-intake-main/order-intake-main.component.ts","./src/app/modules/order-intake/components/order-intake-sub-lvl2/order-intake-sub-lvl2.component.html","./src/app/modules/order-intake/components/order-intake-sub-lvl2/order-intake-sub-lvl2.component.ts","./src/app/modules/order-intake/components/wrapper/wrapper.component.ts","./src/app/modules/order-intake/components/wrapper/wrapper.component.html","./src/app/modules/order-intake/components/order-intake-sub-lvl3/order-intake-sub-lvl3.component.html","./src/app/modules/order-intake/components/order-intake-sub-lvl3/order-intake-sub-lvl3.component.ts","./src/app/modules/order-intake/order-intake.module.ts","./src/app/pipes/number.pipe.ts"],"sourcesContent":["import { trigger, transition, query, style, group, animate } from '@angular/animations';\n\nexport const swipeAnimation =  trigger('routerTransition', [\n    transition(':increment', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n    transition(':decrement', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ left: 0, transform: 'translateX(100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n  ])","<div class=\"wrapper\" [@list]=\"zoneKeys.length\">\n  <div class=\"zone\" (click)=\"goZone(zoneKey)\" *ngFor=\"let zoneKey of zoneKeys\" [style.width.%]=\"barsWidth\">\n    <div class=\"bars\">\n      <div style=\"position: relative; height: 100%;\">\n        <div [ngClass]=\"{zero: !ready}\" class=\"actual\" [style.height.%]=\"zones[zoneKey].percentActual\">\n          <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ (_data.sumByIndex(rows[zoneKey], 12) | toNumber) }}</div>\n        </div>\n        <div [ngClass]=\"{zero: !ready}\" class=\"previous\" [style.height.%]=\"zones[zoneKey].percentPrevious\">\n          <div class=\"value\" *ngIf=\"!(_data.mobile$ | async)\">{{ (_data.sumByIndex(rows[zoneKey], 13) | toNumber) }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"title\">{{ zones[zoneKey].title }}</div>\n  </div>\n</div>","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { ConfigService } from '@services/config.service';\nimport { trigger, transition, query, stagger, style, animate } from '@angular/animations';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'order-intake-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ]\n})\nexport class GraphicComponent implements OnChanges {\n\n  constructor(\n    public _data: DataService,\n    private config: ConfigService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    (window as any).oi_graphic = this;\n  }\n\n  ready: boolean = false\n\n  @Input() data: any[][]\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.zoneKeys = []\n    let zones = changes.data.currentValue.reduce((r, a) => {\n      r[a[0]] = r[a[0]] || []\n      r[a[0]].push(a)\n      return r\n    }, {})\n    for (var zone in zones) {\n      this.zones[zone] = {\n        title: zones[zone][0][this.config.config.reports.trucks.columns.orderIntake.groupName[this.config.config.language]],\n        actual: parseInt(this._data.sumByIndex(zones[zone], 12)),\n        previous: parseInt(this._data.sumByIndex(zones[zone], 13)),\n      }\n    }\n    this.rows = this._data.classifyByIndex(this._data.orderIntakeData, 0)\n    let tActual = 0\n    for (var zone in this.zones) {\n      if (this.zones[zone].actual > tActual) tActual = this.zones[zone].actual\n      if (this.zones[zone].previous > tActual) tActual = this.zones[zone].previous\n    }\n    this.maxTotal = tActual\n    for (var zone in this.zones) {\n      let percent1 = (this.zones[zone].actual * 100) / tActual\n      let percent2 = (this.zones[zone].previous * 100) / tActual\n      this.zones[zone].percentActual = (parseInt(percent1.toString()) == 0 ? 1 : percent1).toFixed(0)\n      this.zones[zone].percentPrevious = (parseInt(percent2.toString()) == 0 ? 1 : percent2).toFixed(0)\n    }\n    this.zoneKeys = Object.keys(this.zones)\n    this.barsWidth = 100 / Object.keys(this.zones).length\n    setTimeout(() => this.ready = true, 300)\n  }\n\n  goZone(ZoneID): void {\n    this.router.navigate(['zone', ZoneID], { relativeTo: this.route, replaceUrl: true })\n  }\n\n  rows: any[][] = []\n\n  zones: any = {}\n  zoneKeys: string[] = []\n\n  maxTotal: number = 0\n\n  barsWidth: number = 0\n\n}\n","<div class=\"report-header\">\n  <div class=\"data-header\">\n    <div class=\"empty\"></div>\n    <div class=\"report-date\">{{ plandate }}</div>\n    <div class=\"glyph\">&Oslash;</div>\n  </div>\n  <div class=\"overview\">\n    <div class=\"graphic\">\n      <order-intake-graphic [data]=\"data.orderIntakeData\"></order-intake-graphic>\n    </div>\n    <div class=\"simple\">\n      <div (click)=\"goZone(rowGroups[key][0][0])\" class=\"overview-group\" *ngFor=\"let key of rowKeys\">\n        <div class=\"empty\">{{\n          rowGroups[key][0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]] }}</div>\n        <div class=\"actual\">{{ data.sumByIndex(rowGroups[key], 12) | toNumber }}</div>\n        <div class=\"previous\">{{ data.sumByIndex(rowGroups[key], 13) | toNumber }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"wrapper\" [@list]=\"rowKeys?.length\">\n  <div class=\"zone\" *ngFor=\"let key of rowKeys\">\n    <div class=\"zone-header\" (click)=\"goZone(key)\">\n      <div class=\"title\">{{\n        rowGroups[key][0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]] }}</div>\n      <div matTooltipPosition=\"after\" matTooltipClass=\"after\" [matTooltip]=\"data.sumByIndex(rowGroups[key], 12) - data.sumByIndex(rowGroups[key], 13) | toNumber:true\"\n        class=\"actual\">{{ data.sumByIndex(rowGroups[key], 12) | toNumber }}</div>\n      <div class=\"previous\">{{ data.sumByIndex(rowGroups[key], 13) | toNumber }}</div>\n    </div>\n    <div class=\"plant\" (click)=\"goPlant(PlantID)\" *ngFor=\"let PlantID of getPlantsByZone(key)\">\n      <div class=\"title\">{{\n        rowPlants[PlantID][0][[config.config.reports.trucks.columns.orderIntake.plantName[config.config.language]]]}}</div>\n      <div matTooltipPosition=\"after\" matTooltipClass=\"after\" [matTooltip]=\"data.sumByIndex(rowPlants[PlantID], 12) - data.sumByIndex(rowPlants[PlantID], 13) | toNumber:true\"\n        class=\"actual\">{{ data.sumByIndex(rowPlants[PlantID], 12) | toNumber }}</div>\n      <div class=\"previous\">{{ data.sumByIndex(rowPlants[PlantID], 13) | toNumber }}</div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport { Router } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport * as moment from 'moment';\nimport { ReportTypes } from '@other/interfaces';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getPlanDateWithMoment } from '@other/functions';\n\n@Component({\n  selector: 'order-intake-main',\n  templateUrl: './order-intake-main.component.html',\n  styleUrls: ['./order-intake-main.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query('.zone:enter', style({ opacity: 0 }), { optional: true }),\n        query('.zone:enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ],\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_intake\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_intake\", $event)'\n  }\n})\nexport class OrderIntakeMainComponent implements OnInit {\n\n  constructor(\n    public data: DataService,\n    private api: ApiService,\n    private config: ConfigService,\n    private router: Router,\n    private title: Title,\n    private translate: TranslateService\n  ) {\n    (window as any).moment = moment\n    this.title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_intake'))\n  }\n\n  ready: boolean = false\n\n  // Names of the routes for each level\n  main_route: string = 'activity'\n  general_route: string = 'zone'\n  second_level_route: string = 'region'\n\n  plandate: string = ''\n\n  ngOnInit() {\n    // If no Order Intake rows were found, get them\n    if (this.data.orderIntakeData.length === 0) {\n      this.api.getSavedReportData(ReportTypes.OrderIntake).subscribe(res => {\n        this.plandate = getPlanDateWithMoment(res[0][11], moment, true);\n        this.data.orderIntakeData = res;\n        (window as any).orderIntake = res;\n        this.rollupData()\n      })\n    } else {\n      this.plandate = getPlanDateWithMoment(this.data.orderIntakeData[0][11], moment, true)\n      this.rollupData()\n    }\n  }\n\n  // Reduce data classifying zones and plants\n  // In DOM we will do a cross-join with key-values\n  rollupData() : void {\n    this.rowGroups = this.data.classifyByIndex(this.data.orderIntakeData, 0)\n    this.rowPlants = this.data.classifyByIndex(this.data.orderIntakeData, 1)\n    this.rowKeys = Object.keys(this.rowGroups)\n    // Tell the DOM it's ready to rock ’n’ roll !\n    setTimeout(() => this.ready = true)\n  }\n\n  /** Reduce rows per Zone\n   * @param ZoneID id of the selected zone\n   */\n  getPlantsByZone(ZoneID) {\n    return Object.keys(this.rowGroups[ZoneID].reduce((r,a) => {\n      r[a[1]] = r[a[1]] || []\n      r[a[1]].push(a)\n      return r\n    }, {}))\n  }\n\n  /** Go to /order-intake/zone/:id\n   * @param ZoneID id of the selected zone\n   */\n  goZone(ZoneID): void {\n    this.data.lastTap = {\n      type: this.general_route,\n      key: ZoneID\n    }\n    this.router.navigate([this.main_route,this.general_route, ZoneID], { replaceUrl: true, queryParamsHandling: 'merge' })\n  }\n\n  /** Go to /order-intake/plant/:id\n   * @param PlantID id of the selected plant\n   */\n  goPlant(PlantID): void {\n    this.data.lastTap = {\n      type: this.second_level_route,\n      key: PlantID\n    }\n    this.router.navigate([this.main_route, this.second_level_route, PlantID], { replaceUrl: true, queryParamsHandling: 'merge' })\n  }\n\n  recoverLvl2(): void {\n    if (this.data.lastTap != null) {\n      if (this.data.lastTap.type == this.second_level_route) {\n        this.router.navigate([this.main_route, this.second_level_route, this.data.lastTap.key], { replaceUrl: true, queryParamsHandling: 'merge' })\n      } else {\n        this.router.navigate([this.main_route, this.general_route, this.data.lastTap.key], { replaceUrl: true, queryParamsHandling: 'merge' })\n      }\n    }\n  }\n\n  rowGroups: any\n  rowKeys: any\n  rowPlants: any\n\n}\n","<div class=\"overview\">\n  <div class=\"data-header\">\n    <div class=\"empty\"></div>\n    <div class=\"report-date\">{{ plandate }}</div>\n    <div class=\"glyph\">&Oslash;</div>\n  </div>\n  <div class=\"total-headers\">\n    <ng-container *ngIf=\"ZoneID != null && groupInfo\">\n      <div class=\"header-row total\">\n        <div class=\"title\">TOTAL</div>\n        <div class=\"actual\">{{ groupInfo.totalActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.totalPrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow zone\" (click)=\"return()\">\n        <div class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate }}\">{{\n            groupInfo.zoneRows[0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ groupInfo.zoneActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.zonePrevious | toNumber }}</div>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"PlantID != null && groupInfo\">\n      <div class=\"header-row total\">\n        <div class=\"title\">{{\n          groupInfo.zoneRows[0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]]}}</div>\n        <div class=\"actual\">{{ groupInfo.zoneActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.zonePrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow plant\" (click)=\"return()\">\n        <div class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate }}\">{{\n            groupInfo.plantRows[0][config.config.reports.trucks.columns.orderIntake.plantName[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ groupInfo.plantActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.plantPrevious | toNumber }}</div>\n      </div>\n    </ng-container>\n  </div>\n  <dip-circular-meters [actualValue]=\"groupInfo.progressValue1\" [previousValue]=\"groupInfo.progressValue2\" [actual]=\"groupInfo.progress1 || 0\"\n    [previous]=\"groupInfo.progress2 || 0\" *ngIf=\"ready && groupInfo\"></dip-circular-meters>\n  <div class=\"title-header\">\n    <div class=\"title\">{{ 'cities' | translate }}</div>\n  </div>\n  <div class=\"lvl2-row\" (click)=\"goProduct(RegionKey)\" *ngFor=\"let RegionKey of groupInfo?.regionKeys\">\n    <div class=\"title\">{{\n      groupInfo.regions[RegionKey][0][[config.config.reports.trucks.columns.orderIntake.region[config.config.language]]]}}</div>\n    <div matTooltipPosition=\"after\" [matTooltip]=\"data.sumByIndex(groupInfo.regions[RegionKey], 12) - data.sumByIndex(groupInfo.regions[RegionKey], 13) | toNumber:true\"\n      class=\"actual cyan\">{{ data.sumByIndex(groupInfo.regions[RegionKey], 12) | toNumber }}</div>\n    <div class=\"previous orange\">{{ data.sumByIndex(groupInfo.regions[RegionKey], 13) | toNumber }}</div>\n  </div>\n  <div class=\"title-header\">\n    <div class=\"title\">{{ 'companies' | translate }}</div>\n  </div>\n  <div class=\"lvl2-row\" (click)=\"goRegion(ProductKey)\" *ngFor=\"let ProductKey of groupInfo?.productKeys\">\n    <div class=\"title\">{{\n      groupInfo.products[ProductKey][0][[config.config.reports.trucks.columns.orderIntake.product[config.config.language]]]}}</div>\n    <div matTooltipPosition=\"after\" [matTooltip]=\"data.sumByIndex(groupInfo.products[ProductKey], 12) - data.sumByIndex(groupInfo.products[ProductKey], 13) | toNumber:true\"\n      class=\"actual cyan\">{{ data.sumByIndex(groupInfo.products[ProductKey], 12) | toNumber }}</div>\n    <div class=\"previous orange\">{{ data.sumByIndex(groupInfo.products[ProductKey], 13) | toNumber }}</div>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { Title } from '@angular/platform-browser';\nimport * as moment from 'moment';\nimport { ReportTypes } from '@other/interfaces';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getPlanDateWithMoment } from '@other/functions';\n\n@Component({\n  selector: 'order-intake-sub-lvl2',\n  templateUrl: './order-intake-sub-lvl2.component.html',\n  styleUrls: ['./order-intake-sub-lvl2.component.scss'],\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_intake\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_intake\", $event)'\n  }\n})\nexport class OrderIntakeSubLvl2Component {\n\n  ZoneID: any = null\n  PlantID: any = null\n\n  plandate: string = ''\n\n  ready: boolean = false\n\n  // Names of the routes for each level\n  general_route: string = 'zone'\n  sub_route_a: string = 'city'\n  sub_route_b: string = 'company'\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    public data: DataService,\n    private api: ApiService,\n    private config: ConfigService,\n    private router: Router,\n    private translate: TranslateService,\n    private title: Title\n  ) {\n    title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_intake'))\n    // Show the loader while getting/loading the data\n    this.activatedRoute.params.subscribe(params => {\n      if (params.type == this.general_route) {\n        this.ZoneID = params.id\n      } else {\n        this.PlantID = params.id\n      }\n      // If no Order Intake rows were found, get them\n      if (this.data.orderIntakeData.length === 0) {\n        this.api.getSavedReportData(ReportTypes.OrderIntake).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][11], moment, true);\n          this.data.orderIntakeData = res;\n          try {\n            this.rollupData()\n          } catch (err) {\n            this.router.navigate(['order-intake'], { replaceUrl: true })\n          }\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.orderIntakeData[0][11], moment, true)\n        try {\n          this.rollupData()\n        } catch (err) {\n          this.router.navigate(['order-intake'], { replaceUrl: true })\n        }\n      }\n    })\n  }\n\n  groupInfo: any\n\n  rollupData(): void {\n    let rows\n    // Reduce rows depending on route, by Plant or by Zone\n    if (this.ZoneID != null) {\n      rows = this.data.classifyByIndex(this.data.orderIntakeData, 0)[this.ZoneID]\n    } else {\n      rows = this.data.classifyByIndex(this.data.orderIntakeData, 1)[this.PlantID]\n    }\n    // Gettings rows only for the zone selected\n    let zoneRows = this.data.orderIntakeData.reduce((r, a) => {\n      r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]] = r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]] || []\n      r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]].push(a)\n      return r\n    }, {})[rows[0][this.config.config.reports.trucks.columns.orderIntake.groupKey]]\n    // Getting rows only for the plant selected\n    let plantRows = this.data.orderIntakeData.reduce((r, a) => {\n      r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]] = r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]] || []\n      r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]].push(a)\n      return r\n    }, {})[rows[0][this.config.config.reports.trucks.columns.orderIntake.plantKey]]\n    // Collect data info for data headers\n    this.groupInfo = {\n      zone: this.ZoneID != null,\n      zoneRows: zoneRows,\n      plantRows: plantRows,\n      rowsPlain: rows,\n      zoneID: rows[0][this.config.config.reports.trucks.columns.orderIntake.groupKey],\n      plantID: rows[0][this.config.config.reports.trucks.columns.orderIntake.plantKey],\n      totalActual: this.data.sumByIndex(this.data.orderIntakeData, 12),\n      totalPrevious: this.data.sumByIndex(this.data.orderIntakeData, 13),\n      zoneTitle: rows[0][this.config.config.reports.trucks.columns.orderIntake.groupName[this.config.config.language]],\n      plantTitle: rows[0][this.config.config.reports.trucks.columns.orderIntake.plantName[this.config.config.language]],\n      zoneActual: this.data.sumByIndex(zoneRows, this.config.config.reports.trucks.columns.orderIntake.actual),\n      zonePrevious: this.data.sumByIndex(zoneRows, this.config.config.reports.trucks.columns.orderIntake.previous),\n      plantActual: this.data.sumByIndex(plantRows, this.config.config.reports.trucks.columns.orderIntake.actual),\n      plantPrevious: this.data.sumByIndex(plantRows, this.config.config.reports.trucks.columns.orderIntake.previous),\n      regions: this.data.classifyByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.region[this.config.config.language]),\n      products: this.data.classifyByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.product[this.config.config.language])\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_intake') + ' - ' + (this.ZoneID != null ? this.groupInfo.zoneTitle : this.groupInfo.plantTitle))\n    this.groupInfo.regionKeys = Object.keys(this.groupInfo.regions)\n    this.groupInfo.productKeys = Object.keys(this.groupInfo.products)\n    this.groupInfo.progressValue1 = this.ZoneID != null ? this.groupInfo.zoneActual : this.groupInfo.plantActual\n    this.groupInfo.progressValue2 = this.ZoneID != null ? this.groupInfo.zonePrevious : this.groupInfo.plantPrevious\n    this.groupInfo.progress1 = this.ZoneID != null ?\n      this.percent(this.groupInfo.zoneActual, this.groupInfo.totalActual) :\n      this.percent(this.groupInfo.plantActual, this.groupInfo.zoneActual)\n    this.groupInfo.progress2 = this.ZoneID != null ?\n      this.percent(this.groupInfo.zonePrevious, this.groupInfo.totalPrevious) :\n      this.percent(this.groupInfo.plantPrevious, this.groupInfo.zonePrevious)\n\n    // Tell the DOM it's ready to rock ’n’ roll !\n    setTimeout(() => this.ready = true)\n  }\n\n  percent(part: number, total: number): number {\n    return parseInt(((part * 100) / total).toFixed(0))\n  }\n\n  return(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute })\n  }\n\n  forward(): void {\n    if (this.data.lastTap2) {\n      if (this.data.lastTap2.type == this.sub_route_a) {\n        this.router.navigate([this.sub_route_a, this.data.lastTap2.key], { relativeTo: this.activatedRoute, replaceUrl: true })\n      } else {\n        this.router.navigate([this.sub_route_b, this.data.lastTap2.key], { relativeTo: this.activatedRoute, replaceUrl: true })\n      }\n    }\n  }\n\n  goProduct(ProductID): void {\n    this.data.lastTap = {\n      type: this.sub_route_a,\n      key: encodeURI(ProductID)\n    }\n    this.router.navigate([this.sub_route_a, encodeURI(ProductID)], { relativeTo: this.activatedRoute })\n  }\n\n  goRegion(RegionID): void {\n    this.data.lastTap = {\n      type: this.sub_route_b,\n      key: encodeURI(RegionID)\n    }\n    this.router.navigate([this.sub_route_b, encodeURI(RegionID)], { relativeTo: this.activatedRoute })\n  }\n\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { swipeAnimation } from 'app/app.transitions';\n\n@Component({\n  selector: 'order-intake-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n  animations: [swipeAnimation],\n  host: {\n    '[@routerTransition]': 'getLevel()'\n  }\n})\nexport class OrderIntakeWrapperComponent {\n\n  constructor(private data: DataService) {\n    data.lastTap, data.lastTap2 = null\n  }\n\n  @ViewChild('o', { static: true }) outlet: RouterOutlet\n\n  getLevel() {\n    this.data.currentLevel = +this.outlet.activatedRouteData['level']\n    return this.outlet.activatedRouteData['level']\n  }\n\n}\n","<router-outlet #o=\"outlet\"></router-outlet>","<div class=\"overview\">\n  <div class=\"data-header\">\n    <div class=\"empty\"></div>\n    <div class=\"report-date\">{{ plandate }}</div>\n    <div class=\"glyph\">&Oslash;</div>\n  </div>\n  <div class=\"total-headers\">\n    <ng-container *ngIf=\"ZoneID != null && groupInfo\">\n      <div class=\"header-row total\">\n        <div class=\"title\">TOTAL</div>\n        <div class=\"actual\">{{ groupInfo.totalActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.totalPrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow sub2\" (click)=\"returnToMain()\">\n        <div class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate}}\">{{\n            groupInfo.zoneRows[0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ groupInfo.zoneActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.zonePrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow sub3\" (click)=\"return()\">\n        <div *ngIf=\"RegionID != null\" class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.second' | translate}}\">{{\n            'region' | translate }} - {{\n            subRows[0][config.config.reports.trucks.columns.orderIntake.region[config.config.language]]}}</span></div>\n        <div *ngIf=\"RegionID == null\" class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.second' | translate}}\">{{\n            'company' | translate }} - {{\n            subRows[0][config.config.reports.trucks.columns.orderIntake.product[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ data.sumByIndex(subRows,this.config.config.reports.trucks.columns.orderIntake.actual) |\n          toNumber }}</div>\n        <div class=\"previous\">{{ data.sumByIndex(subRows,this.config.config.reports.trucks.columns.orderIntake.previous)\n          | toNumber }}</div>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"PlantID != null && groupInfo\">\n      <div class=\"header-row total\">\n        <div class=\"title\">{{\n          groupInfo.zoneRows[0][config.config.reports.trucks.columns.orderIntake.groupName[config.config.language]]}}</div>\n        <div class=\"actual\">{{ groupInfo.zoneActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.zonePrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow sub2\" (click)=\"returnToMain()\">\n        <div class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.main' | translate}}\">{{\n            groupInfo.plantRows[0][config.config.reports.trucks.columns.orderIntake.plantName[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ groupInfo.plantActual | toNumber }}</div>\n        <div class=\"previous\">{{ groupInfo.plantPrevious | toNumber }}</div>\n      </div>\n      <div class=\"header-row arrow sub3\" (click)=\"return()\">\n        <div *ngIf=\"RegionID != null\" class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.second' | translate}}\">{{\n            'region' | translate }} - {{\n            subRows[0][config.config.reports.trucks.columns.orderIntake.region[config.config.language]]}}</span></div>\n        <div *ngIf=\"RegionID == null\" class=\"title\"><span matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"{{ 'return.second' | translate}}\">{{\n            'company' | translate }} - {{\n            subRows[0][config.config.reports.trucks.columns.orderIntake.product[config.config.language]]}}</span></div>\n        <div class=\"actual\">{{ data.sumByIndex(subRows,this.config.config.reports.trucks.columns.orderIntake.actual) |\n          toNumber }}</div>\n        <div class=\"previous\">{{ data.sumByIndex(subRows,this.config.config.reports.trucks.columns.orderIntake.previous)\n          | toNumber }}</div>\n      </div>\n    </ng-container>\n  </div>\n  <dip-circular-meters [actualValue]=\"groupInfo.thisActual\" [previousValue]=\"groupInfo.thisPrevious\" [actual]=\"groupInfo.progress1 || 0\"\n    [previous]=\"groupInfo.progress2 || 0\" *ngIf=\"ready && groupInfo\"></dip-circular-meters>\n  <div class=\"lvl3-row\" (click)=\"goAnother(key)\" *ngFor=\"let key of groupKeys\">\n    <div *ngIf=\"RegionID != null\" class=\"title\">{{\n      groupInfo.sub3rows[key][0][[config.config.reports.trucks.columns.orderIntake.product[config.config.language]]]}}</div>\n    <div *ngIf=\"RegionID == null\" class=\"title\">{{\n      groupInfo.sub3rows[key][0][[config.config.reports.trucks.columns.orderIntake.region[config.config.language]]]}}</div>\n    <div class=\"actual cyan\">{{ data.sumByIndex(groupInfo.sub3rows[key], 12) | toNumber }}</div>\n    <div class=\"previous orange\">{{ data.sumByIndex(groupInfo.sub3rows[key], 13) | toNumber }}</div>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport * as moment from 'moment';\nimport { ReportTypes } from '@other/interfaces';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getPlanDateWithMoment } from '@other/functions';\n\n@Component({\n  selector: 'order-intake-sub-lvl3',\n  templateUrl: './order-intake-sub-lvl3.component.html',\n  styleUrls: ['./order-intake-sub-lvl3.component.scss'],\n  host: {\n    '(swiperight)': 'data.goFrom(\"order_intake\", $event)',\n    '(swipeleft)': 'data.goFrom(\"order_intake\", $event)'\n  }\n})\nexport class OrderIntakeSubLvl3Component {\n\n  ZoneID: any = null\n  PlantID: any = null\n\n  RegionID: any = null\n  ProductID: any = null\n\n  plandate: string = ''\n\n  ready: boolean = false\n\n  // Names of the routes for each level\n  main_route: string = 'activity'\n  general_route: string = 'zone'\n  sub_route_a: string = 'city'\n  sub_route_b: string = 'company'\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    public data: DataService,\n    private api: ApiService,\n    private config: ConfigService,\n    private router: Router,\n    private translate: TranslateService,\n    private title: Title\n  ) {\n    title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_intake'))\n    // Show the loader while getting/loading the data\n    this.activatedRoute.paramMap.subscribe(params => {\n      if (params.get('type') == this.general_route) {\n        this.ZoneID = params.get('id')\n        this.PlantID = null\n      } else {\n        this.PlantID = params.get('id')\n        this.ZoneID = null\n      }\n      try {\n        if (params.get('type2') == this.sub_route_a) {\n          this.RegionID = decodeURI(params.get('region_id'))\n          this.ProductID = null\n        } else {\n          this.ProductID = decodeURI(params.get('region_id'))\n          this.RegionID = null\n        }\n      } catch (err) {\n        this.router.navigate([this.main_route], { replaceUrl: true })\n      }\n      // If no Order Intake rows were found, get them\n      if (this.data.orderIntakeData.length === 0) {\n        this.api.getSavedReportData(ReportTypes.OrderIntake).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][11], moment, true);\n          this.data.orderIntakeData = res;\n          try {\n            this.rollupData()\n          } catch (err) {\n            this.router.navigate([this.main_route], { replaceUrl: true })\n          }\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.orderIntakeData[0][11], moment, true);\n        try {\n          this.rollupData();\n        } catch (err) {\n          this.router.navigate([this.main_route], { replaceUrl: true });\n        }\n      }\n    });\n  }\n\n  goAnother(key): void {\n    if (this.RegionID != null) {\n      this.router.navigate(['../../', this.sub_route_b, encodeURI(key)], { relativeTo: this.activatedRoute, replaceUrl: true });\n    } else {\n      this.router.navigate(['../../', this.sub_route_a, encodeURI(key)], { relativeTo: this.activatedRoute, replaceUrl: true });\n    }\n  }\n\n  groupInfo: any;\n\n  rollupData(): void {\n    let rows\n    // Reduce rows depending on route, by Plant or by Zone\n    if (this.ZoneID != null) {\n      rows = this.data.classifyByIndex(this.data.orderIntakeData, 0)[this.ZoneID]\n    } else {\n      rows = this.data.classifyByIndex(this.data.orderIntakeData, 1)[this.PlantID]\n    }\n    // Gettings rows only for the zone selected\n    let zoneRows = this.data.orderIntakeData.reduce((r, a) => {\n      r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]] = r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]] || []\n      r[a[this.config.config.reports.trucks.columns.orderIntake.groupKey]].push(a)\n      return r\n    }, {})[rows[0][this.config.config.reports.trucks.columns.orderIntake.groupKey]]\n    // Getting rows only for the plant selected\n    let plantRows = this.data.orderIntakeData.reduce((r, a) => {\n      r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]] = r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]] || []\n      r[a[this.config.config.reports.trucks.columns.orderIntake.plantKey]].push(a)\n      return r\n    }, {})[rows[0][this.config.config.reports.trucks.columns.orderIntake.plantKey]]\n    // Collect data info for data headers\n    this.groupInfo = {\n      zone: this.ZoneID != null,\n      zoneRows: zoneRows,\n      plantRows: plantRows,\n      rowsPlain: rows,\n      zoneID: rows[0][this.config.config.reports.trucks.columns.orderIntake.groupKey],\n      plantID: rows[0][this.config.config.reports.trucks.columns.orderIntake.plantKey],\n      totalActual: this.data.sumByIndex(this.data.orderIntakeData, 12),\n      totalPrevious: this.data.sumByIndex(this.data.orderIntakeData, 13),\n      zoneTitle: rows[0][this.config.config.reports.trucks.columns.orderIntake.groupName[this.config.config.language]],\n      plantTitle: rows[0][this.config.config.reports.trucks.columns.orderIntake.plantName[this.config.config.language]],\n      zoneActual: this.data.sumByIndex(zoneRows, this.config.config.reports.trucks.columns.orderIntake.actual),\n      zonePrevious: this.data.sumByIndex(zoneRows, this.config.config.reports.trucks.columns.orderIntake.previous),\n      plantActual: this.data.sumByIndex(plantRows, this.config.config.reports.trucks.columns.orderIntake.actual),\n      plantPrevious: this.data.sumByIndex(plantRows, this.config.config.reports.trucks.columns.orderIntake.previous),\n    }\n    if (this.RegionID != null) {\n      this.subRows = this.data.classifyByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.region[this.config.config.language])[this.RegionID]\n    } else {\n      this.subRows = this.data.classifyByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.product[this.config.config.language])[this.ProductID]\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - ' + this.translate.instant('menu.order_intake') + ' - ' + (this.ZoneID != null ? this.groupInfo.zoneTitle : this.groupInfo.plantTitle) + ' - ' + (this.RegionID != null ? this.subRows[0][this.config.config.reports.trucks.columns.orderIntake.region[this.config.config.language]] : this.subRows[0][this.config.config.reports.trucks.columns.orderIntake.product[this.config.config.language]]))\n    this.groupInfo['thisActual'] = this.data.sumByIndex(this.subRows, this.config.config.reports.trucks.columns.orderIntake.actual)\n    this.groupInfo['thisPrevious'] = this.data.sumByIndex(this.subRows, this.config.config.reports.trucks.columns.orderIntake.previous)\n    this.groupInfo['progress1'] = this.percent(this.groupInfo.thisActual, this.data.sumByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.actual))\n    this.groupInfo['progress2'] = this.percent(this.groupInfo.thisPrevious, this.data.sumByIndex(rows, this.config.config.reports.trucks.columns.orderIntake.previous))\n    this.groupInfo['sub3rows'] = this.data.classifyByIndex(this.subRows, this.RegionID != null ? this.config.config.reports.trucks.columns.orderIntake.product[this.config.config.language] : this.config.config.reports.trucks.columns.orderIntake.region[this.config.config.language])\n    this.groupKeys = Object.keys(this.groupInfo.sub3rows);\n    this.groupInfo = { ...this.groupInfo };\n    // Tell the DOM it's ready to rock ’n’ roll !\n    setTimeout(() => this.ready = true);\n  }\n\n  groupKeys = [];\n\n  subRows;\n\n  percent(part: number, total: number): number {\n    return parseInt(((part * 100) / total).toFixed(0), 10);\n  }\n\n  returnToMain(): void {\n    this.router.navigate(['/'], { relativeTo: this.activatedRoute, replaceUrl: true });\n  }\n\n  return(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute, replaceUrl: true });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OrderIntakeMainComponent } from './components/order-intake-main/order-intake-main.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GraphicComponent } from './components/graphic/graphic.component';\nimport { OrderIntakeSubLvl2Component } from './components/order-intake-sub-lvl2/order-intake-sub-lvl2.component';\nimport { OrderIntakeWrapperComponent } from './components/wrapper/wrapper.component';\nimport { OrderIntakeSubLvl3Component } from './components/order-intake-sub-lvl3/order-intake-sub-lvl3.component';\nimport { SharedModule } from '@modules/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrderIntakeWrapperComponent,\n    children: [\n      {\n        path: '',\n        component: OrderIntakeMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':type/:id',\n        component: OrderIntakeSubLvl2Component,\n        data: { level: 2 }\n      },\n      {\n        path: ':type/:id/:type2/:region_id',\n        component: OrderIntakeSubLvl3Component,\n        data: { level: 3 }\n      }\n    ]\n  },\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  declarations: [\n    OrderIntakeMainComponent,\n    GraphicComponent,\n    OrderIntakeSubLvl2Component,\n    OrderIntakeWrapperComponent,\n    OrderIntakeSubLvl3Component\n  ]\n})\nexport class OrderIntakeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'toNumber'\n})\nexport class NumberPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  transform(value: number, sign: boolean = false, comma: boolean = true): string {\n    return ToNumberFn(value, sign, comma, this.language);\n  }\n\n}\n\nexport function ToNumberFn(value: number, sign: boolean = false, comma: boolean = true, language: string = 'en') {\n  if (isNaN(value)) {\n    return '-';\n  }\n  value = Math.round(value);\n  let ultimate: string\n  if (value == 0) return '0'\n  if (value > 0) {\n    if (sign) {\n      ultimate = '+ ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  } else {\n    if (sign) {\n      ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  }\n  if (comma) {\n    return ultimate;\n  } else {\n    return ultimate.replace(/[,.]/g, '');\n  }\n}\n"]}