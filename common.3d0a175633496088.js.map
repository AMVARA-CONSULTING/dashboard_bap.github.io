{"version":3,"file":"common.3d0a175633496088.js","mappings":"uNASO,IAAMA,EAAb,MAAM,QAEJC,YACSC,eAgBTC,uBAAmB,EACnBA,yBAAqB,EAErBA,qBAAiB,EACjBA,uBAAmB,EAEnBA,YAAS,EACTA,cAAW,EAjBUC,cAAUC,GAC7BF,KAAKG,OAASC,MAAMF,GAAS,EAAIG,KAAKC,IAAIJ,GAC1CF,KAAKO,iBAAmBL,GAAS,EAGZM,gBAAYN,GACjCF,KAAKS,SAAWL,MAAMF,GAAS,EAAIG,KAAKC,IAAIJ,GAC5CF,KAAKU,mBAAqBR,GAAS,gDAhB1BL,GAA0Bc,qCAA1Bd,EAA0Be,kvBCTvCD,iBAAmB,+BAEfA,iBAAsEA,SAAaA,QACnFA,4BAEFA,UAEFA,iBAAmB,+BAEfA,iBAA0EA,UAAeA,QACzFA,6BAEFA,iBAXuBA,uDAChBA,0DAAiEA,gCACtDA,+CAA8B,eAA9BA,CAA8B,6BAA9BA,CAA8B,qBAA9BA,CAA8B,UAA9BA,CAA8B,YAA9BA,CAA8B,YAA9BA,CAA8B,mBAA9BA,CAA8B,+CAKzBA,yDAChBA,4DAAqEA,kCAC1DA,iDAAgC,eAAhCA,CAAgC,6BAAhCA,CAAgC,qBAAhCA,CAAgC,UAAhCA,CAAgC,YAAhCA,CAAgC,YAAhCA,CAAgC,qBAAhCA,CAAgC,i8CDDvCd,GAAb","names":["DipCircularMetersComponent","constructor","data","this","setActual","value","actual","isNaN","Math","abs","clockwise_actual","setPrevious","previous","clockwise_previous","i0","selectors"],"sourceRoot":"webpack:///","sources":["./src/app/components/circular-meters/circular-meters.component.ts","./src/app/components/circular-meters/circular-meters.component.html"],"sourcesContent":["import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { DataService } from '@services/data.service';\n\n@Component({\n  selector: 'dip-circular-meters',\n  templateUrl: './circular-meters.component.html',\n  styleUrls: ['./circular-meters.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DipCircularMetersComponent {\n\n  constructor(\n    public data: DataService\n  ) { }\n\n  @Input() actualValue: number;\n  @Input() previousValue: number;\n\n  @Input('actual') set setActual(value: number) {\n    this.actual = isNaN(value) ? 0 : Math.abs(value);\n    this.clockwise_actual = value >= 0;\n  }\n\n  @Input('previous') set setPrevious(value: number) {\n    this.previous = isNaN(value) ? 0 : Math.abs(value);\n    this.clockwise_previous = value >= 0;\n  }\n\n  clockwise_actual = false;\n  clockwise_previous = false;\n\n  actualNegative = false;\n  previousNegative = false;\n\n  actual = 0;\n  previous = 0;\n\n}\n","<div class=\"meter\">\n  <div class=\"container\" [matTooltip]=\"actualValue | toNumber\" matTooltipPosition=\"above\" matTooltipClass=\"actual\">\n    <div [ngClass]=\"{'negative': !clockwise_actual}\" class=\"percent cyan\">{{ actual }}%</div>\n    <round-progress [clockwise]=\"clockwise_actual\" [duration]=\"1000\" [animation]=\"'easeInOutCubic'\" [animationDelay]=\"200\"\n      [max]=\"100\" [radius]=\"60\" [stroke]=\"13\" [current]=\"actual\" background=\"rgba(0, 172, 193, .2)\" [color]=\"data.lightTheme ? '#17687F' : '#00acc1'\"></round-progress>\n  </div>\n</div>\n<div class=\"meter\">\n  <div class=\"container\" [matTooltip]=\"previousValue | toNumber\" matTooltipPosition=\"above\" matTooltipClass=\"previous\">\n    <div [ngClass]=\"{'negative': !clockwise_previous}\" class=\"percent orange\">{{ previous }}%</div>\n    <round-progress [clockwise]=\"clockwise_previous\" [duration]=\"1000\" [animation]=\"'easeInOutCubic'\" [animationDelay]=\"200\"\n      [max]=\"100\" [radius]=\"60\" [stroke]=\"13\" [current]=\"previous\" background=\"rgba(243, 18, 40, .2)\" [color]=\"data.lightTheme ? '#f2142c' : '#f2142c'\"></round-progress>\n  </div>\n</div>"]}