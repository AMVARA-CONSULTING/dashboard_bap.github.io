{"version":3,"file":"856.556b6130760aa6c4.js","mappings":"0HAEO,MAAMA,GAAkBC,QAAQ,mBAAoB,EACvDC,QAAW,aAAc,EACvBC,QAAM,kBAAkBC,QAAM,CAAEC,SAAU,WACtC,CAAEC,UAAU,KAChBC,QAAM,EACJJ,QAAM,SAAU,EACdC,QAAM,CAAEI,UAAW,sBACnBC,QAAQ,oBAAoBL,QAAM,CAAEI,UAAW,qBAC9C,CAAEF,UAAU,KACfH,QAAM,SAAU,EACdC,QAAM,CAAEI,UAAW,oBACnBC,QAAQ,oBAAoBL,QAAM,CAAEI,UAAW,wBAC9C,CAAEF,UAAU,SAGnBJ,QAAW,aAAc,EACvBC,QAAM,kBAAkBC,QAAM,CAAEC,SAAU,WACtC,CAAEC,UAAU,KAChBC,QAAM,EACJJ,QAAM,SAAU,EACdC,QAAM,CAAEI,UAAW,uBACnBC,QAAQ,oBAAoBL,QAAM,CAAEI,UAAW,qBAC9C,CAAEF,UAAU,KACfH,QAAM,SAAU,EACdC,QAAM,CAAEI,UAAW,oBACnBC,QAAQ,oBAAoBL,QAAM,CAAEM,KAAM,EAAGF,UAAW,uBACvD,CAAEF,UAAU,2ICdhB,IAAMK,EAAb,MAAM,QAEJC,YAAoBC,eACJA,EAAKC,SAAW,KAKhCC,WACE,YAAKF,KAAKG,cAAgBC,KAAKC,OAAOC,mBAAmBC,MAClDH,KAAKC,OAAOC,mBAAmBC,oDAV7BT,GAAgBU,qCAAhBV,EAAgBW,uRCd7BD,qwBDSc,CAACrB,QAKFW,GAAb,uHETUU,iBAAmDA,6BAAoGA,kDAApGA,yIAGnDA,iBAAmDA,6BAAsGA,kDAAtGA,8LAP3DA,iBAAkBA,2DAASE,EAATC,MAASD,gBACzBF,iBAAkB,UAAlBA,CAAkB,WAGZA,wCACFA,QACAA,iBACEA,wCACFA,YAGJA,iBAAmBA,UAAcA,gDAXqCA,+BAGnBA,gJAA1CA,sCACiBA,mDAE2BA,kJAA5CA,sCACiBA,mDAIPA,uBCQhB,IAAMI,EAAb,MAAM,QAIJb,YACSc,EACCC,EACAC,EACDf,GAHAI,cACCA,cACAA,sBACDA,YANTA,aAAUY,KAcVZ,YAAiB,EAIRA,WAAe,GAqBxBA,cAAmB,EAEnBA,eAAoB,EAjCjBa,OAAeC,WAAad,KAC7BA,KAAKW,eAAeI,SAASC,UAAUC,IACrCjB,KAAKkB,MAAQD,EAAOE,IAAI,WAU5BC,cACE,GAAIpB,KAAKqB,MAAMC,OAAS,EAAG,CACzBtB,KAAKuB,UAAY,IAAMvB,KAAKqB,MAAMC,OAClC,IAAIE,EAAQ,EACZxB,KAAKqB,MAAMI,QAAQC,IACjB,MAAMC,EAAoB3B,KAAKJ,KAAKgC,WAAWF,EAAGG,MAAO7B,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QACxGC,EAAsBnC,KAAKJ,KAAKgC,WAAWF,EAAGG,MAAO7B,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UAC5GT,EAAoBH,IAAOA,EAAQG,GACnCQ,EAAsBX,IAAOA,EAAQW,KAE3CnC,KAAKqC,SAAWb,EAChBc,WAAW,IAAMtC,KAAKuC,OAAQ,EAAM,MAIxCC,OAAOC,GACLzC,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQuB,GAAO,CAAEE,YAAY,kDAtCnEnC,GAAgBJ,wEAAhBI,EAAgBH,uXDpB7BD,iBACEA,yBAaFA,eAdqBA,8BAC2CA,grFCUlD,EACVpB,QAAQ,OAAQ,EACdC,QAAW,SAAU,EACnBC,QAAM,UAAUC,QAAM,CAAEyD,QAAS,IAAM,CAAEvD,UAAU,KACnDH,QAAM,UAAU2D,QAAQ,SAASrD,QAAQ,iBAAiBL,QAAM,CAAEyD,QAAS,MAAQ,CAAEvD,UAAU,YAK1FmB,GAAb,iMCdM,QAGJjB,UAAUuD,GACR,OAAKA,EACDA,EAAOxB,OAAS,EAAUwB,EAIvB,CAHGA,EAAO,GACPA,EAAO,GACPA,EAAO,IAJG,4CCMhB1C,kBAAKA,2DAAS2C,EAATxC,OAASwC,gBACZ3C,kBAAkBA,SAC0HA,QAC5IA,kBAAoBA,6BACPA,QACbA,kBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,iDAPAA,uJAEEA,+GAEEA,iHAEHA,4IAUnBA,yBACEA,SACFA,kCAFoDA,qBAClDA,yEAgBRA,kBAAiBA,2DAAS4C,EAATzC,OAASyC,gBACxB5C,kBAAkBA,SAC0HA,QAC5IA,kBAAoBA,6BACPA,QACbA,kBAAsBA,6BACTA,QACbA,kBAAmBA,+BACfA,iDAPcA,uJAEEA,+GAEEA,iHAEHA,2JAzDzBA,eAAyD,UAAzDA,CAAyD,WAGnDA,iBAAyBA,8BAC3BA,QACAA,iBAAsB,WAElBA,mFACFA,QACAA,kBAAoB,YAEhBA,kBACAA,mBAAoBA,UAAcA,QAClCA,mBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,8EAUFA,YAGJA,mBAAQ,YAARA,CAAQ,uBAARA,CAAQ,oBAG2BA,oEAAmB,4CAAkB6C,EAAlB1C,MAAkB0C,iBAChE7C,qDAGFA,YAGJA,mBAAoBA,UAAcA,QAClCA,mBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,mBAAqC,YAArCA,CAAqC,aAEfA,kBAAKA,QACvBA,mBAAoBA,+BAA4BA,QAChDA,mBAAsBA,+BAA8BA,QACpDA,mBAAmBA,+BAAgCA,UAErDA,8EAUFA,kCAzD6BA,8DAIFA,gEAKCA,2BAIkDA,mEAgB3CA,kCACGA,gDAMhBA,2BAIOA,+BAGLA,2CACEA,6CACHA,6CAEwCA,yFAa/DA,wDDzDW8C,wDAAqBC,oUAGhCC,GADCC,OAAK,CAAEC,SAAU,IAAIC,IAAwBC,KAAKC,UAAUF,KAC7DG,qHEmBK,IAAMC,EAAb,MAAM,QASJhE,YACSC,EACCgE,EACAC,EACDpD,EACCE,EACAD,GALDV,YACCA,aACAA,WACDA,cACCA,sBACAA,cAbVA,YAAiB,EAEjBA,cAAmB,GAqEnBA,iBAAsB,EACtBA,mBAAwB,EACxBA,gBAAqB,EA1DlBa,OAAeH,OAASA,EACxBG,OAAeiD,OAASA,EACzBA,SAAc9D,KAAKS,OAAOA,OAAOsD,UACjC/D,KAAKW,eAAeI,SAASC,UAAUC,IACrCjB,KAAKkB,MAAQD,EAAOE,IAAI,SAEe,GAAvCnB,KAASJ,KAAKoE,eAAe1C,OAC3BtB,KAAK6D,IAAII,mBAAmBC,iBAAwBlD,UAAUmD,IAC5DnE,KAAKoE,UAAWC,QAAsBF,EAAI,GAAG1D,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GAClH9D,KAAKJ,KAAKoE,eAAiBG,EAC3BnE,KAAKuE,gBAGPvE,KAAKoE,UAAWC,QAAsBrE,KAAKJ,KAAKoE,eAAe,GAAGvD,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GACvI9D,KAAKuE,gBAKX/B,OAAOC,GACLzC,KAAKU,OAAOgC,SAAS,CAAC,OAAQD,GAAO,CAAE+B,WAAYxE,KAAKW,eAAgBgC,YAAY,IAGtF8B,YAAYvD,GACVwD,aAAaC,QAAQ,oBAAqBzD,GAC1ClB,KAAKU,OAAOgC,SAAS,CAAC,YAAaxB,GAAQ,CAAEyB,YAAY,IAG3D4B,aAEE,MAAMK,EAAW5E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW2C,SAChEC,EAAY7E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW4C,UACjEC,EAAkB9E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW6C,gBAO7E,GALA9E,KAAK+E,OAAS/E,KAAKJ,KAAKoE,eAAegB,OAAO,CAACC,EAAEC,KAC/CD,EAAEC,EAAEN,IAAaK,EAAEC,EAAEN,KAAc,GACnCK,EAAEC,EAAEN,IAAaM,EAAEL,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,OACnFkB,GACN,IACe,MAAdjF,KAAKkB,QAAkBlB,KAAK+E,OAAO/E,KAAKkB,OAE1C,YADAlB,KAAKU,OAAOgC,SAAS,CAAC,YAAa0C,OAAOC,KAAKrF,KAAK+E,QAAQ,IAAK,CAAEpC,YAAY,IAGjF,MAAM2C,EAAaZ,aAAaa,QAAQ,qBACpCD,GAAcA,GAActF,KAAKkB,OAAOlB,KAAKU,OAAOgC,SAAS,CAAC,YAAa4C,GAAa,CAAE3C,YAAY,IAC1G3C,KAAK4D,MAAM4B,SAASxF,KAAKS,OAAOA,OAAOgF,SAAW,oBAAsBzF,KAAKJ,KAAKoE,eAAe0B,OAAOC,GAAQA,EAAKf,IAAa5E,KAAKkB,OAAO,GAAG2D,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QACxN,MAAM6B,EAAsB5F,KAAKJ,KAAKoE,eAAe0B,OAAOG,GAAQA,EAAKjB,IAAa5E,KAAKkB,OAC3FlB,KAAK8F,YAAc9F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QAClHlC,KAAK+F,cAAgB/F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UACpHpC,KAAKgG,WAAahG,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OACjHjG,KAAKkG,aAAYd,iBAAQpF,KAAKJ,KAAKuG,gBAAgBP,EAAqBd,EAAgB9E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QACrJzB,WAAW,KACTtC,KAAKuC,OAAQ,kDArENoB,GAAuBvD,+FAAvBuD,EAAuBtD,uGAAvB+F,cAAY,cAAaC,KAE/B,+BAFMD,cAAY,cAAaC,gqBD5BtCjG,yBA8DAA,iEA9DMA,6CAAsC,u+XCe9B,EACVpB,QAAQ,OAAQ,EACdC,QAAW,SAAU,EACnBC,QAAM,UAAUC,QAAM,CAAEyD,QAAS,IAAM,CAAEvD,UAAU,KACnDH,QAAM,UAAU2D,QAAQ,SAASrD,QAAQ,iBAAiBL,QAAM,CAAEyD,QAAS,MAAQ,CAAEvD,UAAU,YAS1FsE,GAAb,sECbMvD,kBAAKA,2DAASkG,EAAT/F,MAAS+F,gBACZlG,kBAAkBA,SAC0HA,QAC5IA,iBAAoBA,6BACPA,QACbA,iBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,gDAPAA,uJAEEA,+GAEEA,iHAEHA,6IAUnBA,yBACEA,SACFA,kCAFoDA,qBAClDA,0EA4BRA,kBAAiBA,2DAASmG,EAAThG,MAASgG,sBACxBnG,kBAAkBA,SACyHA,QAC3IA,iBAAoBA,6BACPA,QACbA,iBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,gDAPAA,sJAEEA,+GAEEA,iHAEHA,4JCrDjBA,kBAAKA,2DAASE,EAATC,MAASD,gBACZF,kBAAkBA,SAC0HA,QAC5IA,iBAAoBA,6BACPA,QACbA,iBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,gDAPAA,uJAEEA,+GAEEA,iHAEHA,6IAUnBA,yBACEA,SACFA,kCAFoDA,qBAClDA,0EA0BNA,kBAAwG,YACpFA,yCAASoG,EAATjG,MAASiG,iBACzBpG,kBAAqHA,SAC5GA,UAEXA,iBAAoBA,6BAA2BA,QAC/CA,iBAAsBA,6BAA6BA,QACnDA,mBAAmBA,+BAA+BA,kCALqEA,uBAGnGA,wCACEA,0CACHA,sEAKvBA,kBAA2D,YACvCA,SACuHA,QACzIA,iBAAoBA,6BACPA,QACbA,iBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,8CAPAA,kJAEEA,+GAEEA,iHAEHA,6IAIrBA,kBAA6D,YACzCA,SACyHA,QAC3IA,iBAAoBA,6BACPA,QACbA,iBAAsBA,6BACTA,QACbA,kBAAmBA,+BACDA,8CAPAA,mJAEEA,+GAEEA,iHAEHA,mHC/EvB,MAAMqG,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAWjH,EACXkH,SAAU,CACR,CACEF,KAAM,GACNC,UAAWhD,EACX/D,KAAM,CAAEO,MAAO,IAEjB,CACEuG,KAAM,SACNC,UAAWhD,EACX/D,KAAM,CAAEO,MAAO,IAEjB,CACEuG,KAAM,oBACNC,UCTR,MAAM,QAUJhH,YACSC,EACCgE,EACAC,EACDpD,EACCE,EACAD,GALDV,YACCA,aACAA,WACDA,cACCA,sBACAA,cAdVA,YAAiB,EAEjBA,cAAmB,GA8FnBA,iBAAsB,EACtBA,mBAAwB,EACxBA,gBAAqB,EAErBA,gBAAqB,EACrBA,kBAAuB,EACvBA,eAAoB,EAtFjBa,OAAeiD,OAASA,EACzBA,SAAc9D,KAAKS,OAAOA,OAAOsD,UACjC/D,KAAKW,eAAeI,SAASC,UAAUC,IACrCjB,KAAKkB,MAAQD,EAAOE,IAAI,SACxBnB,KAAKyC,KAAOxB,EAAOE,IAAI,QAEgB,GAAvCnB,KAASJ,KAAKoE,eAAe1C,OAC3BtB,KAAK6D,IAAII,mBAAmBC,iBAAwBlD,UAAUmD,IAC5DnE,KAAKoE,UAAWC,QAAsBF,EAAI,GAAG1D,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GAClH9D,KAAKJ,KAAKoE,eAAiBG,EAC3BnE,KAAKuE,gBAGPvE,KAAKoE,UAAWC,QAAsBrE,KAAKJ,KAAKoE,eAAe,GAAGvD,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GACvI9D,KAAKuE,gBAKX/B,OAAOC,GACLzC,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQuB,GAAO,CAAEE,YAAY,IAG9E8B,YAAYvD,GACVlB,KAAKU,OAAOgC,SAAS,CAAC,YAAaxB,EAAO,OAAQlB,KAAKyC,MAAO,CAAEE,YAAY,IAG9EkE,aAAaC,GACX9G,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQlB,KAAKyC,KAAM,aAAcqE,GAAgB,CAAEnE,YAAY,IAGhH4B,aAEE,MAAMK,EAAW5E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW2C,SAChEC,EAAY7E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW4C,UACjEC,EAAkB9E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW6C,gBACvEiC,EAAiB/G,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW8E,eAO5E,GALA/G,KAAK+E,OAAS/E,KAAKJ,KAAKoE,eAAegB,OAAO,CAACC,EAAGC,KAChDD,EAAEC,EAAEN,IAAaK,EAAEC,EAAEN,KAAc,GACnCK,EAAEC,EAAEN,IAAaM,EAAEL,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,OACnFkB,GACN,IACe,MAAdjF,KAAKkB,QAAkBlB,KAAK+E,OAAO/E,KAAKkB,OAE1C,YADAlB,KAAKU,OAAOgC,SAAS,CAAC,YAAa0C,OAAOC,KAAKrF,KAAK+E,QAAQ,IAAK,CAAEpC,YAAY,IAGjF3C,KAAK4D,MAAM4B,SAASxF,KAAKS,OAAOA,OAAOgF,SAAW,oBAAwBzF,KAAKJ,KAAKoE,eAAe0B,OAAOC,GAAQA,EAAKf,IAAa5E,KAAKkB,OAAO,GAAG2D,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAC1N,MAAM6B,EAAsB5F,KAAKJ,KAAKoE,eAAe0B,OAAOG,GAAQA,EAAKjB,IAAa5E,KAAKkB,OAC3FlB,KAAK8F,YAAc9F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QAClHlC,KAAK+F,cAAgB/F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UACpHpC,KAAKgG,WAAahG,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OACjHjG,KAAKkG,aAAYd,iBAAQpF,KAAKJ,KAAKuG,gBAAgBP,EAAqBd,EAAgB9E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QACrJ,MAAMiD,EAAqBpB,EAAoBF,OAAOC,GAAQA,EAAKb,EAAgB9E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAAU/D,KAAKyC,MAC/JzC,KAAKiH,WAAajH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QAChHlC,KAAKkH,aAAelH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UAClHpC,KAAKmH,UAAYnH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OAC/GjG,KAAKoH,YAAWhC,iBAAQpF,KAAKJ,KAAKuG,gBAAgBa,EAAoBD,EAAe/G,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAC9I/D,KAAKoH,YAAYC,eAAe,eAClCrH,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQlB,KAAKyC,KAAM,aAAc,eAAgB,CAAEE,YAAY,IAG5G3C,KAAKoH,YAAYC,eAAe,mBAClCrH,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQlB,KAAKyC,KAAM,aAAc,mBAAoB,CAAEE,YAAY,KAGpH3C,KAAKsH,aAAc1G,QAAQZ,KAAKiH,WAAYjH,KAAK8F,aACjD9F,KAAKuH,eAAgB3G,QAAQZ,KAAKkH,aAAclH,KAAK+F,eACrDzD,WAAW,KACTtC,KAAKuC,OAAQ,KAIjBiF,eACExH,KAAKU,OAAOgC,SAAS,CAAC,UAAW,CAAE8B,WAAYxE,KAAKW,+DA5F3C8G,GAAuBrH,+FAAvBqH,EAAuBpH,sGAAvB+F,63BHlBbhG,iBAA2B,WAEvBA,iBAAyBA,8BAC3BA,QACAA,iBAAsB,WAElBA,kFACFA,QACAA,kBAAoB,YAEhBA,kBACAA,kBAAoBA,UAAcA,QAClCA,kBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,+EAUFA,YAGJA,mBAAQ,YAARA,CAAQ,uBAARA,CAAQ,oBAG2BA,qDAAmB,mCAAkBgG,mBAChEhG,sDAGFA,YAGJA,kBAAoBA,UAAcA,QAClCA,kBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,mBAA6B,YAA7BA,CAA6B,YAA7BA,CAA6B,aAGLA,kBAAKA,QACvBA,kBAAoBA,+BAA4BA,QAChDA,kBAAsBA,+BAA8BA,QACpDA,mBAAmBA,+BAAgCA,UAErDA,mBAA6C,aACzBA,gCAASgG,mBACzBhG,mBAA8GA,UACrGA,UAEXA,kBAAoBA,+BAA2BA,QAC/CA,kBAAsBA,+BAA6BA,QACnDA,mBAAmBA,+BAA+BA,YAGtDA,mCACAA,iDAUFA,eArE6BA,8DAIFA,+DAKCA,2BAIkDA,mEAgB3CA,kCACGA,gDAMhBA,2BAQIA,4CACEA,6CACHA,6CAI6FA,uBAG5FA,0CACEA,4CACHA,4CAGFA,2CAA0B,+BAA1BA,CAA0B,uBAA1BA,CAA0B,4BACoBA,mpYG3CxDqH,GAAb,GDUQ7H,KAAM,CAAEO,MAAO,IAEjB,CACEuG,KAAM,qCACNC,UEdR,MAAM,QAWJhH,YACSC,EACCgE,EACAC,EACDpD,EACCE,EACAD,GALDV,YACCA,aACAA,WACDA,cACCA,sBACAA,cAfVA,YAAiB,EAEjBA,cAAmB,GAoGnBA,iBAAsB,EACtBA,mBAAwB,EAExBA,iBAAsB,EACtBA,mBAAwB,EACxBA,gBAAqB,EAErBA,gBAAqB,EACrBA,kBAAuB,EACvBA,eAAoB,EAEpBA,gBAAqB,EACrBA,kBAAuB,EACvBA,eAAoB,EAlGjBa,OAAeiD,OAASA,EACzBA,SAAc9D,KAAKS,OAAOA,OAAOsD,UACjC/D,KAAKW,eAAeI,SAASC,UAAUC,IACrCjB,KAAKkB,MAAQD,EAAOE,IAAI,SACxBnB,KAAKyC,KAAOxB,EAAOE,IAAI,QACvBnB,KAAK0H,KAAOzG,EAAOE,IAAI,QAEgB,GAAvCnB,KAASJ,KAAKoE,eAAe1C,OAC3BtB,KAAK6D,IAAII,mBAAmBC,iBAAwBlD,UAAUmD,IAC5DnE,KAAKoE,UAAWC,QAAsBF,EAAI,GAAG1D,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GAClH9D,KAAKJ,KAAKoE,eAAiBG,EAQ3BnE,KAAKuE,gBAGPvE,KAAKoE,UAAWC,QAAsBrE,KAAKJ,KAAKoE,eAAe,GAAGvD,EAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWqC,YAAaR,GAAQ,GACvI9D,KAAKuE,gBAKXE,YAAYvD,GACVlB,KAAKU,OAAOgC,SAAS,CAAC,YAAaxB,EAAO,OAAQlB,KAAKyC,KAAM,aAAczC,KAAK0H,MAAO,CAAE/E,YAAY,IAGvG4B,aAEE,MAAMK,EAAW5E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW2C,SAChEC,EAAY7E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW4C,UACjEC,EAAkB9E,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW6C,gBACvEiC,EAAiB/G,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW8E,eACtEY,EAAa3H,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW0F,WAClEC,EAAc5H,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAW2F,YAOzE,GALA5H,KAAK+E,OAAS/E,KAAKJ,KAAKoE,eAAegB,OAAO,CAACC,EAAGC,KAChDD,EAAEC,EAAEN,IAAaK,EAAEC,EAAEN,KAAc,GACnCK,EAAEC,EAAEN,IAAaM,EAAEL,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,OACnFkB,GACN,IACe,MAAdjF,KAAKkB,QAAkBlB,KAAK+E,OAAO/E,KAAKkB,OAE1C,YADAlB,KAAKU,OAAOgC,SAAS,CAAC,YAAa0C,OAAOC,KAAKrF,KAAK+E,QAAQ,IAAK,CAAEpC,YAAY,IAGjF3C,KAAK4D,MAAM4B,SAASxF,KAAKS,OAAOA,OAAOgF,SAAW,oBAAwBzF,KAAKJ,KAAKoE,eAAe0B,OAAOC,GAAQA,EAAKf,IAAa5E,KAAKkB,OAAO,GAAG2D,EAAU7E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAC1N,MAAM6B,EAAsB5F,KAAKJ,KAAKoE,eAAe0B,OAAOG,GAAQA,EAAKjB,IAAa5E,KAAKkB,OAC3FlB,KAAK8F,YAAc9F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QAClHlC,KAAK+F,cAAgB/F,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UACpHpC,KAAKgG,WAAahG,KAAKJ,KAAKgC,WAAWgE,EAAqB5F,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OACjHjG,KAAKkG,aAAYd,iBAAQpF,KAAKJ,KAAKuG,gBAAgBP,EAAqBd,EAAgB9E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QACrJ,MAAMiD,EAAqBpB,EAAoBF,OAAOC,GAAQA,EAAKb,EAAgB9E,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAAU/D,KAAKyC,MAC/JzC,KAAKiH,WAAajH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QAChHlC,KAAKkH,aAAelH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UAClHpC,KAAKmH,UAAYnH,KAAKJ,KAAKgC,WAAWoF,EAAoBhH,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OAC/GjG,KAAKoH,YAAWhC,iBAAQpF,KAAKJ,KAAKuG,gBAAgBa,EAAoBD,EAAe/G,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAClJ,MAAM8D,EAA2Bb,EAAmBtB,OAAOC,GAAQA,EAAKoB,EAAe/G,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAAU/D,KAAK0H,MACnK1H,KAAK8H,WAAa9H,KAAKJ,KAAKgC,WAAWiG,EAA0B7H,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWC,QACtHlC,KAAK+H,aAAe/H,KAAKJ,KAAKgC,WAAWiG,EAA0B7H,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWG,UACxHpC,KAAKgI,UAAYhI,KAAKJ,KAAKgC,WAAWiG,EAA0B7H,KAAKS,OAAOA,OAAOqB,QAAQC,OAAOC,QAAQC,WAAWgE,OACrHjG,KAAKiI,QAAO7C,iBAAQpF,KAAKJ,KAAKuG,gBAAgB0B,EAA0BF,EAAW3H,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAChJ/D,KAAKkI,SAAQ9C,iBAAQpF,KAAKJ,KAAKuG,gBAAgB0B,EAA0BD,EAAY5H,KAAKS,OAAOA,OAAO0E,UAAYnF,KAAKS,OAAOA,OAAOsD,SAAW,QAClJ/D,KAAKsH,cAAe1G,QAAQZ,KAAK8H,WAAY9H,KAAKiH,YAClDjH,KAAKuH,gBAAiB3G,QAAQZ,KAAK+H,aAAc/H,KAAKkH,cACtD5E,WAAW,KACTtC,KAAKuC,OAAQ,IAIjBC,OAAOC,GACLzC,KAAKU,OAAOgC,SAAS,CAAC,YAAa1C,KAAKkB,MAAO,OAAQuB,GAAO,CAAEE,YAAY,IAG9E6E,eACExH,KAAKU,OAAOgC,SAAS,CAAC,gBAAiB,CAAE8B,WAAYxE,KAAKW,iBAG5DwH,eACEnI,KAAKU,OAAOgC,SAAS,CAAC,UAAW,CAAE8B,WAAYxE,KAAKW,+DArG3CyH,GAAuBhI,+FAAvBgI,EAAuB/H,sGAAvB+F,khCHlBbhG,iBAA2B,WAEvBA,iBAAyBA,8BAC3BA,QACAA,iBAAsB,WAElBA,kFACFA,QACAA,kBAAoB,YAEhBA,kBACAA,kBAAoBA,UAAcA,QAClCA,kBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,+EAUFA,YAGJA,mBAAQ,YAARA,CAAQ,uBAARA,CAAQ,oBAG2BA,qDAAmB,mCAAkBgG,mBAChEhG,sDAGFA,YAGJA,kBAAoBA,UAAcA,QAClCA,kBAAsBA,wBAAWA,QACjCA,mBAAmBA,mBAAOA,UAE5BA,mBAA6B,YAA7BA,CAA6B,YAA7BA,CAA6B,aAGLA,kBAAKA,QACvBA,kBAAoBA,+BAA4BA,QAChDA,kBAAsBA,+BAA8BA,QACpDA,mBAAmBA,+BAAgCA,UAErDA,mBAA6C,aACzBA,gCAASgG,mBACzBhG,mBAA8GA,UACrGA,UAEXA,kBAAoBA,+BAA2BA,QAC/CA,kBAAsBA,+BAA6BA,QACnDA,mBAAmBA,+BAA+BA,UAEpDA,4BASFA,QACAA,mCACAA,mBAA0BA,oBAAOA,QACjCA,iDAUAA,mBAA0BA,qBAAQA,QAClCA,iDAUFA,eA1F6BA,8DAIFA,+DAKCA,2BAIkDA,mEAgB3CA,kCACGA,gDAMhBA,2BAQIA,4CACEA,6CACHA,6CAI6FA,uBAG5FA,0CACEA,4CACHA,4CAEfA,wEAUaA,2CAA0B,+BAA1BA,CAA0B,uBAA1BA,CAA0B,4BAEXA,iDAWCA,4iXGhE1BgI,GAAb,GFeQxI,KAAM,CAAEO,MAAO,OAoBhB,IAAMkI,GAAb,MAAM,sDAAOA,4DAbF,CACPC,cAAsB7B,IACtB8B,IACAC,SAUSH,GAAb,iFG7CM,QAIJ9I,UAAUsC,EAAe4G,GAAgB,EAAOC,GAAiB,GAC/D,OAAOC,EAAW9G,EAAO4G,EAAMC,EAAO1I,KAAK+D,WAKzC,WAAqBlC,EAAe4G,GAAgB,EAAOC,GAAiB,EAAM3E,EAAmB,MACzG,GAAI6E,MAAM/G,GACR,MAAO,IAGT,IAAIgH,EACJ,OAAa,IAFbhH,EAAQiH,KAAKC,MAAMlH,IAEI,KAGnBgH,EAFAhH,EAAQ,EACVmH,EACa,KAAOC,SAASH,KAAKI,IAAIrH,GAAOsH,QAAQ,GAAI,IAAIC,eAAerF,GAE1EsF,EAAY,EACC,KAAOJ,SAASH,KAAKI,IAAIrH,GAAOsH,QAAQ,GAAI,IAAIC,eAAerF,GAE/DkF,SAASH,KAAKI,IAAIrH,GAAOsH,QAAQ,GAAI,IAAIC,eAAerF,GAIvEiF,GAGMnH,EAAQ,EAFD,KAAOoH,SAASH,KAAKI,IAAIrH,GAAOsH,QAAQ,GAAI,IAAIC,eAAerF,GAK7DkF,SAASH,KAAKI,IAAIrH,GAAOsH,QAAQ,GAAI,IAAIC,eAAerF,GAIrE2E,EACKG,EAEAA,EAASS,QAAQ,QAAS,2CAzCxBC,+CAAUpG,oUAEoBC,GAAxCoG,QAAeC,wHAAyB,uECQ3C,IAAIC,EAAkB,WAElB,QADInG,EAAO,GACFoG,EAAK,EAAGA,EAAKC,UAAUtI,OAAQqI,IACpCpG,EAAKoG,GAAMC,UAAUD,GAEzB,OAAOpG,EAAK,IAEhBsG,IAAmB,SAAUpJ,GACzB,YAAe,IAAXA,IAAqBA,EAAS,IAC3B,SAAUqJ,EAAGC,EAAIC,GACpB,IAAIC,EAAIC,EACR,GAAgC,mBAArBF,EAAWnI,MAClB,MAAM,IAAIsI,MAAM,8CAEpB,IAAI7G,EAAsC,QAA1B2G,EAAKxJ,EAAO6C,gBAA6B,IAAP2G,EAAgBA,EAAKP,EACnEU,EAAgC,QAAvBF,EAAKzJ,EAAO2J,aAA0B,IAAPF,EAAgBA,EAAK,IAAIG,IACrEL,SAAWnI,MAhCnB,WAAiByI,EAAMhH,EAAU8G,GAC7B,IAAIG,EAAW,WACX,IAAIN,EACA1G,EAAOqG,UACPY,EAAMlH,EAASmH,MAAMzK,KAAMuD,GAC3B6G,EAAQG,EAASH,MACrB,GAAIA,EAAMM,IAAIF,GACV,OAAOJ,EAAMjJ,IAAIqJ,GAErB,IAAIG,EAASL,EAAKG,MAAMzK,KAAMuD,GAC9BgH,SAASH,MAA0C,QAAjCH,EAAKG,EAAMQ,IAAIJ,EAAKG,UAA4B,IAAPV,EAAgBA,EAAKG,EACzEO,GAEXJ,SAASH,MAAQA,EACVG,EAkBgBM,CAAQb,EAAWnI,MAAOyB,EAAU8G,GAChDJ","names":["swipeAnimation","trigger","transition","query","style","overflow","optional","group","transform","animate","left","WrapperComponent","constructor","data","lastTap2","getLevel","currentLevel","this","outlet","activatedRouteData","level","i0","selectors","ctx_r6","oxw","GraphicComponent","config","router","activatedRoute","percent","window","ps_graphic","paramMap","subscribe","params","plant","get","ngOnChanges","werks","length","barsWidth","total","forEach","el","total_werk_actual","sumByIndex","value","reports","trucks","columns","plantStock","actual","total_werk_previous","previous","maxTotal","setTimeout","ready","goWerk","werk","navigate","replaceUrl","opacity","stagger","values","ctx_r7","ctx_r11","ctx_r15","PlantStockSortingPipe","pure","__decorate","memo","resolver","args","JSON","stringify","F","PlantStockMainComponent","title","api","moment","language","plantStockData","getSavedReportData","ReportTypes","res","plandate","getPlanDateWithMoment","actualDate","rollupData","relativeTo","changePlant","localStorage","setItem","plantKey","plantName","werkbestandName","plants","reduce","r","a","corpintra","Object","keys","plantCache","getItem","setTitle","appTitle","filter","item","filteredRowsByPlant","aloc","totalActual","totalPrevious","totalDelta","delta","werkbestands","classifyByIndex","ctx","$event","ctx_r4","ctx_r8","ctx_r9","routes","path","component","children","goHofbestand","hofbestandKey","hofbestandName","filteredRowsByWerk","werkActual","werkPrevious","werkDelta","hofbestands","hasOwnProperty","actualValue","previousValue","returnToMain","PlantStockLvl2Component","hofb","regionName","productName","filteredRowsByHofbestand","hofbActual","hofbPrevious","hofbDelta","regions","products","returnToLvl2","PlantStockLvl3Component","PlantStockModule","RouterModule","SharedModule","CommonModule","sign","comma","ToNumberFn","isNaN","ultimate","Math","round","h","parseInt","abs","toFixed","toLocaleString","c","replace","NumberPipe","SelectSnapshot","ConfigState","defaultResolver","_i","arguments","exports","_","__","descriptor","_a","_b","Error","cache","Map","func","memoized","key","apply","has","result","set","memoize"],"sourceRoot":"webpack:///","sources":["./src/app/app.transitions.ts","./src/app/modules/plant-stock/components/wrapper/wrapper.component.ts","./src/app/modules/plant-stock/components/wrapper/wrapper.component.html","./src/app/modules/plant-stock/components/graphic/graphic.component.html","./src/app/modules/plant-stock/components/graphic/graphic.component.ts","./src/app/pipes/plant-stock-sorting.pipe.ts","./src/app/modules/plant-stock/components/plant-stock-main/plant-stock-main.component.html","./src/app/modules/plant-stock/components/plant-stock-main/plant-stock-main.component.ts","./src/app/modules/plant-stock/components/plant-stock-lvl2/plant-stock-lvl2.component.html","./src/app/modules/plant-stock/components/plant-stock-lvl3/plant-stock-lvl3.component.html","./src/app/modules/plant-stock/plant-stock.module.ts","./src/app/modules/plant-stock/components/plant-stock-lvl2/plant-stock-lvl2.component.ts","./src/app/modules/plant-stock/components/plant-stock-lvl3/plant-stock-lvl3.component.ts","./src/app/pipes/number.pipe.ts","./node_modules/memo-decorator/index.js"],"sourcesContent":["import { trigger, transition, query, style, group, animate } from '@angular/animations';\n\nexport const swipeAnimation =  trigger('routerTransition', [\n    transition(':increment', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n    transition(':decrement', [\n      query(':enter, :leave', style({ overflow: 'hidden' })\n        , { optional: true }),\n      group([\n        query(':enter', [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n        ], { optional: true }),\n        query(':leave', [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.5s ease-in-out', style({ left: 0, transform: 'translateX(100%)' }))\n        ], { optional: true }),\n      ])\n    ]),\n  ])","import { Component, ViewChild } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { RouterOutlet } from '@angular/router';\nimport { swipeAnimation } from 'app/app.transitions';\n\n@Component({\n  selector: 'plant-stock-wrapper',\n  templateUrl: './wrapper.component.html',\n  styleUrls: ['./wrapper.component.scss'],\n  animations: [swipeAnimation],\n  host: {\n    '[@routerTransition]': 'getLevel()'\n  }\n})\nexport class WrapperComponent {\n\n  constructor(private data: DataService) {\n    data.lastTap, data.lastTap2 = null\n  }\n\n  @ViewChild('o', { static: true }) outlet: RouterOutlet\n\n  getLevel() {\n    this.data.currentLevel = +this.outlet.activatedRouteData['level']\n    return this.outlet.activatedRouteData['level']\n  }\n\n}\n","<router-outlet #o=\"outlet\"></router-outlet>","<div class=\"wrapper\" [@list]=\"werks.length\">\n  <div class=\"werk\" (click)=\"goWerk(werk.key)\" *ngFor=\"let werk of werks\" [style.width.%]=\"barsWidth\">\n    <div class=\"bars\">\n      <div style=\"position: relative; height: 100%;\">\n        <div [ngClass]=\"{zero: !ready}\" class=\"actual\" [style.height.%]=\"percent(data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual), maxTotal, false, false, false)\">\n          <div class=\"value\" *ngIf=\"!(data.mobile$ | async)\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual) | toNumber }}</div>\n        </div>\n        <div [ngClass]=\"{zero: !ready}\" class=\"previous\" [style.height.%]=\"percent(data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous), maxTotal, false, false, false)\">\n          <div class=\"value\" *ngIf=\"!(data.mobile$ | async)\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous) | toNumber }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"title\">{{ werk.key }}</div>\n  </div>\n</div>","import { Component, Input, OnChanges } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\nimport { percent } from '@other/functions';\n\n@Component({\n  selector: 'plant-stock-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('200ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ])\n  ]\n})\nexport class GraphicComponent implements OnChanges {\n\n  percent = percent;\n\n  constructor(\n    public config: ConfigService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    public data: DataService\n  ) {\n    (window as any).ps_graphic = this;\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n    })\n  }\n\n  ready: boolean = false\n\n  plant: string\n\n  @Input() werks: any[] = []\n\n  ngOnChanges() {\n    if (this.werks.length > 0) {\n      this.barsWidth = 100 / this.werks.length\n      let total = 0\n      this.werks.forEach(el => {\n        const total_werk_actual = this.data.sumByIndex(el.value, this.config.config.reports.trucks.columns.plantStock.actual)\n        const total_werk_previous = this.data.sumByIndex(el.value, this.config.config.reports.trucks.columns.plantStock.previous)\n        if (total_werk_actual > total) total = total_werk_actual\n        if (total_werk_previous > total) total = total_werk_previous\n      })\n      this.maxTotal = total\n      setTimeout(() => this.ready = true, 300)\n    }\n  }\n\n  goWerk(werk): void {\n    this.router.navigate(['companies', this.plant, 'werk', werk], { replaceUrl: true })\n  }\n\n  maxTotal: number = 0\n\n  barsWidth: number = 0\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport memo from 'memo-decorator';\n\n@Pipe({\n  name: 'plantStockSorting'\n})\nexport class PlantStockSortingPipe implements PipeTransform {\n\n  @memo({ resolver: (...args: any[]): string => JSON.stringify(args) })\n  transform(values: any[]): any[] {\n    if (!values) return []\n    if (values.length < 3) return values\n    const a = values[1]\n    const b = values[2]\n    const c = values[0]\n    return [a, b, c]\n  }\n\n}","<div *ngIf=\"data.plantStockData.length > 0; else noData\">\n  <div class=\"report-header\">\n    <div class=\"plandate\">\n      <div class=\"empty\"></div>{{ 'plandate' | translate }}: {{ plandate }}\n    </div>\n    <div class=\"overview\">\n      <div class=\"graphic\">\n        <plant-stock-graphic [werks]=\"werkbestands | keyvalue | plantStockSorting\"></plant-stock-graphic>\n      </div>\n      <div class=\"simple\">\n        <div class=\"headers\">\n          <div class=\"empty\"></div>\n          <div class=\"actual\">{{ plandate }}</div>\n          <div class=\"previous\">Prev. Month</div>\n          <div class=\"delta\">&Delta;</div>\n        </div>\n        <div (click)=\"goWerk(werk.key)\" class=\"overview-group\" *ngFor=\"let werk of werkbestands | keyvalue | plantStockSorting\">\n          <div class=\"werk\">{{\n            werk.value[0][config.config.reports.trucks.columns.plantStock.werkbestandName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n          <div class=\"actual\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual) |\n            toNumber }}</div>\n          <div class=\"previous\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous) |\n            toNumber }}</div>\n          <div class=\"delta\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.delta) |\n            toNumber:true }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <header>\n    <div class=\"werk\">\n      <mat-form-field matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\" style=\"margin-left: 10px;\">\n        <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n          <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n            {{ plant.value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div class=\"actual\">{{ plandate }}</div>\n    <div class=\"previous\">Prev. Month</div>\n    <div class=\"delta\">&Delta;</div>\n  </header>\n  <div class=\"content-wrapper\" [@list]>\n    <div class=\"group-header\">\n      <div class=\"werk\">TOTAL</div>\n      <div class=\"actual\">{{ totalActual | toNumber }}</div>\n      <div class=\"previous\">{{ totalPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ totalDelta | toNumber:true }}</div>\n    </div>\n    <div class=\"row\" (click)=\"goWerk(werk.key)\" *ngFor=\"let werk of werkbestands | keyvalue | plantStockSorting\">\n      <div class=\"werk\">{{\n        werk.value[0][config.config.reports.trucks.columns.plantStock.werkbestandName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n      <div class=\"actual\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual) |\n        toNumber }}</div>\n      <div class=\"previous\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous) |\n        toNumber }}</div>\n      <div class=\"delta\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.delta) | toNumber:true\n        }}</div>\n    </div>\n  </div>\n</div>\n<ng-template #noData>\n  <noData></noData>\n</ng-template>","import { Component } from '@angular/core';\nimport { trigger, transition, query, style, stagger, animate } from '@angular/animations';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment } from '@other/functions';\n\n@Component({\n  selector: 'plant-stock-main',\n  templateUrl: './plant-stock-main.component.html',\n  styleUrls: ['./plant-stock-main.component.scss'],\n  animations: [\n    trigger('list', [\n      transition('* => *', [\n        query(':enter', style({ opacity: 0 }), { optional: true }),\n        query(':enter', stagger('100ms', animate('300ms ease-in', style({ opacity: 1 }))), { optional: true })\n      ])\n    ]),\n  ],\n  host: {\n    '(swiperight)': 'data.goFrom(\"plant_stock\", $event)',\n    '(swipeleft)': 'data.goFrom(\"plant_stock\", $event)'\n  }\n})\nexport class PlantStockMainComponent {\n\n  ready: boolean = false\n\n  plandate: string = ''\n  plants\n\n  plant: string\n\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).router = router;\n    (window as any).moment = moment\n    moment.locale(this.config.config.language)\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      // If no Plant Stock rows were found, get them\n      if (this.data.plantStockData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.PlantStock).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n          this.data.plantStockData = res\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.plantStockData[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n        this.rollupData()\n      }\n    })\n  }\n\n  goWerk(werk) : void {\n    this.router.navigate(['werk', werk], { relativeTo: this.activatedRoute, replaceUrl: true })\n  }\n\n  changePlant(plant) {\n    localStorage.setItem('plant-stock-plant', plant)\n    this.router.navigate(['companies', plant], { replaceUrl: true })\n  }\n\n  rollupData() {\n    // Aliases\n    const plantKey = this.config.config.reports.trucks.columns.plantStock.plantKey\n    const plantName = this.config.config.reports.trucks.columns.plantStock.plantName\n    const werkbestandName = this.config.config.reports.trucks.columns.plantStock.werkbestandName\n    //\n    this.plants = this.data.plantStockData.reduce((r,a) => {\n      r[a[plantKey]] = r[a[plantKey]] || ''\n      r[a[plantKey]] = a[plantName[this.config.config.corpintra ? this.config.config.language : 'en']]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['companies', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    const plantCache = localStorage.getItem('plant-stock-plant')\n    if (plantCache && plantCache != this.plant) this.router.navigate(['companies', plantCache], { replaceUrl: true })\n    this.title.setTitle(this.config.config.appTitle + ' - Plant Stock - '+((this.data.plantStockData.filter(item => item[plantKey] == this.plant)[0][plantName[this.config.config.corpintra ? this.config.config.language : 'en']])))\n    const filteredRowsByPlant = this.data.plantStockData.filter(aloc => aloc[plantKey] == this.plant)\n    this.totalActual = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.totalPrevious = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.totalDelta = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.werkbestands = { ...this.data.classifyByIndex(filteredRowsByPlant, werkbestandName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    setTimeout(() => {\n      this.ready = true\n    })\n  }\n\n  totalActual: number = 0\n  totalPrevious: number = 0\n  totalDelta: number = 0\n\n  werkbestands\n\n}\n","<div class=\"report-header\">\n  <div class=\"plandate\">\n    <div class=\"empty\"></div>{{ 'plandate' | translate }}: {{ plandate }}\n  </div>\n  <div class=\"overview\">\n    <div class=\"graphic\">\n      <plant-stock-graphic [werks]=\"werkbestands | keyvalue | plantStockSorting\"></plant-stock-graphic>\n    </div>\n    <div class=\"simple\">\n      <div class=\"headers\">\n        <div class=\"empty\"></div>\n        <div class=\"actual\">{{ plandate }}</div>\n        <div class=\"previous\">Prev. Month</div>\n        <div class=\"delta\">&Delta;</div>\n      </div>\n      <div (click)=\"goWerk(werk.key)\" class=\"overview-group\" *ngFor=\"let werk of werkbestands | keyvalue | plantStockSorting\">\n        <div class=\"werk\">{{\n          werk.value[0][config.config.reports.trucks.columns.plantStock.werkbestandName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n        <div class=\"actual\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual) |\n          toNumber }}</div>\n        <div class=\"previous\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous) |\n          toNumber }}</div>\n        <div class=\"delta\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.delta) |\n          toNumber:true }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n<header>\n  <div class=\"werk\">\n    <mat-form-field matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\" style=\"margin-left: 10px;\">\n      <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n        <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n          {{ plant.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"actual\">{{ plandate }}</div>\n  <div class=\"previous\">Prev. Month</div>\n  <div class=\"delta\">&Delta;</div>\n</header>\n<div class=\"content-wrapper\">\n  <div class=\"header-rows\">\n    <div class=\"group-header\">\n      <div class=\"werk\">TOTAL</div>\n      <div class=\"actual\">{{ totalActual | toNumber }}</div>\n      <div class=\"previous\">{{ totalPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ totalDelta | toNumber:true }}</div>\n    </div>\n    <div class=\"group-header return arrow-right\">\n      <div class=\"werk\" (click)=\"returnToMain()\">\n        <div matTooltip=\"Return to main level\" matTooltipPosition=\"after\" matTooltipClass=\"after\" class=\"inlineBlock\">{{\n          werk }}</div>\n      </div>\n      <div class=\"actual\">{{ werkActual | toNumber }}</div>\n      <div class=\"previous\">{{ werkPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ werkDelta | toNumber:true }}</div>\n    </div>\n  </div>\n  <dip-circular-meters [actualValue]=\"werkActual\" [previousValue]=\"werkPrevious\" [actual]=\"actualValue\" [previous]=\"previousValue\"></dip-circular-meters>\n  <div class=\"row\" (click)=\"goHofbestand(hofb.key)\" *ngFor=\"let hofb of hofbestands | keyvalue\">\n    <div class=\"werk\">{{\n      hofb.value[0][config.config.reports.trucks.columns.plantStock.hofbestandName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n    <div class=\"actual\">{{ data.sumByIndex(hofb.value, config.config.reports.trucks.columns.plantStock.actual) |\n      toNumber }}</div>\n    <div class=\"previous\">{{ data.sumByIndex(hofb.value, config.config.reports.trucks.columns.plantStock.previous) |\n      toNumber }}</div>\n    <div class=\"delta\">{{ data.sumByIndex(hofb.value, config.config.reports.trucks.columns.plantStock.delta) |\n      toNumber:true }}</div>\n  </div>\n</div>","<div class=\"report-header\">\n  <div class=\"plandate\">\n    <div class=\"empty\"></div>{{ 'plandate' | translate }}: {{ plandate }}\n  </div>\n  <div class=\"overview\">\n    <div class=\"graphic\">\n      <plant-stock-graphic [werks]=\"werkbestands | keyvalue | plantStockSorting\"></plant-stock-graphic>\n    </div>\n    <div class=\"simple\">\n      <div class=\"headers\">\n        <div class=\"empty\"></div>\n        <div class=\"actual\">{{ plandate }}</div>\n        <div class=\"previous\">Prev. Month</div>\n        <div class=\"delta\">&Delta;</div>\n      </div>\n      <div (click)=\"goWerk(werk.key)\" class=\"overview-group\" *ngFor=\"let werk of werkbestands | keyvalue | plantStockSorting\">\n        <div class=\"werk\">{{\n          werk.value[0][config.config.reports.trucks.columns.plantStock.werkbestandName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n        <div class=\"actual\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.actual) |\n          toNumber }}</div>\n        <div class=\"previous\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.previous) |\n          toNumber }}</div>\n        <div class=\"delta\">{{ data.sumByIndex(werk.value, config.config.reports.trucks.columns.plantStock.delta) |\n          toNumber:true }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n<header>\n  <div class=\"werk\">\n    <mat-form-field matTooltipClass=\"after\" matTooltipPosition=\"after\" matTooltip=\"Change selected plant\" style=\"margin-left: 10px;\">\n      <mat-select ngDefaultControl [(ngModel)]=\"plant\" (ngModelChange)=\"changePlant($event)\">\n        <mat-option *ngFor=\"let plant of plants | keyvalue\" [value]=\"plant.key\">\n          {{ plant.value }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"actual\">{{ plandate }}</div>\n  <div class=\"previous\">Prev. Month</div>\n  <div class=\"delta\">&Delta;</div>\n</header>\n<div class=\"content-wrapper\">\n  <div class=\"header-rows\">\n    <div class=\"group-header\">\n      <div class=\"werk\">TOTAL</div>\n      <div class=\"actual\">{{ totalActual | toNumber }}</div>\n      <div class=\"previous\">{{ totalPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ totalDelta | toNumber:true }}</div>\n    </div>\n    <div class=\"group-header return arrow-right\">\n      <div class=\"werk\" (click)=\"returnToMain()\">\n        <div matTooltip=\"Return to main level\" matTooltipPosition=\"after\" matTooltipClass=\"after\" class=\"inlineBlock\">{{\n          werk }}</div>\n      </div>\n      <div class=\"actual\">{{ werkActual | toNumber }}</div>\n      <div class=\"previous\">{{ werkPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ werkDelta | toNumber:true }}</div>\n    </div>\n    <div *ngIf=\"hofb != 'not defined' && hofb != 'nicht definiert'\" class=\"group-header return arrow-right\">\n      <div class=\"werk\" (click)=\"returnToLvl2()\">\n        <div matTooltip=\"Return to werkbestand level\" matTooltipPosition=\"after\" matTooltipClass=\"after\" class=\"inlineBlock\">{{\n          hofb }}</div>\n      </div>\n      <div class=\"actual\">{{ hofbActual | toNumber }}</div>\n      <div class=\"previous\">{{ hofbPrevious | toNumber }}</div>\n      <div class=\"delta\">{{ hofbDelta | toNumber:true }}</div>\n    </div>\n  </div>\n  <dip-circular-meters [actualValue]=\"hofbActual\" [previousValue]=\"hofbPrevious\" [actual]=\"actualValue\" [previous]=\"previousValue\"></dip-circular-meters>\n  <div class=\"group-header\">REGIONS</div>\n  <div class=\"row\" *ngFor=\"let region of regions | keyvalue\">\n    <div class=\"werk\">{{\n      region.value[0][config.config.reports.trucks.columns.plantStock.regionName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n    <div class=\"actual\">{{ data.sumByIndex(region.value, config.config.reports.trucks.columns.plantStock.actual) |\n      toNumber }}</div>\n    <div class=\"previous\">{{ data.sumByIndex(region.value, config.config.reports.trucks.columns.plantStock.previous) |\n      toNumber }}</div>\n    <div class=\"delta\">{{ data.sumByIndex(region.value, config.config.reports.trucks.columns.plantStock.delta) |\n      toNumber:true }}</div>\n  </div>\n  <div class=\"group-header\">PRODUCTS</div>\n  <div class=\"row\" *ngFor=\"let product of products | keyvalue\">\n    <div class=\"werk\">{{\n      product.value[0][config.config.reports.trucks.columns.plantStock.productName[config.config.corpintra ? config.config.language : 'en']] }}</div>\n    <div class=\"actual\">{{ data.sumByIndex(product.value, config.config.reports.trucks.columns.plantStock.actual) |\n      toNumber }}</div>\n    <div class=\"previous\">{{ data.sumByIndex(product.value, config.config.reports.trucks.columns.plantStock.previous) |\n      toNumber }}</div>\n    <div class=\"delta\">{{ data.sumByIndex(product.value, config.config.reports.trucks.columns.plantStock.delta) |\n      toNumber:true }}</div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WrapperComponent } from './components/wrapper/wrapper.component';\nimport { PlantStockMainComponent } from './components/plant-stock-main/plant-stock-main.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { GraphicComponent } from './components/graphic/graphic.component';\nimport { PlantStockLvl2Component } from './components/plant-stock-lvl2/plant-stock-lvl2.component';\nimport { PlantStockLvl3Component } from './components/plant-stock-lvl3/plant-stock-lvl3.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WrapperComponent,\n    children: [\n      {\n        path: '',\n        component: PlantStockMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant',\n        component: PlantStockMainComponent,\n        data: { level: 1 }\n      },\n      {\n        path: ':plant/werk/:werk',\n        component: PlantStockLvl2Component,\n        data: { level: 2 }\n      },\n      {\n        path: ':plant/werk/:werk/hofbestand/:hofb',\n        component: PlantStockLvl3Component,\n        data: { level: 3 }\n      }\n    ]\n  },\n]\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n    SharedModule,\n    CommonModule\n  ],\n  declarations: [\n    WrapperComponent,\n    PlantStockMainComponent,\n    GraphicComponent,\n    PlantStockLvl2Component,\n    PlantStockLvl3Component\n  ]\n})\nexport class PlantStockModule { }\n","import { Component } from '@angular/core';\nimport * as moment from 'moment';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment, percent } from '@other/functions';\n\n@Component({\n  selector: 'plant-stock-lvl2',\n  templateUrl: './plant-stock-lvl2.component.html',\n  styleUrls: ['./plant-stock-lvl2.component.scss'],\n  host: {\n    '(swiperight)': 'returnToMain()'\n  }\n})\nexport class PlantStockLvl2Component {\n\n  ready: boolean = false\n\n  plandate: string = ''\n  plants\n\n  plant: string\n  werk: string\n\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).moment = moment\n    moment.locale(this.config.config.language)\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      this.werk = params.get('werk')\n      // If no Plant Stock rows were found, get them\n      if (this.data.plantStockData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.PlantStock).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n          this.data.plantStockData = res\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.plantStockData[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n        this.rollupData()\n      }\n    })\n  }\n\n  goWerk(werk): void {\n    this.router.navigate(['companies', this.plant, 'werk', werk], { replaceUrl: true })\n  }\n\n  changePlant(plant) {\n    this.router.navigate(['companies', plant, 'werk', this.werk], { replaceUrl: true })\n  }\n\n  goHofbestand(hofbestandKey) {\n    this.router.navigate(['companies', this.plant, 'werk', this.werk, 'hofbestand', hofbestandKey], { replaceUrl: true })\n  }\n\n  rollupData() {\n    // Aliases\n    const plantKey = this.config.config.reports.trucks.columns.plantStock.plantKey\n    const plantName = this.config.config.reports.trucks.columns.plantStock.plantName\n    const werkbestandName = this.config.config.reports.trucks.columns.plantStock.werkbestandName\n    const hofbestandName = this.config.config.reports.trucks.columns.plantStock.hofbestandName\n    //\n    this.plants = this.data.plantStockData.reduce((r, a) => {\n      r[a[plantKey]] = r[a[plantKey]] || ''\n      r[a[plantKey]] = a[plantName[this.config.config.corpintra ? this.config.config.language : 'en']]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['companies', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - Plant Stock - ' + ((this.data.plantStockData.filter(item => item[plantKey] == this.plant)[0][plantName[this.config.config.corpintra ? this.config.config.language : 'en']])))\n    const filteredRowsByPlant = this.data.plantStockData.filter(aloc => aloc[plantKey] == this.plant)\n    this.totalActual = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.totalPrevious = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.totalDelta = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.werkbestands = { ...this.data.classifyByIndex(filteredRowsByPlant, werkbestandName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    const filteredRowsByWerk = filteredRowsByPlant.filter(item => item[werkbestandName[this.config.config.corpintra ? this.config.config.language : 'en']] == this.werk)\n    this.werkActual = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.werkPrevious = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.werkDelta = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.hofbestands = { ...this.data.classifyByIndex(filteredRowsByWerk, hofbestandName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    if (this.hofbestands.hasOwnProperty(\"not defined\")) {\n      this.router.navigate(['companies', this.plant, 'werk', this.werk, 'hofbestand', 'not defined'], { replaceUrl: true })\n      return\n    }\n    if (this.hofbestands.hasOwnProperty(\"nicht definiert\")) {\n      this.router.navigate(['companies', this.plant, 'werk', this.werk, 'hofbestand', 'nicht definiert'], { replaceUrl: true })\n      return\n    }\n    this.actualValue = percent(this.werkActual, this.totalActual)\n    this.previousValue = percent(this.werkPrevious, this.totalPrevious)\n    setTimeout(() => {\n      this.ready = true\n    })\n  }\n\n  returnToMain(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute })\n  }\n\n  actualValue\n  previousValue\n\n  totalActual: number = 0\n  totalPrevious: number = 0\n  totalDelta: number = 0\n\n  werkActual: number = 0\n  werkPrevious: number = 0\n  werkDelta: number = 0\n\n  werkbestands\n  hofbestands\n}\n","import { Component } from '@angular/core';\nimport { DataService } from '@services/data.service';\nimport { Title } from '@angular/platform-browser';\nimport { ApiService } from '@services/api.service';\nimport { ConfigService } from '@services/config.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { ReportTypes } from '@other/interfaces';\nimport { getPlanDateWithMoment, percent } from '@other/functions';\n\n@Component({\n  selector: 'plant-stock-lvl3',\n  templateUrl: './plant-stock-lvl3.component.html',\n  styleUrls: ['./plant-stock-lvl3.component.scss'],\n  host: {\n    '(swiperight)': 'returnToLvl2()'\n  }\n})\nexport class PlantStockLvl3Component {\n\n  ready: boolean = false\n\n  plandate: string = ''\n  plants\n\n  plant: string\n  werk: string\n  hofb: string\n\n  constructor(\n    public data: DataService,\n    private title: Title,\n    private api: ApiService,\n    public config: ConfigService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    (window as any).moment = moment\n    moment.locale(this.config.config.language)\n    this.activatedRoute.paramMap.subscribe(params => {\n      this.plant = params.get('plant')\n      this.werk = params.get('werk')\n      this.hofb = params.get('hofb')\n      // If no Plant Stock rows were found, get them\n      if (this.data.plantStockData.length == 0) {\n        this.api.getSavedReportData(ReportTypes.PlantStock).subscribe(res => {\n          this.plandate = getPlanDateWithMoment(res[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n          this.data.plantStockData = res\n          // Transform numeric values to real numeric values, also checking NaN or null\n          // DEPRECATED\n          /* this.data.plantStockData.forEach((row, index, rows) => {\n            config.config.reports.trucks.columns.plantStock.shouldBeNumber.forEach(num => {\n              rows[index][num] = isNaN(rows[index][num]) ? 0 : parseFloat(rows[index][num])\n            });\n          }) */\n          this.rollupData()\n        })\n      } else {\n        this.plandate = getPlanDateWithMoment(this.data.plantStockData[0][config.config.reports.trucks.columns.plantStock.actualDate], moment, true)\n        this.rollupData()\n      }\n    })\n  }\n\n  changePlant(plant) {\n    this.router.navigate(['companies', plant, 'werk', this.werk, 'hofbestand', this.hofb], { replaceUrl: true })\n  }\n\n  rollupData() {\n    // Aliases\n    const plantKey = this.config.config.reports.trucks.columns.plantStock.plantKey\n    const plantName = this.config.config.reports.trucks.columns.plantStock.plantName\n    const werkbestandName = this.config.config.reports.trucks.columns.plantStock.werkbestandName\n    const hofbestandName = this.config.config.reports.trucks.columns.plantStock.hofbestandName\n    const regionName = this.config.config.reports.trucks.columns.plantStock.regionName\n    const productName = this.config.config.reports.trucks.columns.plantStock.productName\n    //\n    this.plants = this.data.plantStockData.reduce((r, a) => {\n      r[a[plantKey]] = r[a[plantKey]] || ''\n      r[a[plantKey]] = a[plantName[this.config.config.corpintra ? this.config.config.language : 'en']]\n      return r\n    }, {})\n    if (this.plant == null || !this.plants[this.plant]) {\n      this.router.navigate(['companies', Object.keys(this.plants)[0]], { replaceUrl: true })\n      return\n    }\n    this.title.setTitle(this.config.config.appTitle + ' - Plant Stock - ' + ((this.data.plantStockData.filter(item => item[plantKey] == this.plant)[0][plantName[this.config.config.corpintra ? this.config.config.language : 'en']])))\n    const filteredRowsByPlant = this.data.plantStockData.filter(aloc => aloc[plantKey] == this.plant)\n    this.totalActual = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.totalPrevious = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.totalDelta = this.data.sumByIndex(filteredRowsByPlant, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.werkbestands = { ...this.data.classifyByIndex(filteredRowsByPlant, werkbestandName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    const filteredRowsByWerk = filteredRowsByPlant.filter(item => item[werkbestandName[this.config.config.corpintra ? this.config.config.language : 'en']] == this.werk)\n    this.werkActual = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.werkPrevious = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.werkDelta = this.data.sumByIndex(filteredRowsByWerk, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.hofbestands = { ...this.data.classifyByIndex(filteredRowsByWerk, hofbestandName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    const filteredRowsByHofbestand = filteredRowsByWerk.filter(item => item[hofbestandName[this.config.config.corpintra ? this.config.config.language : 'en']] == this.hofb)\n    this.hofbActual = this.data.sumByIndex(filteredRowsByHofbestand, this.config.config.reports.trucks.columns.plantStock.actual)\n    this.hofbPrevious = this.data.sumByIndex(filteredRowsByHofbestand, this.config.config.reports.trucks.columns.plantStock.previous)\n    this.hofbDelta = this.data.sumByIndex(filteredRowsByHofbestand, this.config.config.reports.trucks.columns.plantStock.delta)\n    this.regions = { ...this.data.classifyByIndex(filteredRowsByHofbestand, regionName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    this.products = { ...this.data.classifyByIndex(filteredRowsByHofbestand, productName[this.config.config.corpintra ? this.config.config.language : 'en']) }\n    this.actualValue = +percent(this.hofbActual, this.werkActual)\n    this.previousValue = +percent(this.hofbPrevious, this.werkPrevious)\n    setTimeout(() => {\n      this.ready = true\n    })\n  }\n\n  goWerk(werk): void {\n    this.router.navigate(['companies', this.plant, 'werk', werk], { replaceUrl: true })\n  }\n\n  returnToMain(): void {\n    this.router.navigate(['../../../../'], { relativeTo: this.activatedRoute })\n  }\n\n  returnToLvl2(): void {\n    this.router.navigate(['../../'], { relativeTo: this.activatedRoute })\n  }\n\n  actualValue: number = 0\n  previousValue: number = 0\n\n  totalActual: number = 0\n  totalPrevious: number = 0\n  totalDelta: number = 0\n\n  werkActual: number = 0\n  werkPrevious: number = 0\n  werkDelta: number = 0\n\n  hofbActual: number = 0\n  hofbPrevious: number = 0\n  hofbDelta: number = 0\n\n  werkbestands\n  hofbestands\n\n  regions\n  products\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'toNumber'\n})\nexport class NumberPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  transform(value: number, sign: boolean = false, comma: boolean = true): string {\n    return ToNumberFn(value, sign, comma, this.language);\n  }\n\n}\n\nexport function ToNumberFn(value: number, sign: boolean = false, comma: boolean = true, language: string = 'en') {\n  if (isNaN(value)) {\n    return '-';\n  }\n  value = Math.round(value);\n  let ultimate: string\n  if (value == 0) return '0'\n  if (value > 0) {\n    if (sign) {\n      ultimate = '+ ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  } else {\n    if (sign) {\n      ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  }\n  if (comma) {\n    return ultimate;\n  } else {\n    return ultimate.replace(/[,.]/g, '');\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction memoize(func, resolver, cache) {\n    var memoized = function () {\n        var _a;\n        var args = arguments;\n        var key = resolver.apply(this, args);\n        var cache = memoized.cache;\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = (_a = cache.set(key, result)) !== null && _a !== void 0 ? _a : cache;\n        return result;\n    };\n    memoized.cache = cache;\n    return memoized;\n}\nvar defaultResolver = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args[0];\n};\nexports.default = (function (config) {\n    if (config === void 0) { config = {}; }\n    return function (_, __, descriptor) {\n        var _a, _b;\n        if (typeof descriptor.value !== 'function') {\n            throw new Error('Memoization can be applied only to methods');\n        }\n        var resolver = (_a = config.resolver) !== null && _a !== void 0 ? _a : defaultResolver;\n        var cache = (_b = config.cache) !== null && _b !== void 0 ? _b : new Map();\n        descriptor.value = memoize(descriptor.value, resolver, cache);\n        return descriptor;\n    };\n});\n"]}