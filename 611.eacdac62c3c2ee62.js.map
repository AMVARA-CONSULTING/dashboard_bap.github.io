{"version":3,"file":"611.eacdac62c3c2ee62.js","mappings":"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","names":["ReportInfoComponent","constructor","config","api","this","BehaviorSubject","ngOnChanges","changes","type","currentValue","id","next","reports","target","scenario","reportDates","length","getSavedReportData","ReportTypes","subscribe","_","rollup","date","moment","format","hour","scenarios","targets","ids","orderBacklog","orderIntake","allocation","plantStock","productionProgram","orderIntakeHistory","key","Object","keys","push","includes","getValue","name","i0","selectors","AboutComponent","translate","snack","data","_cognos","_store","currentLevel","ngOnInit","reportInfos","shownTitle","instant","title","availableLinks","getLinksWithAccess","map","link","text","debug","console","log","filter","report","indexOf","toLowerCase","replace","delay","ms","Promise","resolve","setTimeout","setLang","code","localStorage","setItem","use","dispatch","ConfigActions","then","any","open","duration","reloadLang","language","ctx","$event","routes","path","component","level","AboutModule","CommonModule","FormsModule","SharedModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/components/report-info/report-info.component.ts","./src/app/components/report-info/report-info.component.html","./src/app/modules/about/about/about.component.html","./src/app/modules/about/about/about.component.ts","./src/app/modules/about/about.module.ts"],"sourcesContent":["import { Component, Input, ChangeDetectionStrategy, SimpleChanges, OnChanges } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport { ApiService } from '@services/api.service';\nimport * as moment from 'moment';\nimport { BehaviorSubject } from 'rxjs';\nimport { ReportTypes } from '@other/interfaces';\n\n@Component({\n  selector: 'report-info',\n  templateUrl: './report-info.component.html',\n  styleUrls: ['./report-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ReportInfoComponent implements OnChanges {\n\n  date = new BehaviorSubject<string>('');\n  id = new BehaviorSubject<string>('');\n  name = new BehaviorSubject<string>('x');\n  hour = new BehaviorSubject<string>('');\n\n  constructor(\n    private config: ConfigService,\n    private api: ApiService\n  ) { }\n\n  @Input() type = '';\n  @Input() title = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    const type = changes.type.currentValue;\n    this.id.next(this.config.config.reports[this.config.config.target][this.config.config.scenario][type].id);\n    if (this.api.reportDates[type].length === 0) {\n      switch (type) {\n        case 'orderBacklog':\n          this.api.getSavedReportData(ReportTypes.OrderBacklog).subscribe(_ => this.rollup(type));\n          break;\n        case 'orderIntake':\n          this.api.getSavedReportData(ReportTypes.OrderIntake).subscribe(_ => this.rollup(type));\n          break;\n        case 'productionProgram':\n          this.api.getSavedReportData(ReportTypes.ProductionProgram).subscribe(_ => this.rollup(type));\n          break;\n        case 'allocation':\n          this.api.getSavedReportData(ReportTypes.Allocation).subscribe(_ => this.rollup(type));\n          break;\n        case 'plantStock':\n          this.api.getSavedReportData(ReportTypes.PlantStock).subscribe(_ => this.rollup(type));\n          break;\n        case 'orderIntakeHistory':\n          this.api.getSavedReportData(ReportTypes.OrderIntakeHistory).subscribe(_ => this.rollup(type));\n          break;\n      }\n    } else {\n      this.rollup(type);\n    }\n  }\n\n  rollup(type: string): void {\n    this.date.next(moment(this.api.reportDates[type], 'YYYY-MM-DDTHH:mm:ss.SSS[Z]').format('DD/MM/YYYY'));\n    this.hour.next(moment(this.api.reportDates[type], 'YYYY-MM-DDTHH:mm:ss.SSS[Z]').format('HH:mm'));\n    const scenarios = ['int', 'prod'];\n    const targets = ['trucks', 'vans'];\n    const ids = {\n      orderBacklog: [],\n      orderIntake: [],\n      allocation: [],\n      plantStock: [],\n      productionProgram: [],\n      orderIntakeHistory: []\n    };\n    // Collect ReportIDs for each Report, Scenario and Target\n    // tslint:disable-next-line: forin\n    for (const key of Object.keys(ids)) {\n      // tslint:disable-next-line: forin\n      for (const target of targets) {\n        // tslint:disable-next-line: forin\n        for (const scenario of scenarios) {\n          if (this.config.config.reports[target][scenario][key].id) {\n            ids[key].push(this.config.config.reports[target][scenario][key].id);\n          }\n        }\n      }\n    }\n    // Check Order Intake\n    // tslint:disable-next-line: curly\n    if (ids.orderIntake.includes(this.id.getValue())) this.name.next('MobileCockpit_V2_14.3_dev');\n    // tslint:disable-next-line: curly\n    if (ids.productionProgram.includes(this.id.getValue())) this.name.next('Planning_Truck');\n    // tslint:disable-next-line: curly\n    if (ids.allocation.includes(this.id.getValue())) this.name.next('Allocation_Truck');\n    // tslint:disable-next-line: curly\n    if (ids.plantStock.includes(this.id.getValue())) this.name.next('Plant_Stock_Truck');\n    // tslint:disable-next-line: curly\n    if (ids.orderBacklog.includes(this.id.getValue())) this.name.next('Order_Backlog_Truck');\n    // tslint:disable-next-line: curly\n    if (ids.orderIntakeHistory.includes(this.id.getValue())) this.name.next('Order_Intake_History');\n  }\n\n}\n","<div class=\"title\">{{ title | uppercase }}</div>\n<div class=\"container\">\n  <div class=\"name\">\n    <span class=\"prop\">ReportName:</span> <span class=\"val\">{{ name | async }}</span>\n  </div>\n  <div class=\"id\">\n    <span class=\"prop\">ID:</span> <span class=\"val\">{{ id | async }}</span>\n  </div>\n  <div class=\"date\">\n    <span class=\"prop\">Date:</span> <span class=\"val\">{{ date | async }} {{ hour | async }}</span>\n  </div>\n</div>","<mat-accordion [multi]=\"true\">\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        {{ 'about.config' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <p>\n      {{ 'about.lang' | translate }}: <mat-form-field>\n          <mat-select (ngModelChange)=\"setLang($event)\" [(ngModel)]=\"config.config.language\">\n            <mat-option *ngFor=\"let lang of config.config.languageCodes | keyvalue\" [value]=\"lang.key\">{{ lang.value }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n    </p>\n    <button (click)=\"reloadLang()\" class=\"reload-translations\" mat-raised-button>{{ 'about.reload_lang' | translate }}</button>\n    <br>\n    <app-theme-switcher></app-theme-switcher>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n          {{ 'about.thanks' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <p [innerHTML]=\"'about.thanks_message' | translate\"></p>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n          {{ 'about.software' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <p [innerHTML]=\"'about.software_message' | translate\"></p>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n          {{ 'about.licenses' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"software\">\n      <ul>\n        <li>IBM Cognos Analytics 11: <a href=\"#\" target=\"_blank\">{{ 'about.license_type.consumer' | translate }}</a></li>\n        <li>Angular {{ angularVersion }}: <a href=\"https://github.com/angular/angular/blob/master/LICENSE\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n        <li>HammerJS {{ hammerVersion }}: <a href=\"https://github.com/hammerjs/hammer.js/blob/master/LICENSE.md\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n        <li>MomentJS {{ momentVersion }}: <a href=\"https://github.com/moment/moment/blob/develop/LICENSE\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n        <li>@ngx-translate {{ ngx_translateVersion }}: <a href=\"https://github.com/ngx-translate/core/blob/master/LICENSE\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n        <li>angular-svg-round-progressbar {{ progressVersion }}: <a href=\"https://github.com/crisbeto/angular-svg-round-progressbar/blob/master/LICENSE\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n        <li>ng-connection-service {{ connectionVersion }}: <a href=\"https://github.com/ultrasonicsoft/ng-connection-service/blob/master/LICENSE\" target=\"_blank\">{{ 'about.license_type.mit' | translate }}</a></li>\n      </ul>\n    </div>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n          {{ 'about.technical_information' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    {{ 'about.connection' | translate }}: <span class=\"sw_status enabled\">OK</span><span style=\"display:none\" class=\"sw_status disabled\">Not running</span>\n    <report-info *ngFor=\"let report of reportInfos | async\" [shownTitle]=\"report.shownTitle\" [title]=\"report.title\" [type]=\"report.type\"></report-info>\n    <div *ngIf=\"(_cognos.userCapabilities | async )?.admin\">\n      <b>Hint:</b> Press Alt + F11 to show current config in the Browser Console.\n    </div>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n          {{ 'about.changelog' | translate }}\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"changelog\">\n      <ul>\n        <li *ngFor=\"let change of config.config.changelog\">\n          <div class=\"change-title\">{{ change.version }}</div>\n          <ul *ngIf=\"change.text.length > 0\">\n            <li *ngFor=\"let desc of change.text\">{{ desc }}</li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </mat-expansion-panel>\n</mat-accordion>\n<div class=\"version\">{{ 'about.version' | translate }}: {{ config.config.version }}</div>","import { Component, OnInit, VERSION, ChangeDetectionStrategy } from '@angular/core';\nimport { ConfigService } from '@services/config.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DataService } from '@services/data.service';\n// import  * as packages from '../../../../../package.json';\nimport { CognosService } from '@services/cognos.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { Store } from '@ngxs/store';\nimport { ConfigActions } from '@store/config.state';\n// import { formatVersion } from '@other/functions';\n\n@Component({\n  selector: 'about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(swiperight)': 'data.goFrom(\"about\", $event)',\n    '(swipeleft)': 'data.goFrom(\"about\", $event)'\n  }\n})\nexport class AboutComponent implements OnInit {\n\n  constructor(\n    public config: ConfigService,\n    private translate: TranslateService,\n    private snack: MatSnackBar,\n    private data: DataService,\n    public _cognos: CognosService,\n    private _store: Store\n  ) {\n    this.data.currentLevel = 1;\n    // this.angularVersion = VERSION.full;\n    // this.momentVersion = formatVersion(packages.moment);\n    // this.hammerVersion = formatVersion(dependencies.hammerjs);\n    // this.ngx_translateVersion = formatVersion(packages['@ngx-translate/core']);\n    // this.progressVersion = formatVersion(packages['angular-svg-round-progressbar']);\n    // this.connectionVersion = formatVersion(packages['ng-connection-service']);\n  }\n\n  connectionVersion;\n  progressVersion;\n  ngx_translateVersion;\n  momentVersion;\n  hammerVersion;\n  angularVersion;\n  reportDates;\n\n  ngOnInit() {\n    // Only show available reports info, this prevents the user from seeing things it shouldn't see\n    let reportInfos: AboutReport[] = [\n      { shownTitle: this.translate.instant('menu.order_intake'), title: 'Order Intake', type: 'orderIntake' },\n      { shownTitle: this.translate.instant('menu.order_backlog'), title: 'Order Backlog', type: 'orderBacklog' },\n      { shownTitle: this.translate.instant('menu.production_program'), title: 'Production program', type: 'productionProgram' },\n      { shownTitle: this.translate.instant('menu.allocation'), title: 'Allocation', type: 'allocation' },\n      { shownTitle: this.translate.instant('menu.plant_stock'), title: 'Plant stock', type: 'plantStock' }\n    ];\n    const availableLinks = this._cognos.getLinksWithAccess().map(link => link.text);\n    if (this.config.config.debug) {\n      console.log('Available links:', availableLinks);\n    }\n    reportInfos = reportInfos.filter(report => availableLinks.indexOf(report.title.toLowerCase().replace(/\\ /g, '_')) > -1);\n    this.reportInfos.next(reportInfos);\n    if (this.config.config.debug) {\n      console.log('Available reports:', reportInfos);\n    }\n  }\n\n  delay(ms: number) {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n  }\n  \n  // Added delay to setLang and reloadLang because pop up doesn't have enough time to get the chosen language, so instead it would the the default/previous\n  setLang(code: string): void {\n    localStorage.setItem('lang', code);\n    this.translate.use(code);\n    this._store.dispatch( new ConfigActions.SetParameter('language', code) );\n    this.delay(300).then(any=>{\n      this.snack.open(this.translate.instant('help.language_change'), 'OK', { duration: 3000 });\n    });\n  }\n\n  reloadLang(): void {\n    this.translate.reloadLang(this.config.config.language);\n    this.delay(300).then(any=>{\n      this.snack.open(this.translate.instant('help.language_reload'), 'OK', { duration: 3000 });\n    });\n  }\n\n  reportInfos = new BehaviorSubject<AboutReport[]>([]);\n\n}\n\ninterface AboutReport {\n  shownTitle: string;\n  title: string;\n  type: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AboutComponent } from './about/about.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { SharedModule } from '@modules/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutComponent,\n    data: { level: 1 }\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    AboutComponent\n  ]\n})\nexport class AboutModule { }\n"]}