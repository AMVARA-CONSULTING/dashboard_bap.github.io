{"version":3,"file":"459.ee93161822e5f23b.js","mappings":"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","names":["i0","GraphicComponent","constructor","ref","translate","this","window","oi_graphic","ngOnChanges","changes","JSON","stringify","data","currentValue","previousValue","ready","chartData","formatData","barsWidth","length","setTimeout","detectChanges","formattedData","to","name","instant","day","average","month","tot","ow","rs","cc","push","calculatePercentualHeight","max","forEach","el","dayPercent","averagePercent","selectors","ctx_r11","oxw","ctx_r13","ctx_r14","_r7","MAs","ctx_r16","ctx_r17","_adapter","title","config","http","innerWidth","d","date","dTS","pd","includes","setTitle","appTitle","onResize","event","isMobile","target","ngOnInit","setLocale","language","get","subscribe","shipped","shippedToJson","pl","getPL","sp","getPD","setMID","setMAD","sd","pm","getPM","sm","changeDR","changeMR","loaded","err","onChangeM","m","onChangeP","console","log","onChangeD","viewDay","currentDateIndex","indexOf","ddr","dmar","find","months","month_id","gvcd","isFD","isLD","Object","keys","item","dates","mid","sTD","mad","getDate","toString","padStart","getMonth","getFullYear","year","split","Date","onDC","value","getInputSize","input","DeliveriesComponent","ctx","provide","DateAdapter","useClass","NativeDateAdapter","getFirstDayOfWeek","format","displayFormat","seperator","super","decls","__decorate","SelectSnapshot","ConfigState","routes","path","component","level","DeliveriesModule","CommonModule","SharedModule","RouterModule","transform","sign","comma","ToNumberFn","isNaN","ultimate","Math","round","t","parseInt","abs","toFixed","toLocaleString","c","replace","NumberPipe","pure"],"sourceRoot":"webpack:///","sources":["./src/app/modules/deliveries/components/graphic/graphic.component.html","./src/app/modules/deliveries/components/graphic/graphic.component.ts","./src/app/modules/deliveries/components/deliveries/deliveries.component.html","./src/app/modules/deliveries/components/deliveries/deliveries.component.ts","./src/app/modules/deliveries/dateadapter/date_adapter.ts","./src/app/modules/deliveries/deliveries.module.ts","./src/app/pipes/number.pipe.ts"],"sourcesContent":["<div class=\"wrapper\">\n  <div class=\"zone\" *ngFor=\"let diagram of chartData\" [style.width.%]=\"barsWidth\">\n    <div class=\"bars\">\n      <div style=\"position: relative; height: 100%;\">\n        <div [ngClass]=\"{zero: !ready}\" class=\"day\" [style.height.%]=\"diagram.dayPercent\">\n          <div class=\"value\">{{ diagram.day | toNumber}}</div>\n        </div>\n        <div [ngClass]=\"{zero: !ready}\" class=\"month\" [style.height.%]=\"diagram.averagePercent\" >\n          <div class=\"value\">{{ diagram.average | toNumber }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"title\">\n      {{ diagram.name }}\n    </div>\n  </div>\n</div>","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'shipped-graphic',\n  templateUrl: './graphic.component.html',\n  styleUrls: ['./graphic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GraphicComponent implements OnChanges {\n\n  constructor(private ref: ChangeDetectorRef, private translate: TranslateService) {\n    (window as any).oi_graphic = this;\n  }\n\n  @Input() data: any;\n  chartData: any = [];\n  barsWidth: number = 0\n\n  // this is a variable binded to [ngClass], if it is false bar's height goes down to zero.  Is used to force height transition animation\n  ready: boolean = false\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // return if currentData detected by changeDetection is the same as previousData\n    if ( JSON.stringify(changes.data.currentValue) == JSON.stringify(changes.data.previousValue) ) return;\n\n    // force bars' height to go down to 0, in order to trigger animation again when user changes day, plant or month\n    this.ready = false;\n\n    this.chartData = this.formatData(changes.data.currentValue);\n\n    // define percentual width for each bar group. A bar group contains 2 bars, one simulates selected 'day' data  and another 'monthly average' data\n    this.barsWidth = 100 / this.chartData.length\n\n    setTimeout(() =>  {\n      // allow bar to take percentual height, will trigger height transition animation from zero to x%\n      this.ready = true;\n\n      // force change detection\n      this.ref.detectChanges();\n    }, 300);\n  }\n\n\n  formatData(data) {\n    let formattedData = [];\n    const to = {name: this.translate.instant('shipped.to'), day: data.day.to, average: data.month[\"DS to\"]};\n    const tot = {name: this.translate.instant('shipped.tr'), day: data.day[\"tot\"], average: data.month[\"DS tot\"]};\n    const ow = {name: this.translate.instant('shipped.ow'), day: data.day[\"ow\"], average: data.month[\"DS ow\"]};\n    const rs = {name: this.translate.instant('shipped.rs'), day: data.day[\"rs\"], average: data.month[\"DS rs\"]};\n    const cc = {name: this.translate.instant('shipped.cc'), day: data.day[\"cc\"], average: data.month[\"DS cc\"]};\n\n\n    formattedData.push(to, tot, ow, rs, cc);\n    formattedData = this.calculatePercentualHeight(formattedData);\n\n    return formattedData;\n  }\n\n  calculatePercentualHeight(chartData) {\n    /* each item in diagramData array inicially comes in format {name: 'Total', day: 219, average: 451}\n     this function calculates highest numerical value in whole array, which is used as reference to calculated percentual height for each bar\n     so the height of all the displayed bars are percentually relevant to the highest bar\n\n     in the above shown item example highest numerical value would be 451.\n\n     so in chart the bar that displays 'average' property's value for this item will be the highest, which will go up to the top of the chart container (it would be 100% height)\n     but the day bar's height would be calculated having in mind that its height must be percentually relevant the highest bar, so the formula would be\n     ( 219 / 451 ) * 100  = 48,5  so the day bar's height will be 48,5% of highest bar's height\n\n     the same logic is applied independently of cuantity of items in array\n    */\n\n    let max = 0;\n\n    // get highest bar's value\n    chartData.forEach(el => {\n      if(el.day > max ) max = el.day\n      if(el.average > max ) max = el.average;\n    });\n\n    // generate percentual height for each item, using the highest bar as reference\n    chartData.forEach(el => {\n      el.dayPercent = (el.day / max) * 100;\n      el.averagePercent = (el.average / max) * 100;\n    });\n    return chartData;\n  }\n\n}","<div *ngIf=\"loaded\" class=\"shipped\">\n  <div *ngIf=\"pl.length > 0; else noReport\">\n    <div class=\"charts\">\n      <!------------- vertical bar chart legend labels ----------------->\n      <div class=\"field-labels\">\n        <!--------------------------------------------------------------- month selector -------------------------------------------------------------------------->\n        <div class=\"month-selector\">\n          <mat-button-toggle-group appearance=\"legacy\" #group=\"matButtonToggleGroup\" [(ngModel)]=\"sm\" (change)=\"onChangeM(group.value)\">\n            <mat-button-toggle value=\"{{shipped[sp]['month'][0].month_id}}\">{{shipped[sp]['month'][0].month_id}}</mat-button-toggle>\n            <mat-button-toggle value=\"{{shipped[sp]['month'][1].month_id}}\">{{shipped[sp]['month'][1].month_id}}</mat-button-toggle>\n          </mat-button-toggle-group>\n        </div>\n        <div class=\"legends\">\n          <span>{{ 'shipped.day' | translate }}</span>\n          <span>{{ 'shipped.mon_avg' | translate }}</span>\n        </div>\n      </div>\n\n      <!--------------------- Vertical bar chart  ----------------------->\n      <shipped-graphic [data]=\"gvcd()\" ></shipped-graphic>\n    </div>\n\n\n    <div class=\"data-table\">\n\n      <div class=\"table-header\">\n        <!-------------------- plant selector ----------------------->\n        <mat-form-field  matTooltipClass=\"\" matTooltipPosition=\"\" matTooltip=\"\">\n          <mat-select [(ngModel)]=\"sp\"  (ngModelChange)=\"onChangeP()\">\n            <mat-option *ngFor=\"let plant of pl\" [value]=\"plant\"> {{ plant }} </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <!---------------------- date slider ------------------------>\n        <mat-form-field>\n          <div class=\"date-slider\">\n            <mat-icon [ngClass]=\"{disabled: isFD()}\" (click)=\"onChangeD('previous')\">play_arrow</mat-icon>\n            <div (click)=\"picker.open()\">\n              <input #dateSelector [style.width.ch]=\"getInputSize(dateSelector)\" matInput readonly [value]=\"sTD(sd)\" [matDatepickerFilter]=\"aD\" [min]=\"mid\" [max]=\"mad\" [matDatepicker]=\"picker\" (dateChange)=\"onDC($event)\">\n            </div>\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker [touchUi]=\"isMobile\" #picker></mat-datepicker>\n            <mat-icon [ngClass]=\"{disabled: isLD()}\" (click)=\"onChangeD('next')\" >play_arrow</mat-icon>\n          </div>\n        </mat-form-field>\n\n        <!----------------------- month sum  ------------------------>\n        <mat-form-field>\n          <input matInput value=\"{{ 'shipped.mon_sum' | translate }}\" readonly>\n        </mat-form-field>\n\n        <!--------------------- month average ----------------------->\n        <mat-form-field>\n          <input matInput value=\"{{ 'shipped.mon_avg' | translate }}\" readonly>\n        </mat-form-field>\n      </div>\n\n      <!-------------------------------------------------------------------- report data start -------------------------------------------------------------------------------->\n      <div class=\"table-content\">\n        <table>\n          <tr>\n            <td>{{ 'shipped.to' | translate }}</td><td>{{ ddr.to | toNumber }}</td><td>{{ dmar.to | toNumber }}</td><td>{{ dmar['DS to'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.tr' | translate }}</td><td>{{ ddr['tot'] | toNumber }}</td><td>{{ dmar['tot'] | toNumber }}</td><td>{{ dmar['DS tot'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.ow' | translate }}</td><td>{{ ddr['ow'] | toNumber }}</td><td>{{ dmar['ow'] | toNumber }}</td><td>{{ dmar['DS ow'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.rs' | translate }}</td><td>{{ ddr['rs'] | toNumber }}</td><td>{{ dmar['rs'] | toNumber }}</td><td>{{ dmar['DS rs'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.dt' | translate }}</td><td>{{ ddr['dt'] | toNumber }}</td><td>{{ dmar['dt'] | toNumber }}</td><td>{{ dmar['DS dt'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.dp' | translate }}</td><td>{{ ddr['ftp'] | toNumber }}</td><td>{{ dmar['ftp'] | toNumber }}</td><td>{{ dmar['DS ftp'] | toNumber }}</td>\n          </tr>\n          <tr>\n            <td>{{ 'shipped.cc' | translate }}</td><td>{{ ddr['cc'] | toNumber }}</td><td>{{ dmar['cc'] | toNumber }}</td><td>{{ dmar['DS cc'] | toNumber }}</td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #noReport>\n  <div class=\"noReport\">\n    <mat-icon>find_in_page</mat-icon>\n    <p class=\"noReportMessage\">Currently there is no avaliable report</p>\n  </div>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, OnInit } from '@angular/core';\nimport { ILanguage } from '@other/interfaces';\nimport { DateAdapter } from '@angular/material/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ConfigState } from '@store/config.state';\nimport { DeliveriesDateAdapter } from '@modules/deliveries/dateadapter/date_adapter';\nimport { Title } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { ConfigService } from '@services/config.service';\nimport { shippedToJson } from '@other/functions';\n\n@Component({\n  selector: 'deliveries',\n  templateUrl: './deliveries.component.html',\n  styleUrls: ['./deliveries.component.scss'],\n  providers: [\n    { provide: DateAdapter, useClass: DeliveriesDateAdapter}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DeliveriesComponent implements OnInit {\n\n  @HostListener(\"window:resize\", ['$event'])\n  private onResize(event) {\n    this.isMobile = event.target.innerWidth <= 800;\n  }\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n  shipped: any = {};\n  pl: any = [];\n  pd: any = [];\n  mid: Date;\n  mad: Date;\n  pm: any = [];\n  sp: string;\n  sd: string;\n  sm: string;\n  ddr: Object = {}; \n  dmar: Object = {};\n  loaded: boolean;\n  isMobile: boolean = window.innerWidth <= 800;\n\n  constructor (\n    private ref: ChangeDetectorRef,\n    private _adapter: DateAdapter<any>,\n    private title: Title,\n    private config: ConfigService,\n    private http: HttpClient\n    ) {\n    this.title.setTitle(this.config.config.appTitle + ' - Shipped');\n  }\n\n  ngOnInit()  {\n    let country = this.language == 'en'? 'GB' : 'DE';\n    let _locale = `${this.language}-${country}`;\n    this._adapter.setLocale(_locale);\n    try {\n      this.http.get(\"assets/reports/KB_Delivery_new.txt\")\n        .subscribe(data => {\n          this.shipped = shippedToJson(data, this.language);\n          this.pl = this.getPL(this.shipped);\n          this.sp = this.pl[this.pl.length -1];\n          this.pd = this.getPD(this.shipped);\n          this.setMID();\n          this.setMAD();\n          this.sd = this.pd[this.pd.length - 1];\n          this.pm = this.getPM();\n          this.sm = this.pm[this.pm.length - 1];\n          this.changeDR();\n          this.changeMR();\n          this.loaded = true;\n          this.ref.detectChanges();\n        });\n    } catch(err) {\n        this.loaded = true;\n        this.ref.detectChanges();\n    }\n  }\n  onChangeM(m: string) {\n    this.sm = m;\n    this.changeMR();\n  }\n  onChangeP() {\n    console.log(this.sp)\n    this.pm = this.getPM();\n    this.sm = this.pm[this.pm.length - 1];\n    this.pd = this.getPD(this.shipped);\n    this.setMID();\n    this.setMAD();\n    this.sd = this.pd[this.pd.length - 1];\n    this.changeDR();\n    this.changeMR();\n  }\n  onChangeD(viewDay: string) {\n    let currentDateIndex = this.pd.indexOf(this.sd);\n    viewDay === 'next' ? this.sd = this.pd[currentDateIndex + 1] : this.sd = this.pd[currentDateIndex - 1];\n    this.changeDR();\n  }\n  changeDR() {\n    this.ddr = this.shipped[this.sp][this.sd];\n  }\n  changeMR() {\n    this.dmar = this.shipped[this.sp]['month'].find(months => months.month_id == this.sm);\n    this.gvcd();\n  }\n  isFD(): boolean {\n    return this.pd.indexOf(this.sd) === 0 ? true : false;\n  }\n  isLD(): boolean {\n    return this.pd.indexOf(this.sd) === this.pd.length -1 ? true : false;\n  }\n  gvcd() {\n    return { day: this.ddr, month: this.dmar };\n  }\n  getPL(shipped: any): string[] {\n    return Object.keys(shipped);\n  }\n  getPM() {\n    let months: any = [];\n    this.shipped[this.sp][\"month\"].forEach(item => { months.push(item.month_id)});\n    return months;\n  }\n  getPD(shipped: any): string[] {\n    let dates: any = [];\n    for (const item in shipped[this.sp]) {\n      if(item.includes(\"0\")) dates.push(item); \n    }\n    return dates;\n  }\n  setMID() {\n    this.mid = this.sTD(this.pd[0]);\n  }\n  setMAD() {\n    this.mad = this.sTD(this.pd[this.pd.length-1]);\n  }\n  dTS(date: Date): string {\n    return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\n  }\n  sTD(date: any): Date {\n    const [day, month, year] = date.split(\"/\");\n    return new Date(year, month-1, day);\n  }\n  onDC(event: Event) {\n    this.sd = this.dTS(event[\"value\"]);\n    this.changeDR();\n  }\n  aD = (d: Date | null): boolean => {\n    const date = this.dTS(d);\n    return this.pd.includes(date);\n  };\n  getInputSize(input) {\n    return input.value.length;\n  }\n}\n","import { NativeDateAdapter } from \"@angular/material/core\";\n\nexport class DeliveriesDateAdapter extends NativeDateAdapter {\n    \n    getFirstDayOfWeek(): number {\n        // retuns monday as the first day of the week\n        return 1;\n    }\n\n    format(date: Date, displayFormat: Object): string {\n        if ( displayFormat['year'] == \"numeric\" && displayFormat['month'] == \"numeric\" && displayFormat['day'] == \"numeric\" ){\n            const seperator = \"/\";\n            return `${date.getDate().toString().padStart(2, '0')}${seperator}${(date.getMonth() + 1).toString().padStart(2, '0')}${seperator}${date.getFullYear()}`;\n        }\n        return super.format(date, displayFormat);\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '@modules/shared/shared.module';\nimport { DeliveriesComponent } from './components/deliveries/deliveries.component';\nimport { GraphicComponent } from './components/graphic/graphic.component';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DeliveriesComponent,\n    data: { level: 1 }\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    DeliveriesComponent,\n    GraphicComponent\n  ]\n})\nexport class DeliveriesModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SelectSnapshot } from '@ngxs-labs/select-snapshot';\nimport { ILanguage } from '@other/interfaces';\nimport { ConfigState } from '@store/config.state';\n\n@Pipe({\n  name: 'toNumber'\n})\nexport class NumberPipe implements PipeTransform {\n\n  @SelectSnapshot(ConfigState.GetLanguage) language: ILanguage;\n\n  transform(value: number, sign: boolean = false, comma: boolean = true): string {\n    return ToNumberFn(value, sign, comma, this.language);\n  }\n\n}\n\nexport function ToNumberFn(value: number, sign: boolean = false, comma: boolean = true, language: string = 'en') {\n  if (isNaN(value)) {\n    return '-';\n  }\n  value = Math.round(value);\n  let ultimate: string\n  if (value == 0) return '0'\n  if (value > 0) {\n    if (sign) {\n      ultimate = '+ ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  } else {\n    if (sign) {\n      ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n    } else {\n      if (value < 0) {\n        ultimate = '- ' + parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      } else {\n        ultimate = parseInt(Math.abs(value).toFixed(0), 10).toLocaleString(language);\n      }\n    }\n  }\n  if (comma) {\n    return ultimate;\n  } else {\n    return ultimate.replace(/[,.]/g, '');\n  }\n}\n"]}